
stm32f411-boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b80  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08003d18  08003d18  00004d18  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003dac  08003dac  000050dc  2**0
                  CONTENTS
  4 .ARM          00000008  08003dac  08003dac  00004dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003db4  08003db4  000050dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003db4  08003db4  00004db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003db8  08003db8  00004db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000dc  20000000  08003dbc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f50  200000dc  08003e98  000050dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000102c  08003e98  0000602c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000050dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b16  00000000  00000000  0000510c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004166  00000000  00000000  00017c22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  0001bd88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bab  00000000  00000000  0001ca70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001939e  00000000  00000000  0001d61b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015efc  00000000  00000000  000369b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dae3  00000000  00000000  0004c8b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000da398  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001eec  00000000  00000000  000da3dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00005afd  00000000  00000000  000dc2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  000e1dc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000dc 	.word	0x200000dc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003d00 	.word	0x08003d00

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000e0 	.word	0x200000e0
 80001d4:	08003d00 	.word	0x08003d00

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b96a 	b.w	80004d4 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	460c      	mov	r4, r1
 8000220:	2b00      	cmp	r3, #0
 8000222:	d14e      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000224:	4694      	mov	ip, r2
 8000226:	458c      	cmp	ip, r1
 8000228:	4686      	mov	lr, r0
 800022a:	fab2 f282 	clz	r2, r2
 800022e:	d962      	bls.n	80002f6 <__udivmoddi4+0xde>
 8000230:	b14a      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000232:	f1c2 0320 	rsb	r3, r2, #32
 8000236:	4091      	lsls	r1, r2
 8000238:	fa20 f303 	lsr.w	r3, r0, r3
 800023c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000240:	4319      	orrs	r1, r3
 8000242:	fa00 fe02 	lsl.w	lr, r0, r2
 8000246:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024a:	fa1f f68c 	uxth.w	r6, ip
 800024e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000252:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000256:	fb07 1114 	mls	r1, r7, r4, r1
 800025a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800025e:	fb04 f106 	mul.w	r1, r4, r6
 8000262:	4299      	cmp	r1, r3
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x64>
 8000266:	eb1c 0303 	adds.w	r3, ip, r3
 800026a:	f104 30ff 	add.w	r0, r4, #4294967295
 800026e:	f080 8112 	bcs.w	8000496 <__udivmoddi4+0x27e>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 810f 	bls.w	8000496 <__udivmoddi4+0x27e>
 8000278:	3c02      	subs	r4, #2
 800027a:	4463      	add	r3, ip
 800027c:	1a59      	subs	r1, r3, r1
 800027e:	fa1f f38e 	uxth.w	r3, lr
 8000282:	fbb1 f0f7 	udiv	r0, r1, r7
 8000286:	fb07 1110 	mls	r1, r7, r0, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb00 f606 	mul.w	r6, r0, r6
 8000292:	429e      	cmp	r6, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x94>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f100 31ff 	add.w	r1, r0, #4294967295
 800029e:	f080 80fc 	bcs.w	800049a <__udivmoddi4+0x282>
 80002a2:	429e      	cmp	r6, r3
 80002a4:	f240 80f9 	bls.w	800049a <__udivmoddi4+0x282>
 80002a8:	4463      	add	r3, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	1b9b      	subs	r3, r3, r6
 80002ae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa6>
 80002b6:	40d3      	lsrs	r3, r2
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xba>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb4>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa6>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x150>
 80002da:	42a3      	cmp	r3, r4
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xcc>
 80002de:	4290      	cmp	r0, r2
 80002e0:	f0c0 80f0 	bcc.w	80004c4 <__udivmoddi4+0x2ac>
 80002e4:	1a86      	subs	r6, r0, r2
 80002e6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	2d00      	cmp	r5, #0
 80002ee:	d0e6      	beq.n	80002be <__udivmoddi4+0xa6>
 80002f0:	e9c5 6300 	strd	r6, r3, [r5]
 80002f4:	e7e3      	b.n	80002be <__udivmoddi4+0xa6>
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	f040 8090 	bne.w	800041c <__udivmoddi4+0x204>
 80002fc:	eba1 040c 	sub.w	r4, r1, ip
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	fa1f f78c 	uxth.w	r7, ip
 8000308:	2101      	movs	r1, #1
 800030a:	fbb4 f6f8 	udiv	r6, r4, r8
 800030e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000312:	fb08 4416 	mls	r4, r8, r6, r4
 8000316:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031a:	fb07 f006 	mul.w	r0, r7, r6
 800031e:	4298      	cmp	r0, r3
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x11c>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f106 34ff 	add.w	r4, r6, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x11a>
 800032c:	4298      	cmp	r0, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2b4>
 8000332:	4626      	mov	r6, r4
 8000334:	1a1c      	subs	r4, r3, r0
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb4 f0f8 	udiv	r0, r4, r8
 800033e:	fb08 4410 	mls	r4, r8, r0, r4
 8000342:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000346:	fb00 f707 	mul.w	r7, r0, r7
 800034a:	429f      	cmp	r7, r3
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x148>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 34ff 	add.w	r4, r0, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x146>
 8000358:	429f      	cmp	r7, r3
 800035a:	f200 80b0 	bhi.w	80004be <__udivmoddi4+0x2a6>
 800035e:	4620      	mov	r0, r4
 8000360:	1bdb      	subs	r3, r3, r7
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x9c>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa20 fc06 	lsr.w	ip, r0, r6
 8000378:	fa04 f301 	lsl.w	r3, r4, r1
 800037c:	ea43 030c 	orr.w	r3, r3, ip
 8000380:	40f4      	lsrs	r4, r6
 8000382:	fa00 f801 	lsl.w	r8, r0, r1
 8000386:	0c38      	lsrs	r0, r7, #16
 8000388:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800038c:	fbb4 fef0 	udiv	lr, r4, r0
 8000390:	fa1f fc87 	uxth.w	ip, r7
 8000394:	fb00 441e 	mls	r4, r0, lr, r4
 8000398:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800039c:	fb0e f90c 	mul.w	r9, lr, ip
 80003a0:	45a1      	cmp	r9, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d90a      	bls.n	80003be <__udivmoddi4+0x1a6>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ae:	f080 8084 	bcs.w	80004ba <__udivmoddi4+0x2a2>
 80003b2:	45a1      	cmp	r9, r4
 80003b4:	f240 8081 	bls.w	80004ba <__udivmoddi4+0x2a2>
 80003b8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003bc:	443c      	add	r4, r7
 80003be:	eba4 0409 	sub.w	r4, r4, r9
 80003c2:	fa1f f983 	uxth.w	r9, r3
 80003c6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ca:	fb00 4413 	mls	r4, r0, r3, r4
 80003ce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d907      	bls.n	80003ea <__udivmoddi4+0x1d2>
 80003da:	193c      	adds	r4, r7, r4
 80003dc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e0:	d267      	bcs.n	80004b2 <__udivmoddi4+0x29a>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d965      	bls.n	80004b2 <__udivmoddi4+0x29a>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ee:	fba0 9302 	umull	r9, r3, r0, r2
 80003f2:	eba4 040c 	sub.w	r4, r4, ip
 80003f6:	429c      	cmp	r4, r3
 80003f8:	46ce      	mov	lr, r9
 80003fa:	469c      	mov	ip, r3
 80003fc:	d351      	bcc.n	80004a2 <__udivmoddi4+0x28a>
 80003fe:	d04e      	beq.n	800049e <__udivmoddi4+0x286>
 8000400:	b155      	cbz	r5, 8000418 <__udivmoddi4+0x200>
 8000402:	ebb8 030e 	subs.w	r3, r8, lr
 8000406:	eb64 040c 	sbc.w	r4, r4, ip
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	40cb      	lsrs	r3, r1
 8000410:	431e      	orrs	r6, r3
 8000412:	40cc      	lsrs	r4, r1
 8000414:	e9c5 6400 	strd	r6, r4, [r5]
 8000418:	2100      	movs	r1, #0
 800041a:	e750      	b.n	80002be <__udivmoddi4+0xa6>
 800041c:	f1c2 0320 	rsb	r3, r2, #32
 8000420:	fa20 f103 	lsr.w	r1, r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa24 f303 	lsr.w	r3, r4, r3
 800042c:	4094      	lsls	r4, r2
 800042e:	430c      	orrs	r4, r1
 8000430:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000434:	fa00 fe02 	lsl.w	lr, r0, r2
 8000438:	fa1f f78c 	uxth.w	r7, ip
 800043c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000440:	fb08 3110 	mls	r1, r8, r0, r3
 8000444:	0c23      	lsrs	r3, r4, #16
 8000446:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044a:	fb00 f107 	mul.w	r1, r0, r7
 800044e:	4299      	cmp	r1, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x24c>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 36ff 	add.w	r6, r0, #4294967295
 800045a:	d22c      	bcs.n	80004b6 <__udivmoddi4+0x29e>
 800045c:	4299      	cmp	r1, r3
 800045e:	d92a      	bls.n	80004b6 <__udivmoddi4+0x29e>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1a5b      	subs	r3, r3, r1
 8000466:	b2a4      	uxth	r4, r4
 8000468:	fbb3 f1f8 	udiv	r1, r3, r8
 800046c:	fb08 3311 	mls	r3, r8, r1, r3
 8000470:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000474:	fb01 f307 	mul.w	r3, r1, r7
 8000478:	42a3      	cmp	r3, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x276>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f101 36ff 	add.w	r6, r1, #4294967295
 8000484:	d213      	bcs.n	80004ae <__udivmoddi4+0x296>
 8000486:	42a3      	cmp	r3, r4
 8000488:	d911      	bls.n	80004ae <__udivmoddi4+0x296>
 800048a:	3902      	subs	r1, #2
 800048c:	4464      	add	r4, ip
 800048e:	1ae4      	subs	r4, r4, r3
 8000490:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000494:	e739      	b.n	800030a <__udivmoddi4+0xf2>
 8000496:	4604      	mov	r4, r0
 8000498:	e6f0      	b.n	800027c <__udivmoddi4+0x64>
 800049a:	4608      	mov	r0, r1
 800049c:	e706      	b.n	80002ac <__udivmoddi4+0x94>
 800049e:	45c8      	cmp	r8, r9
 80004a0:	d2ae      	bcs.n	8000400 <__udivmoddi4+0x1e8>
 80004a2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004a6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004aa:	3801      	subs	r0, #1
 80004ac:	e7a8      	b.n	8000400 <__udivmoddi4+0x1e8>
 80004ae:	4631      	mov	r1, r6
 80004b0:	e7ed      	b.n	800048e <__udivmoddi4+0x276>
 80004b2:	4603      	mov	r3, r0
 80004b4:	e799      	b.n	80003ea <__udivmoddi4+0x1d2>
 80004b6:	4630      	mov	r0, r6
 80004b8:	e7d4      	b.n	8000464 <__udivmoddi4+0x24c>
 80004ba:	46d6      	mov	lr, sl
 80004bc:	e77f      	b.n	80003be <__udivmoddi4+0x1a6>
 80004be:	4463      	add	r3, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e74d      	b.n	8000360 <__udivmoddi4+0x148>
 80004c4:	4606      	mov	r6, r0
 80004c6:	4623      	mov	r3, r4
 80004c8:	4608      	mov	r0, r1
 80004ca:	e70f      	b.n	80002ec <__udivmoddi4+0xd4>
 80004cc:	3e02      	subs	r6, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	e730      	b.n	8000334 <__udivmoddi4+0x11c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004dc:	2214      	movs	r2, #20
 80004de:	2100      	movs	r1, #0
 80004e0:	a803      	add	r0, sp, #12
 80004e2:	f003 fbe1 	bl	8003ca8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e6:	2400      	movs	r4, #0
 80004e8:	4b21      	ldr	r3, [pc, #132]	@ (8000570 <MX_GPIO_Init+0x98>)
 80004ea:	9400      	str	r4, [sp, #0]
 80004ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80004ee:	4e21      	ldr	r6, [pc, #132]	@ (8000574 <MX_GPIO_Init+0x9c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004f0:	f042 0204 	orr.w	r2, r2, #4
 80004f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80004f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80004f8:	f002 0204 	and.w	r2, r2, #4
 80004fc:	9200      	str	r2, [sp, #0]
 80004fe:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000500:	9401      	str	r4, [sp, #4]
 8000502:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000504:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000508:	631a      	str	r2, [r3, #48]	@ 0x30
 800050a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800050c:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000510:	9201      	str	r2, [sp, #4]
 8000512:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000514:	9402      	str	r4, [sp, #8]
 8000516:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000518:	f042 0201 	orr.w	r2, r2, #1
 800051c:	631a      	str	r2, [r3, #48]	@ 0x30
 800051e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000520:	f003 0301 	and.w	r3, r3, #1
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000524:	4622      	mov	r2, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000526:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000528:	4630      	mov	r0, r6
 800052a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052e:	2501      	movs	r5, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000530:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000532:	f000 fca7 	bl	8000e84 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000536:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800053a:	a903      	add	r1, sp, #12
 800053c:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053e:	e9cd 3503 	strd	r3, r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000542:	e9cd 4405 	strd	r4, r4, [sp, #20]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000546:	f000 fbd7 	bl	8000cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JUMP_BTN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800054a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(JUMP_BTN_GPIO_Port, &GPIO_InitStruct);
 800054e:	a903      	add	r1, sp, #12
 8000550:	4809      	ldr	r0, [pc, #36]	@ (8000578 <MX_GPIO_Init+0xa0>)
  GPIO_InitStruct.Pin = JUMP_BTN_Pin;
 8000552:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000554:	e9cd 3504 	strd	r3, r5, [sp, #16]
  HAL_GPIO_Init(JUMP_BTN_GPIO_Port, &GPIO_InitStruct);
 8000558:	f000 fbce 	bl	8000cf8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800055c:	4622      	mov	r2, r4
 800055e:	4621      	mov	r1, r4
 8000560:	2006      	movs	r0, #6
 8000562:	f000 f9bf 	bl	80008e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000566:	2006      	movs	r0, #6
 8000568:	f000 f9ee 	bl	8000948 <HAL_NVIC_EnableIRQ>

}
 800056c:	b008      	add	sp, #32
 800056e:	bd70      	pop	{r4, r5, r6, pc}
 8000570:	40023800 	.word	0x40023800
 8000574:	40020800 	.word	0x40020800
 8000578:	40020000 	.word	0x40020000

0800057c <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if (GPIO_Pin == JUMP_BTN_Pin)
 800057c:	2801      	cmp	r0, #1
  {
    jumpFlag = true;
 800057e:	bf04      	itt	eq
 8000580:	4b01      	ldreq	r3, [pc, #4]	@ (8000588 <HAL_GPIO_EXTI_Callback+0xc>)
 8000582:	7018      	strbeq	r0, [r3, #0]
  }
}
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	200000f8 	.word	0x200000f8

0800058c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800058c:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800058e:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000590:	4c04      	ldr	r4, [pc, #16]	@ (80005a4 <Error_Handler+0x18>)
 8000592:	4620      	mov	r0, r4
 8000594:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000598:	f000 fc79 	bl	8000e8e <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 800059c:	2064      	movs	r0, #100	@ 0x64
 800059e:	f000 f97b 	bl	8000898 <HAL_Delay>
  while (1)
 80005a2:	e7f6      	b.n	8000592 <Error_Handler+0x6>
 80005a4:	40020800 	.word	0x40020800

080005a8 <SystemClock_Config>:
{
 80005a8:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	2400      	movs	r4, #0
{
 80005ac:	b094      	sub	sp, #80	@ 0x50
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ae:	4621      	mov	r1, r4
 80005b0:	2214      	movs	r2, #20
 80005b2:	a803      	add	r0, sp, #12
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b4:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
 80005b8:	940c      	str	r4, [sp, #48]	@ 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ba:	f003 fb75 	bl	8003ca8 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 80005be:	4b1f      	ldr	r3, [pc, #124]	@ (800063c <SystemClock_Config+0x94>)
 80005c0:	9401      	str	r4, [sp, #4]
 80005c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80005c4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80005c8:	641a      	str	r2, [r3, #64]	@ 0x40
 80005ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005d0:	9301      	str	r3, [sp, #4]
 80005d2:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000640 <SystemClock_Config+0x98>)
 80005d6:	9402      	str	r4, [sp, #8]
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005e6:	9302      	str	r3, [sp, #8]
 80005e8:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ea:	2209      	movs	r2, #9
 80005ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLM = 15;
 80005f4:	260f      	movs	r6, #15
 80005f6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005fa:	e9cd 360f 	strd	r3, r6, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005fe:	2190      	movs	r1, #144	@ 0x90
 8000600:	2304      	movs	r3, #4
 8000602:	e9cd 1311 	strd	r1, r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000606:	2401      	movs	r4, #1
 8000608:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800060a:	2305      	movs	r3, #5
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060c:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060e:	e9cd 450d 	strd	r4, r5, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000612:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000614:	f001 f970 	bl	80018f8 <HAL_RCC_OscConfig>
 8000618:	b108      	cbz	r0, 800061e <SystemClock_Config+0x76>
    Error_Handler();
 800061a:	f7ff ffb7 	bl	800058c <Error_Handler>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800061e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000622:	e9cd 3006 	strd	r3, r0, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000626:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000628:	4621      	mov	r1, r4
 800062a:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062c:	e9cd 6503 	strd	r6, r5, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000630:	f001 fb3e 	bl	8001cb0 <HAL_RCC_ClockConfig>
 8000634:	2800      	cmp	r0, #0
 8000636:	d1f0      	bne.n	800061a <SystemClock_Config+0x72>
}
 8000638:	b014      	add	sp, #80	@ 0x50
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	40023800 	.word	0x40023800
 8000640:	40007000 	.word	0x40007000

08000644 <main>:
{
 8000644:	b508      	push	{r3, lr}
  HAL_Init();
 8000646:	f000 f8fb 	bl	8000840 <HAL_Init>
  SystemClock_Config();
 800064a:	f7ff ffad 	bl	80005a8 <SystemClock_Config>
  MX_GPIO_Init();
 800064e:	f7ff ff43 	bl	80004d8 <MX_GPIO_Init>
  MX_RTC_Init();
 8000652:	f000 f831 	bl	80006b8 <MX_RTC_Init>
  MX_USB_DEVICE_Init();
 8000656:	f003 f8d5 	bl	8003804 <MX_USB_DEVICE_Init>
    if (jumpFlag)
 800065a:	4e12      	ldr	r6, [pc, #72]	@ (80006a4 <main+0x60>)
      HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800065c:	4d12      	ldr	r5, [pc, #72]	@ (80006a8 <main+0x64>)
      if(((*(__IO uint32_t*)USBD_DFU_APP_DEFAULT_ADD) & 0x2200000C) == 0x20000000)
 800065e:	4c13      	ldr	r4, [pc, #76]	@ (80006ac <main+0x68>)
    if (jumpFlag)
 8000660:	7833      	ldrb	r3, [r6, #0]
 8000662:	b1ab      	cbz	r3, 8000690 <main+0x4c>
      if(((*(__IO uint32_t*)USBD_DFU_APP_DEFAULT_ADD) & 0x2200000C) == 0x20000000)
 8000664:	6823      	ldr	r3, [r4, #0]
 8000666:	f023 435d 	bic.w	r3, r3, #3707764736	@ 0xdd000000
 800066a:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 800066e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000672:	f023 03f3 	bic.w	r3, r3, #243	@ 0xf3
 8000676:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800067a:	d1f1      	bne.n	8000660 <main+0x1c>
        JumpAddress = *(__IO uint32_t*) (USBD_DFU_APP_DEFAULT_ADD + 4);
 800067c:	4a0c      	ldr	r2, [pc, #48]	@ (80006b0 <main+0x6c>)
 800067e:	6863      	ldr	r3, [r4, #4]
 8000680:	6013      	str	r3, [r2, #0]
        JumpToApplication = (pFunction) JumpAddress;
 8000682:	4a0c      	ldr	r2, [pc, #48]	@ (80006b4 <main+0x70>)
 8000684:	6013      	str	r3, [r2, #0]
        __set_MSP((*(__IO uint32_t*) USBD_DFU_APP_DEFAULT_ADD ));
 8000686:	6822      	ldr	r2, [r4, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000688:	f382 8808 	msr	MSP, r2
        JumpToApplication();
 800068c:	4798      	blx	r3
 800068e:	e7e7      	b.n	8000660 <main+0x1c>
      HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000690:	4628      	mov	r0, r5
 8000692:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000696:	f000 fbfa 	bl	8000e8e <HAL_GPIO_TogglePin>
      HAL_Delay(100);
 800069a:	2064      	movs	r0, #100	@ 0x64
 800069c:	f000 f8fc 	bl	8000898 <HAL_Delay>
 80006a0:	e7de      	b.n	8000660 <main+0x1c>
 80006a2:	bf00      	nop
 80006a4:	200000f8 	.word	0x200000f8
 80006a8:	40020800 	.word	0x40020800
 80006ac:	08005000 	.word	0x08005000
 80006b0:	200000fc 	.word	0x200000fc
 80006b4:	20000100 	.word	0x20000100

080006b8 <MX_RTC_Init>:

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006b8:	480a      	ldr	r0, [pc, #40]	@ (80006e4 <MX_RTC_Init+0x2c>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006ba:	4a0b      	ldr	r2, [pc, #44]	@ (80006e8 <MX_RTC_Init+0x30>)
{
 80006bc:	b508      	push	{r3, lr}
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006be:	2300      	movs	r3, #0
 80006c0:	e9c0 2300 	strd	r2, r3, [r0]
  hrtc.Init.AsynchPrediv = 127;
  hrtc.Init.SynchPrediv = 255;
 80006c4:	217f      	movs	r1, #127	@ 0x7f
 80006c6:	22ff      	movs	r2, #255	@ 0xff
 80006c8:	e9c0 1202 	strd	r1, r2, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006cc:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006d0:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006d2:	f001 fc7c 	bl	8001fce <HAL_RTC_Init>
 80006d6:	b118      	cbz	r0, 80006e0 <MX_RTC_Init+0x28>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80006d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80006dc:	f7ff bf56 	b.w	800058c <Error_Handler>
}
 80006e0:	bd08      	pop	{r3, pc}
 80006e2:	bf00      	nop
 80006e4:	20000104 	.word	0x20000104
 80006e8:	40002800 	.word	0x40002800

080006ec <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80006ec:	b510      	push	{r4, lr}
 80006ee:	4604      	mov	r4, r0
 80006f0:	b086      	sub	sp, #24

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006f2:	2218      	movs	r2, #24
 80006f4:	2100      	movs	r1, #0
 80006f6:	4668      	mov	r0, sp
 80006f8:	f003 fad6 	bl	8003ca8 <memset>
  if(rtcHandle->Instance==RTC)
 80006fc:	6822      	ldr	r2, [r4, #0]
 80006fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000728 <HAL_RTC_MspInit+0x3c>)
 8000700:	429a      	cmp	r2, r3
 8000702:	d10e      	bne.n	8000722 <HAL_RTC_MspInit+0x36>
//  __HAL_RCC_BACKUPRESET_FORCE();
  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000704:	2302      	movs	r3, #2
 8000706:	9300      	str	r3, [sp, #0]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000708:	4668      	mov	r0, sp
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800070a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800070e:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000710:	f001 fb6e 	bl	8001df0 <HAL_RCCEx_PeriphCLKConfig>
 8000714:	b108      	cbz	r0, 800071a <HAL_RTC_MspInit+0x2e>
    {
      Error_Handler();
 8000716:	f7ff ff39 	bl	800058c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800071a:	4b04      	ldr	r3, [pc, #16]	@ (800072c <HAL_RTC_MspInit+0x40>)
 800071c:	2201      	movs	r2, #1
 800071e:	f8c3 2e3c 	str.w	r2, [r3, #3644]	@ 0xe3c
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000722:	b006      	add	sp, #24
 8000724:	bd10      	pop	{r4, pc}
 8000726:	bf00      	nop
 8000728:	40002800 	.word	0x40002800
 800072c:	42470000 	.word	0x42470000

08000730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000730:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000732:	4b0c      	ldr	r3, [pc, #48]	@ (8000764 <HAL_MspInit+0x34>)
 8000734:	2100      	movs	r1, #0
 8000736:	9100      	str	r1, [sp, #0]
 8000738:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800073a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800073e:	645a      	str	r2, [r3, #68]	@ 0x44
 8000740:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000742:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000746:	9200      	str	r2, [sp, #0]
 8000748:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074a:	9101      	str	r1, [sp, #4]
 800074c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800074e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000752:	641a      	str	r2, [r3, #64]	@ 0x40
 8000754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000756:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800075a:	9301      	str	r3, [sp, #4]
 800075c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075e:	b002      	add	sp, #8
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800

08000768 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000768:	e7fe      	b.n	8000768 <NMI_Handler>

0800076a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800076a:	e7fe      	b.n	800076a <HardFault_Handler>

0800076c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800076c:	e7fe      	b.n	800076c <MemManage_Handler>

0800076e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800076e:	e7fe      	b.n	800076e <BusFault_Handler>

08000770 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000770:	e7fe      	b.n	8000770 <UsageFault_Handler>

08000772 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000772:	4770      	bx	lr

08000774 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8000774:	4770      	bx	lr

08000776 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000776:	4770      	bx	lr

08000778 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000778:	f000 b87c 	b.w	8000874 <HAL_IncTick>

0800077c <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JUMP_BTN_Pin);
 800077c:	2001      	movs	r0, #1
 800077e:	f000 bb8f 	b.w	8000ea0 <HAL_GPIO_EXTI_IRQHandler>
	...

08000784 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000784:	4801      	ldr	r0, [pc, #4]	@ (800078c <OTG_FS_IRQHandler+0x8>)
 8000786:	f000 bd49 	b.w	800121c <HAL_PCD_IRQHandler>
 800078a:	bf00      	nop
 800078c:	20000b48 	.word	0x20000b48

08000790 <SystemInit>:
 8000790:	4a03      	ldr	r2, [pc, #12]	@ (80007a0 <SystemInit+0x10>)
 8000792:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000796:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800079a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800079e:	4770      	bx	lr
 80007a0:	e000ed00 	.word	0xe000ed00

080007a4 <Reset_Handler>:
 80007a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007dc <LoopFillZerobss+0xe>
 80007a8:	f7ff fff2 	bl	8000790 <SystemInit>
 80007ac:	480c      	ldr	r0, [pc, #48]	@ (80007e0 <LoopFillZerobss+0x12>)
 80007ae:	490d      	ldr	r1, [pc, #52]	@ (80007e4 <LoopFillZerobss+0x16>)
 80007b0:	4a0d      	ldr	r2, [pc, #52]	@ (80007e8 <LoopFillZerobss+0x1a>)
 80007b2:	2300      	movs	r3, #0
 80007b4:	e002      	b.n	80007bc <LoopCopyDataInit>

080007b6 <CopyDataInit>:
 80007b6:	58d4      	ldr	r4, [r2, r3]
 80007b8:	50c4      	str	r4, [r0, r3]
 80007ba:	3304      	adds	r3, #4

080007bc <LoopCopyDataInit>:
 80007bc:	18c4      	adds	r4, r0, r3
 80007be:	428c      	cmp	r4, r1
 80007c0:	d3f9      	bcc.n	80007b6 <CopyDataInit>
 80007c2:	4a0a      	ldr	r2, [pc, #40]	@ (80007ec <LoopFillZerobss+0x1e>)
 80007c4:	4c0a      	ldr	r4, [pc, #40]	@ (80007f0 <LoopFillZerobss+0x22>)
 80007c6:	2300      	movs	r3, #0
 80007c8:	e001      	b.n	80007ce <LoopFillZerobss>

080007ca <FillZerobss>:
 80007ca:	6013      	str	r3, [r2, #0]
 80007cc:	3204      	adds	r2, #4

080007ce <LoopFillZerobss>:
 80007ce:	42a2      	cmp	r2, r4
 80007d0:	d3fb      	bcc.n	80007ca <FillZerobss>
 80007d2:	f003 fa71 	bl	8003cb8 <__libc_init_array>
 80007d6:	f7ff ff35 	bl	8000644 <main>
 80007da:	4770      	bx	lr
 80007dc:	20020000 	.word	0x20020000
 80007e0:	20000000 	.word	0x20000000
 80007e4:	200000dc 	.word	0x200000dc
 80007e8:	08003dbc 	.word	0x08003dbc
 80007ec:	200000dc 	.word	0x200000dc
 80007f0:	2000102c 	.word	0x2000102c

080007f4 <ADC_IRQHandler>:
 80007f4:	e7fe      	b.n	80007f4 <ADC_IRQHandler>
	...

080007f8 <HAL_InitTick>:
 80007f8:	b538      	push	{r3, r4, r5, lr}
 80007fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000834 <HAL_InitTick+0x3c>)
 80007fc:	781a      	ldrb	r2, [r3, #0]
 80007fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000802:	fbb3 f3f2 	udiv	r3, r3, r2
 8000806:	4a0c      	ldr	r2, [pc, #48]	@ (8000838 <HAL_InitTick+0x40>)
 8000808:	4605      	mov	r5, r0
 800080a:	6810      	ldr	r0, [r2, #0]
 800080c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000810:	f000 f8a8 	bl	8000964 <HAL_SYSTICK_Config>
 8000814:	4604      	mov	r4, r0
 8000816:	b958      	cbnz	r0, 8000830 <HAL_InitTick+0x38>
 8000818:	2d0f      	cmp	r5, #15
 800081a:	d809      	bhi.n	8000830 <HAL_InitTick+0x38>
 800081c:	4602      	mov	r2, r0
 800081e:	4629      	mov	r1, r5
 8000820:	f04f 30ff 	mov.w	r0, #4294967295
 8000824:	f000 f85e 	bl	80008e4 <HAL_NVIC_SetPriority>
 8000828:	4b04      	ldr	r3, [pc, #16]	@ (800083c <HAL_InitTick+0x44>)
 800082a:	4620      	mov	r0, r4
 800082c:	601d      	str	r5, [r3, #0]
 800082e:	bd38      	pop	{r3, r4, r5, pc}
 8000830:	2001      	movs	r0, #1
 8000832:	e7fc      	b.n	800082e <HAL_InitTick+0x36>
 8000834:	20000004 	.word	0x20000004
 8000838:	20000000 	.word	0x20000000
 800083c:	20000008 	.word	0x20000008

08000840 <HAL_Init>:
 8000840:	b508      	push	{r3, lr}
 8000842:	4b0b      	ldr	r3, [pc, #44]	@ (8000870 <HAL_Init+0x30>)
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	2003      	movs	r0, #3
 800085e:	f000 f82f 	bl	80008c0 <HAL_NVIC_SetPriorityGrouping>
 8000862:	200f      	movs	r0, #15
 8000864:	f7ff ffc8 	bl	80007f8 <HAL_InitTick>
 8000868:	f7ff ff62 	bl	8000730 <HAL_MspInit>
 800086c:	2000      	movs	r0, #0
 800086e:	bd08      	pop	{r3, pc}
 8000870:	40023c00 	.word	0x40023c00

08000874 <HAL_IncTick>:
 8000874:	4a03      	ldr	r2, [pc, #12]	@ (8000884 <HAL_IncTick+0x10>)
 8000876:	4b04      	ldr	r3, [pc, #16]	@ (8000888 <HAL_IncTick+0x14>)
 8000878:	6811      	ldr	r1, [r2, #0]
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	440b      	add	r3, r1
 800087e:	6013      	str	r3, [r2, #0]
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	20000124 	.word	0x20000124
 8000888:	20000004 	.word	0x20000004

0800088c <HAL_GetTick>:
 800088c:	4b01      	ldr	r3, [pc, #4]	@ (8000894 <HAL_GetTick+0x8>)
 800088e:	6818      	ldr	r0, [r3, #0]
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	20000124 	.word	0x20000124

08000898 <HAL_Delay>:
 8000898:	b538      	push	{r3, r4, r5, lr}
 800089a:	4604      	mov	r4, r0
 800089c:	f7ff fff6 	bl	800088c <HAL_GetTick>
 80008a0:	1c63      	adds	r3, r4, #1
 80008a2:	bf1c      	itt	ne
 80008a4:	4b05      	ldrne	r3, [pc, #20]	@ (80008bc <HAL_Delay+0x24>)
 80008a6:	781b      	ldrbne	r3, [r3, #0]
 80008a8:	4605      	mov	r5, r0
 80008aa:	bf18      	it	ne
 80008ac:	18e4      	addne	r4, r4, r3
 80008ae:	f7ff ffed 	bl	800088c <HAL_GetTick>
 80008b2:	1b43      	subs	r3, r0, r5
 80008b4:	42a3      	cmp	r3, r4
 80008b6:	d3fa      	bcc.n	80008ae <HAL_Delay+0x16>
 80008b8:	bd38      	pop	{r3, r4, r5, pc}
 80008ba:	bf00      	nop
 80008bc:	20000004 	.word	0x20000004

080008c0 <HAL_NVIC_SetPriorityGrouping>:
 80008c0:	4907      	ldr	r1, [pc, #28]	@ (80008e0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80008c2:	68ca      	ldr	r2, [r1, #12]
 80008c4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80008c8:	0203      	lsls	r3, r0, #8
 80008ca:	0412      	lsls	r2, r2, #16
 80008cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80008d0:	0c12      	lsrs	r2, r2, #16
 80008d2:	4313      	orrs	r3, r2
 80008d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008dc:	60cb      	str	r3, [r1, #12]
 80008de:	4770      	bx	lr
 80008e0:	e000ed00 	.word	0xe000ed00

080008e4 <HAL_NVIC_SetPriority>:
 80008e4:	4b16      	ldr	r3, [pc, #88]	@ (8000940 <HAL_NVIC_SetPriority+0x5c>)
 80008e6:	b530      	push	{r4, r5, lr}
 80008e8:	68dc      	ldr	r4, [r3, #12]
 80008ea:	f3c4 2402 	ubfx	r4, r4, #8, #3
 80008ee:	f1c4 0307 	rsb	r3, r4, #7
 80008f2:	1d25      	adds	r5, r4, #4
 80008f4:	2b04      	cmp	r3, #4
 80008f6:	bf28      	it	cs
 80008f8:	2304      	movcs	r3, #4
 80008fa:	2d06      	cmp	r5, #6
 80008fc:	f04f 35ff 	mov.w	r5, #4294967295
 8000900:	bf8c      	ite	hi
 8000902:	3c03      	subhi	r4, #3
 8000904:	2400      	movls	r4, #0
 8000906:	fa05 f303 	lsl.w	r3, r5, r3
 800090a:	ea21 0303 	bic.w	r3, r1, r3
 800090e:	40a5      	lsls	r5, r4
 8000910:	ea22 0205 	bic.w	r2, r2, r5
 8000914:	40a3      	lsls	r3, r4
 8000916:	2800      	cmp	r0, #0
 8000918:	ea43 0302 	orr.w	r3, r3, r2
 800091c:	bfac      	ite	ge
 800091e:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
 8000922:	4a08      	ldrlt	r2, [pc, #32]	@ (8000944 <HAL_NVIC_SetPriority+0x60>)
 8000924:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000928:	bfb8      	it	lt
 800092a:	f000 000f 	andlt.w	r0, r0, #15
 800092e:	b2db      	uxtb	r3, r3
 8000930:	bfaa      	itet	ge
 8000932:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
 8000936:	5413      	strblt	r3, [r2, r0]
 8000938:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
 800093c:	bd30      	pop	{r4, r5, pc}
 800093e:	bf00      	nop
 8000940:	e000ed00 	.word	0xe000ed00
 8000944:	e000ed14 	.word	0xe000ed14

08000948 <HAL_NVIC_EnableIRQ>:
 8000948:	2800      	cmp	r0, #0
 800094a:	db07      	blt.n	800095c <HAL_NVIC_EnableIRQ+0x14>
 800094c:	4a04      	ldr	r2, [pc, #16]	@ (8000960 <HAL_NVIC_EnableIRQ+0x18>)
 800094e:	0941      	lsrs	r1, r0, #5
 8000950:	2301      	movs	r3, #1
 8000952:	f000 001f 	and.w	r0, r0, #31
 8000956:	4083      	lsls	r3, r0
 8000958:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	e000e100 	.word	0xe000e100

08000964 <HAL_SYSTICK_Config>:
 8000964:	3801      	subs	r0, #1
 8000966:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800096a:	d20b      	bcs.n	8000984 <HAL_SYSTICK_Config+0x20>
 800096c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000970:	4a05      	ldr	r2, [pc, #20]	@ (8000988 <HAL_SYSTICK_Config+0x24>)
 8000972:	6158      	str	r0, [r3, #20]
 8000974:	21f0      	movs	r1, #240	@ 0xf0
 8000976:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
 800097a:	2000      	movs	r0, #0
 800097c:	2207      	movs	r2, #7
 800097e:	6198      	str	r0, [r3, #24]
 8000980:	611a      	str	r2, [r3, #16]
 8000982:	4770      	bx	lr
 8000984:	2001      	movs	r0, #1
 8000986:	4770      	bx	lr
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <FLASH_Program_DoubleWord>:
 800098c:	4909      	ldr	r1, [pc, #36]	@ (80009b4 <FLASH_Program_DoubleWord+0x28>)
 800098e:	b510      	push	{r4, lr}
 8000990:	690c      	ldr	r4, [r1, #16]
 8000992:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
 8000996:	610c      	str	r4, [r1, #16]
 8000998:	690c      	ldr	r4, [r1, #16]
 800099a:	f444 7440 	orr.w	r4, r4, #768	@ 0x300
 800099e:	610c      	str	r4, [r1, #16]
 80009a0:	690c      	ldr	r4, [r1, #16]
 80009a2:	f044 0401 	orr.w	r4, r4, #1
 80009a6:	610c      	str	r4, [r1, #16]
 80009a8:	6002      	str	r2, [r0, #0]
 80009aa:	f3bf 8f6f 	isb	sy
 80009ae:	6043      	str	r3, [r0, #4]
 80009b0:	bd10      	pop	{r4, pc}
 80009b2:	bf00      	nop
 80009b4:	40023c00 	.word	0x40023c00

080009b8 <FLASH_Program_Word>:
 80009b8:	4b07      	ldr	r3, [pc, #28]	@ (80009d8 <FLASH_Program_Word+0x20>)
 80009ba:	691a      	ldr	r2, [r3, #16]
 80009bc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80009c0:	611a      	str	r2, [r3, #16]
 80009c2:	691a      	ldr	r2, [r3, #16]
 80009c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80009c8:	611a      	str	r2, [r3, #16]
 80009ca:	691a      	ldr	r2, [r3, #16]
 80009cc:	f042 0201 	orr.w	r2, r2, #1
 80009d0:	611a      	str	r2, [r3, #16]
 80009d2:	6001      	str	r1, [r0, #0]
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	40023c00 	.word	0x40023c00

080009dc <FLASH_Program_HalfWord>:
 80009dc:	4b07      	ldr	r3, [pc, #28]	@ (80009fc <FLASH_Program_HalfWord+0x20>)
 80009de:	691a      	ldr	r2, [r3, #16]
 80009e0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80009e4:	611a      	str	r2, [r3, #16]
 80009e6:	691a      	ldr	r2, [r3, #16]
 80009e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80009ec:	611a      	str	r2, [r3, #16]
 80009ee:	691a      	ldr	r2, [r3, #16]
 80009f0:	f042 0201 	orr.w	r2, r2, #1
 80009f4:	611a      	str	r2, [r3, #16]
 80009f6:	8001      	strh	r1, [r0, #0]
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	40023c00 	.word	0x40023c00

08000a00 <FLASH_SetErrorCode>:
 8000a00:	4b20      	ldr	r3, [pc, #128]	@ (8000a84 <FLASH_SetErrorCode+0x84>)
 8000a02:	68da      	ldr	r2, [r3, #12]
 8000a04:	06d0      	lsls	r0, r2, #27
 8000a06:	d506      	bpl.n	8000a16 <FLASH_SetErrorCode+0x16>
 8000a08:	491f      	ldr	r1, [pc, #124]	@ (8000a88 <FLASH_SetErrorCode+0x88>)
 8000a0a:	69ca      	ldr	r2, [r1, #28]
 8000a0c:	f042 0210 	orr.w	r2, r2, #16
 8000a10:	61ca      	str	r2, [r1, #28]
 8000a12:	2210      	movs	r2, #16
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	68da      	ldr	r2, [r3, #12]
 8000a18:	0691      	lsls	r1, r2, #26
 8000a1a:	d506      	bpl.n	8000a2a <FLASH_SetErrorCode+0x2a>
 8000a1c:	491a      	ldr	r1, [pc, #104]	@ (8000a88 <FLASH_SetErrorCode+0x88>)
 8000a1e:	69ca      	ldr	r2, [r1, #28]
 8000a20:	f042 0208 	orr.w	r2, r2, #8
 8000a24:	61ca      	str	r2, [r1, #28]
 8000a26:	2220      	movs	r2, #32
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	4b16      	ldr	r3, [pc, #88]	@ (8000a84 <FLASH_SetErrorCode+0x84>)
 8000a2c:	68da      	ldr	r2, [r3, #12]
 8000a2e:	0652      	lsls	r2, r2, #25
 8000a30:	d506      	bpl.n	8000a40 <FLASH_SetErrorCode+0x40>
 8000a32:	4915      	ldr	r1, [pc, #84]	@ (8000a88 <FLASH_SetErrorCode+0x88>)
 8000a34:	69ca      	ldr	r2, [r1, #28]
 8000a36:	f042 0204 	orr.w	r2, r2, #4
 8000a3a:	61ca      	str	r2, [r1, #28]
 8000a3c:	2240      	movs	r2, #64	@ 0x40
 8000a3e:	60da      	str	r2, [r3, #12]
 8000a40:	68da      	ldr	r2, [r3, #12]
 8000a42:	0610      	lsls	r0, r2, #24
 8000a44:	d506      	bpl.n	8000a54 <FLASH_SetErrorCode+0x54>
 8000a46:	4910      	ldr	r1, [pc, #64]	@ (8000a88 <FLASH_SetErrorCode+0x88>)
 8000a48:	69ca      	ldr	r2, [r1, #28]
 8000a4a:	f042 0202 	orr.w	r2, r2, #2
 8000a4e:	61ca      	str	r2, [r1, #28]
 8000a50:	2280      	movs	r2, #128	@ 0x80
 8000a52:	60da      	str	r2, [r3, #12]
 8000a54:	4b0b      	ldr	r3, [pc, #44]	@ (8000a84 <FLASH_SetErrorCode+0x84>)
 8000a56:	68da      	ldr	r2, [r3, #12]
 8000a58:	05d1      	lsls	r1, r2, #23
 8000a5a:	d507      	bpl.n	8000a6c <FLASH_SetErrorCode+0x6c>
 8000a5c:	490a      	ldr	r1, [pc, #40]	@ (8000a88 <FLASH_SetErrorCode+0x88>)
 8000a5e:	69ca      	ldr	r2, [r1, #28]
 8000a60:	f042 0201 	orr.w	r2, r2, #1
 8000a64:	61ca      	str	r2, [r1, #28]
 8000a66:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a6a:	60da      	str	r2, [r3, #12]
 8000a6c:	68da      	ldr	r2, [r3, #12]
 8000a6e:	0792      	lsls	r2, r2, #30
 8000a70:	d506      	bpl.n	8000a80 <FLASH_SetErrorCode+0x80>
 8000a72:	4905      	ldr	r1, [pc, #20]	@ (8000a88 <FLASH_SetErrorCode+0x88>)
 8000a74:	69ca      	ldr	r2, [r1, #28]
 8000a76:	f042 0220 	orr.w	r2, r2, #32
 8000a7a:	61ca      	str	r2, [r1, #28]
 8000a7c:	2202      	movs	r2, #2
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	40023c00 	.word	0x40023c00
 8000a88:	20000128 	.word	0x20000128

08000a8c <HAL_FLASH_Unlock>:
 8000a8c:	4b06      	ldr	r3, [pc, #24]	@ (8000aa8 <HAL_FLASH_Unlock+0x1c>)
 8000a8e:	691a      	ldr	r2, [r3, #16]
 8000a90:	2a00      	cmp	r2, #0
 8000a92:	bfbf      	itttt	lt
 8000a94:	4a05      	ldrlt	r2, [pc, #20]	@ (8000aac <HAL_FLASH_Unlock+0x20>)
 8000a96:	605a      	strlt	r2, [r3, #4]
 8000a98:	f102 3288 	addlt.w	r2, r2, #2290649224	@ 0x88888888
 8000a9c:	605a      	strlt	r2, [r3, #4]
 8000a9e:	bfba      	itte	lt
 8000aa0:	6918      	ldrlt	r0, [r3, #16]
 8000aa2:	0fc0      	lsrlt	r0, r0, #31
 8000aa4:	2000      	movge	r0, #0
 8000aa6:	4770      	bx	lr
 8000aa8:	40023c00 	.word	0x40023c00
 8000aac:	45670123 	.word	0x45670123

08000ab0 <HAL_FLASH_Lock>:
 8000ab0:	4a03      	ldr	r2, [pc, #12]	@ (8000ac0 <HAL_FLASH_Lock+0x10>)
 8000ab2:	6913      	ldr	r3, [r2, #16]
 8000ab4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ab8:	6113      	str	r3, [r2, #16]
 8000aba:	2000      	movs	r0, #0
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	40023c00 	.word	0x40023c00

08000ac4 <FLASH_WaitForLastOperation>:
 8000ac4:	4b11      	ldr	r3, [pc, #68]	@ (8000b0c <FLASH_WaitForLastOperation+0x48>)
 8000ac6:	b570      	push	{r4, r5, r6, lr}
 8000ac8:	2200      	movs	r2, #0
 8000aca:	4604      	mov	r4, r0
 8000acc:	61da      	str	r2, [r3, #28]
 8000ace:	f7ff fedd 	bl	800088c <HAL_GetTick>
 8000ad2:	4d0f      	ldr	r5, [pc, #60]	@ (8000b10 <FLASH_WaitForLastOperation+0x4c>)
 8000ad4:	4606      	mov	r6, r0
 8000ad6:	68eb      	ldr	r3, [r5, #12]
 8000ad8:	03da      	lsls	r2, r3, #15
 8000ada:	d40c      	bmi.n	8000af6 <FLASH_WaitForLastOperation+0x32>
 8000adc:	68eb      	ldr	r3, [r5, #12]
 8000ade:	07db      	lsls	r3, r3, #31
 8000ae0:	bf44      	itt	mi
 8000ae2:	2301      	movmi	r3, #1
 8000ae4:	60eb      	strmi	r3, [r5, #12]
 8000ae6:	68e8      	ldr	r0, [r5, #12]
 8000ae8:	f410 70f9 	ands.w	r0, r0, #498	@ 0x1f2
 8000aec:	d007      	beq.n	8000afe <FLASH_WaitForLastOperation+0x3a>
 8000aee:	f7ff ff87 	bl	8000a00 <FLASH_SetErrorCode>
 8000af2:	2001      	movs	r0, #1
 8000af4:	e003      	b.n	8000afe <FLASH_WaitForLastOperation+0x3a>
 8000af6:	1c61      	adds	r1, r4, #1
 8000af8:	d0ed      	beq.n	8000ad6 <FLASH_WaitForLastOperation+0x12>
 8000afa:	b90c      	cbnz	r4, 8000b00 <FLASH_WaitForLastOperation+0x3c>
 8000afc:	2003      	movs	r0, #3
 8000afe:	bd70      	pop	{r4, r5, r6, pc}
 8000b00:	f7ff fec4 	bl	800088c <HAL_GetTick>
 8000b04:	1b80      	subs	r0, r0, r6
 8000b06:	42a0      	cmp	r0, r4
 8000b08:	d9e5      	bls.n	8000ad6 <FLASH_WaitForLastOperation+0x12>
 8000b0a:	e7f7      	b.n	8000afc <FLASH_WaitForLastOperation+0x38>
 8000b0c:	20000128 	.word	0x20000128
 8000b10:	40023c00 	.word	0x40023c00

08000b14 <HAL_FLASH_Program>:
 8000b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b18:	4e1f      	ldr	r6, [pc, #124]	@ (8000b98 <HAL_FLASH_Program+0x84>)
 8000b1a:	4698      	mov	r8, r3
 8000b1c:	7e33      	ldrb	r3, [r6, #24]
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	4607      	mov	r7, r0
 8000b22:	460d      	mov	r5, r1
 8000b24:	4614      	mov	r4, r2
 8000b26:	d035      	beq.n	8000b94 <HAL_FLASH_Program+0x80>
 8000b28:	2301      	movs	r3, #1
 8000b2a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000b2e:	7633      	strb	r3, [r6, #24]
 8000b30:	f7ff ffc8 	bl	8000ac4 <FLASH_WaitForLastOperation>
 8000b34:	b9b0      	cbnz	r0, 8000b64 <HAL_FLASH_Program+0x50>
 8000b36:	b9cf      	cbnz	r7, 8000b6c <HAL_FLASH_Program+0x58>
 8000b38:	4b18      	ldr	r3, [pc, #96]	@ (8000b9c <HAL_FLASH_Program+0x88>)
 8000b3a:	691a      	ldr	r2, [r3, #16]
 8000b3c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8000b40:	611a      	str	r2, [r3, #16]
 8000b42:	691a      	ldr	r2, [r3, #16]
 8000b44:	611a      	str	r2, [r3, #16]
 8000b46:	691a      	ldr	r2, [r3, #16]
 8000b48:	b2e4      	uxtb	r4, r4
 8000b4a:	f042 0201 	orr.w	r2, r2, #1
 8000b4e:	611a      	str	r2, [r3, #16]
 8000b50:	702c      	strb	r4, [r5, #0]
 8000b52:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000b56:	f7ff ffb5 	bl	8000ac4 <FLASH_WaitForLastOperation>
 8000b5a:	4a10      	ldr	r2, [pc, #64]	@ (8000b9c <HAL_FLASH_Program+0x88>)
 8000b5c:	6913      	ldr	r3, [r2, #16]
 8000b5e:	f023 0301 	bic.w	r3, r3, #1
 8000b62:	6113      	str	r3, [r2, #16]
 8000b64:	2300      	movs	r3, #0
 8000b66:	7633      	strb	r3, [r6, #24]
 8000b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000b6c:	2f01      	cmp	r7, #1
 8000b6e:	d104      	bne.n	8000b7a <HAL_FLASH_Program+0x66>
 8000b70:	b2a1      	uxth	r1, r4
 8000b72:	4628      	mov	r0, r5
 8000b74:	f7ff ff32 	bl	80009dc <FLASH_Program_HalfWord>
 8000b78:	e7eb      	b.n	8000b52 <HAL_FLASH_Program+0x3e>
 8000b7a:	2f02      	cmp	r7, #2
 8000b7c:	d104      	bne.n	8000b88 <HAL_FLASH_Program+0x74>
 8000b7e:	4621      	mov	r1, r4
 8000b80:	4628      	mov	r0, r5
 8000b82:	f7ff ff19 	bl	80009b8 <FLASH_Program_Word>
 8000b86:	e7e4      	b.n	8000b52 <HAL_FLASH_Program+0x3e>
 8000b88:	4622      	mov	r2, r4
 8000b8a:	4643      	mov	r3, r8
 8000b8c:	4628      	mov	r0, r5
 8000b8e:	f7ff fefd 	bl	800098c <FLASH_Program_DoubleWord>
 8000b92:	e7de      	b.n	8000b52 <HAL_FLASH_Program+0x3e>
 8000b94:	2002      	movs	r0, #2
 8000b96:	e7e7      	b.n	8000b68 <HAL_FLASH_Program+0x54>
 8000b98:	20000128 	.word	0x20000128
 8000b9c:	40023c00 	.word	0x40023c00

08000ba0 <FLASH_MassErase.constprop.0>:
 8000ba0:	4b07      	ldr	r3, [pc, #28]	@ (8000bc0 <FLASH_MassErase.constprop.0+0x20>)
 8000ba2:	691a      	ldr	r2, [r3, #16]
 8000ba4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8000ba8:	611a      	str	r2, [r3, #16]
 8000baa:	691a      	ldr	r2, [r3, #16]
 8000bac:	f042 0204 	orr.w	r2, r2, #4
 8000bb0:	611a      	str	r2, [r3, #16]
 8000bb2:	691a      	ldr	r2, [r3, #16]
 8000bb4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8000bb8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000bbc:	611a      	str	r2, [r3, #16]
 8000bbe:	4770      	bx	lr
 8000bc0:	40023c00 	.word	0x40023c00

08000bc4 <FLASH_Erase_Sector>:
 8000bc4:	4b0d      	ldr	r3, [pc, #52]	@ (8000bfc <FLASH_Erase_Sector+0x38>)
 8000bc6:	691a      	ldr	r2, [r3, #16]
 8000bc8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8000bcc:	611a      	str	r2, [r3, #16]
 8000bce:	691a      	ldr	r2, [r3, #16]
 8000bd0:	2902      	cmp	r1, #2
 8000bd2:	bf94      	ite	ls
 8000bd4:	0209      	lslls	r1, r1, #8
 8000bd6:	f44f 7140 	movhi.w	r1, #768	@ 0x300
 8000bda:	430a      	orrs	r2, r1
 8000bdc:	611a      	str	r2, [r3, #16]
 8000bde:	691a      	ldr	r2, [r3, #16]
 8000be0:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 8000be4:	611a      	str	r2, [r3, #16]
 8000be6:	691a      	ldr	r2, [r3, #16]
 8000be8:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8000bec:	f040 0002 	orr.w	r0, r0, #2
 8000bf0:	6118      	str	r0, [r3, #16]
 8000bf2:	691a      	ldr	r2, [r3, #16]
 8000bf4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000bf8:	611a      	str	r2, [r3, #16]
 8000bfa:	4770      	bx	lr
 8000bfc:	40023c00 	.word	0x40023c00

08000c00 <FLASH_FlushCaches>:
 8000c00:	4b14      	ldr	r3, [pc, #80]	@ (8000c54 <FLASH_FlushCaches+0x54>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	0591      	lsls	r1, r2, #22
 8000c06:	d50f      	bpl.n	8000c28 <FLASH_FlushCaches+0x28>
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	4b0a      	ldr	r3, [pc, #40]	@ (8000c54 <FLASH_FlushCaches+0x54>)
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	0552      	lsls	r2, r2, #21
 8000c2e:	d50f      	bpl.n	8000c50 <FLASH_FlushCaches+0x50>
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	40023c00 	.word	0x40023c00

08000c58 <HAL_FLASHEx_Erase>:
 8000c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c5c:	f8df 8094 	ldr.w	r8, [pc, #148]	@ 8000cf4 <HAL_FLASHEx_Erase+0x9c>
 8000c60:	f898 3018 	ldrb.w	r3, [r8, #24]
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	4605      	mov	r5, r0
 8000c68:	460f      	mov	r7, r1
 8000c6a:	d03f      	beq.n	8000cec <HAL_FLASHEx_Erase+0x94>
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000c72:	f888 3018 	strb.w	r3, [r8, #24]
 8000c76:	f7ff ff25 	bl	8000ac4 <FLASH_WaitForLastOperation>
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	b9a0      	cbnz	r0, 8000ca8 <HAL_FLASHEx_Erase+0x50>
 8000c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c82:	603b      	str	r3, [r7, #0]
 8000c84:	682b      	ldr	r3, [r5, #0]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d114      	bne.n	8000cb4 <HAL_FLASHEx_Erase+0x5c>
 8000c8a:	7c28      	ldrb	r0, [r5, #16]
 8000c8c:	f7ff ff88 	bl	8000ba0 <FLASH_MassErase.constprop.0>
 8000c90:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000c94:	f7ff ff16 	bl	8000ac4 <FLASH_WaitForLastOperation>
 8000c98:	4a15      	ldr	r2, [pc, #84]	@ (8000cf0 <HAL_FLASHEx_Erase+0x98>)
 8000c9a:	6913      	ldr	r3, [r2, #16]
 8000c9c:	f023 0304 	bic.w	r3, r3, #4
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	6113      	str	r3, [r2, #16]
 8000ca4:	f7ff ffac 	bl	8000c00 <FLASH_FlushCaches>
 8000ca8:	2300      	movs	r3, #0
 8000caa:	f888 3018 	strb.w	r3, [r8, #24]
 8000cae:	4620      	mov	r0, r4
 8000cb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000cb4:	68ae      	ldr	r6, [r5, #8]
 8000cb6:	f8df 9038 	ldr.w	r9, [pc, #56]	@ 8000cf0 <HAL_FLASHEx_Erase+0x98>
 8000cba:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	42b3      	cmp	r3, r6
 8000cc2:	d9ef      	bls.n	8000ca4 <HAL_FLASHEx_Erase+0x4c>
 8000cc4:	7c29      	ldrb	r1, [r5, #16]
 8000cc6:	4630      	mov	r0, r6
 8000cc8:	f7ff ff7c 	bl	8000bc4 <FLASH_Erase_Sector>
 8000ccc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000cd0:	f7ff fef8 	bl	8000ac4 <FLASH_WaitForLastOperation>
 8000cd4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8000cd8:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8000cdc:	f8c9 3010 	str.w	r3, [r9, #16]
 8000ce0:	b110      	cbz	r0, 8000ce8 <HAL_FLASHEx_Erase+0x90>
 8000ce2:	603e      	str	r6, [r7, #0]
 8000ce4:	4604      	mov	r4, r0
 8000ce6:	e7dd      	b.n	8000ca4 <HAL_FLASHEx_Erase+0x4c>
 8000ce8:	3601      	adds	r6, #1
 8000cea:	e7e6      	b.n	8000cba <HAL_FLASHEx_Erase+0x62>
 8000cec:	2402      	movs	r4, #2
 8000cee:	e7de      	b.n	8000cae <HAL_FLASHEx_Erase+0x56>
 8000cf0:	40023c00 	.word	0x40023c00
 8000cf4:	20000128 	.word	0x20000128

08000cf8 <HAL_GPIO_Init>:
 8000cf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cfc:	f8df 9180 	ldr.w	r9, [pc, #384]	@ 8000e80 <HAL_GPIO_Init+0x188>
 8000d00:	4a5d      	ldr	r2, [pc, #372]	@ (8000e78 <HAL_GPIO_Init+0x180>)
 8000d02:	2300      	movs	r3, #0
 8000d04:	680d      	ldr	r5, [r1, #0]
 8000d06:	2401      	movs	r4, #1
 8000d08:	409c      	lsls	r4, r3
 8000d0a:	ea04 0605 	and.w	r6, r4, r5
 8000d0e:	43ac      	bics	r4, r5
 8000d10:	f040 80a3 	bne.w	8000e5a <HAL_GPIO_Init+0x162>
 8000d14:	684d      	ldr	r5, [r1, #4]
 8000d16:	2703      	movs	r7, #3
 8000d18:	f005 0403 	and.w	r4, r5, #3
 8000d1c:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8000d20:	fa07 fc08 	lsl.w	ip, r7, r8
 8000d24:	1e67      	subs	r7, r4, #1
 8000d26:	2f01      	cmp	r7, #1
 8000d28:	ea6f 0c0c 	mvn.w	ip, ip
 8000d2c:	d834      	bhi.n	8000d98 <HAL_GPIO_Init+0xa0>
 8000d2e:	6887      	ldr	r7, [r0, #8]
 8000d30:	ea07 0e0c 	and.w	lr, r7, ip
 8000d34:	68cf      	ldr	r7, [r1, #12]
 8000d36:	fa07 f708 	lsl.w	r7, r7, r8
 8000d3a:	ea47 070e 	orr.w	r7, r7, lr
 8000d3e:	6087      	str	r7, [r0, #8]
 8000d40:	6847      	ldr	r7, [r0, #4]
 8000d42:	ea27 0e06 	bic.w	lr, r7, r6
 8000d46:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8000d4a:	409f      	lsls	r7, r3
 8000d4c:	ea47 070e 	orr.w	r7, r7, lr
 8000d50:	6047      	str	r7, [r0, #4]
 8000d52:	68c7      	ldr	r7, [r0, #12]
 8000d54:	ea07 0e0c 	and.w	lr, r7, ip
 8000d58:	688f      	ldr	r7, [r1, #8]
 8000d5a:	fa07 f708 	lsl.w	r7, r7, r8
 8000d5e:	ea47 070e 	orr.w	r7, r7, lr
 8000d62:	2c02      	cmp	r4, #2
 8000d64:	60c7      	str	r7, [r0, #12]
 8000d66:	d119      	bne.n	8000d9c <HAL_GPIO_Init+0xa4>
 8000d68:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000d6c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8000d70:	f003 0b07 	and.w	fp, r3, #7
 8000d74:	f8da 7020 	ldr.w	r7, [sl, #32]
 8000d78:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000d7c:	f04f 0e0f 	mov.w	lr, #15
 8000d80:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000d84:	ea27 0e0e 	bic.w	lr, r7, lr
 8000d88:	690f      	ldr	r7, [r1, #16]
 8000d8a:	fa07 f70b 	lsl.w	r7, r7, fp
 8000d8e:	ea47 070e 	orr.w	r7, r7, lr
 8000d92:	f8ca 7020 	str.w	r7, [sl, #32]
 8000d96:	e001      	b.n	8000d9c <HAL_GPIO_Init+0xa4>
 8000d98:	2c03      	cmp	r4, #3
 8000d9a:	d1da      	bne.n	8000d52 <HAL_GPIO_Init+0x5a>
 8000d9c:	6807      	ldr	r7, [r0, #0]
 8000d9e:	fa04 f408 	lsl.w	r4, r4, r8
 8000da2:	ea07 070c 	and.w	r7, r7, ip
 8000da6:	433c      	orrs	r4, r7
 8000da8:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
 8000dac:	6004      	str	r4, [r0, #0]
 8000dae:	d054      	beq.n	8000e5a <HAL_GPIO_Init+0x162>
 8000db0:	2400      	movs	r4, #0
 8000db2:	9401      	str	r4, [sp, #4]
 8000db4:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 8000db8:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8000dbc:	f8c9 4044 	str.w	r4, [r9, #68]	@ 0x44
 8000dc0:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 8000dc4:	f023 0703 	bic.w	r7, r3, #3
 8000dc8:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8000dcc:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 8000dd0:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 8000dd4:	9401      	str	r4, [sp, #4]
 8000dd6:	f003 0c03 	and.w	ip, r3, #3
 8000dda:	9c01      	ldr	r4, [sp, #4]
 8000ddc:	f8d7 e008 	ldr.w	lr, [r7, #8]
 8000de0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000de4:	240f      	movs	r4, #15
 8000de6:	fa04 f40c 	lsl.w	r4, r4, ip
 8000dea:	ea2e 0e04 	bic.w	lr, lr, r4
 8000dee:	4c23      	ldr	r4, [pc, #140]	@ (8000e7c <HAL_GPIO_Init+0x184>)
 8000df0:	42a0      	cmp	r0, r4
 8000df2:	d039      	beq.n	8000e68 <HAL_GPIO_Init+0x170>
 8000df4:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000df8:	42a0      	cmp	r0, r4
 8000dfa:	d037      	beq.n	8000e6c <HAL_GPIO_Init+0x174>
 8000dfc:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000e00:	42a0      	cmp	r0, r4
 8000e02:	d035      	beq.n	8000e70 <HAL_GPIO_Init+0x178>
 8000e04:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000e08:	42a0      	cmp	r0, r4
 8000e0a:	d033      	beq.n	8000e74 <HAL_GPIO_Init+0x17c>
 8000e0c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000e10:	42a0      	cmp	r0, r4
 8000e12:	bf14      	ite	ne
 8000e14:	2407      	movne	r4, #7
 8000e16:	2404      	moveq	r4, #4
 8000e18:	fa04 f40c 	lsl.w	r4, r4, ip
 8000e1c:	ea44 040e 	orr.w	r4, r4, lr
 8000e20:	60bc      	str	r4, [r7, #8]
 8000e22:	6894      	ldr	r4, [r2, #8]
 8000e24:	43f7      	mvns	r7, r6
 8000e26:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
 8000e2a:	bf0c      	ite	eq
 8000e2c:	403c      	andeq	r4, r7
 8000e2e:	4334      	orrne	r4, r6
 8000e30:	6094      	str	r4, [r2, #8]
 8000e32:	68d4      	ldr	r4, [r2, #12]
 8000e34:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
 8000e38:	bf0c      	ite	eq
 8000e3a:	403c      	andeq	r4, r7
 8000e3c:	4334      	orrne	r4, r6
 8000e3e:	60d4      	str	r4, [r2, #12]
 8000e40:	6854      	ldr	r4, [r2, #4]
 8000e42:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
 8000e46:	bf0c      	ite	eq
 8000e48:	403c      	andeq	r4, r7
 8000e4a:	4334      	orrne	r4, r6
 8000e4c:	6054      	str	r4, [r2, #4]
 8000e4e:	6814      	ldr	r4, [r2, #0]
 8000e50:	03ed      	lsls	r5, r5, #15
 8000e52:	bf54      	ite	pl
 8000e54:	403c      	andpl	r4, r7
 8000e56:	4334      	orrmi	r4, r6
 8000e58:	6014      	str	r4, [r2, #0]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	2b10      	cmp	r3, #16
 8000e5e:	f47f af51 	bne.w	8000d04 <HAL_GPIO_Init+0xc>
 8000e62:	b003      	add	sp, #12
 8000e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e68:	2400      	movs	r4, #0
 8000e6a:	e7d5      	b.n	8000e18 <HAL_GPIO_Init+0x120>
 8000e6c:	2401      	movs	r4, #1
 8000e6e:	e7d3      	b.n	8000e18 <HAL_GPIO_Init+0x120>
 8000e70:	2402      	movs	r4, #2
 8000e72:	e7d1      	b.n	8000e18 <HAL_GPIO_Init+0x120>
 8000e74:	2403      	movs	r4, #3
 8000e76:	e7cf      	b.n	8000e18 <HAL_GPIO_Init+0x120>
 8000e78:	40013c00 	.word	0x40013c00
 8000e7c:	40020000 	.word	0x40020000
 8000e80:	40023800 	.word	0x40023800

08000e84 <HAL_GPIO_WritePin>:
 8000e84:	b10a      	cbz	r2, 8000e8a <HAL_GPIO_WritePin+0x6>
 8000e86:	6181      	str	r1, [r0, #24]
 8000e88:	4770      	bx	lr
 8000e8a:	0409      	lsls	r1, r1, #16
 8000e8c:	e7fb      	b.n	8000e86 <HAL_GPIO_WritePin+0x2>

08000e8e <HAL_GPIO_TogglePin>:
 8000e8e:	6943      	ldr	r3, [r0, #20]
 8000e90:	ea01 0203 	and.w	r2, r1, r3
 8000e94:	ea21 0103 	bic.w	r1, r1, r3
 8000e98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000e9c:	6181      	str	r1, [r0, #24]
 8000e9e:	4770      	bx	lr

08000ea0 <HAL_GPIO_EXTI_IRQHandler>:
 8000ea0:	4a04      	ldr	r2, [pc, #16]	@ (8000eb4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000ea2:	6951      	ldr	r1, [r2, #20]
 8000ea4:	4201      	tst	r1, r0
 8000ea6:	b508      	push	{r3, lr}
 8000ea8:	d002      	beq.n	8000eb0 <HAL_GPIO_EXTI_IRQHandler+0x10>
 8000eaa:	6150      	str	r0, [r2, #20]
 8000eac:	f7ff fb66 	bl	800057c <HAL_GPIO_EXTI_Callback>
 8000eb0:	bd08      	pop	{r3, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40013c00 	.word	0x40013c00

08000eb8 <HAL_PCD_Init>:
 8000eb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000eba:	4604      	mov	r4, r0
 8000ebc:	b310      	cbz	r0, 8000f04 <HAL_PCD_Init+0x4c>
 8000ebe:	f890 3495 	ldrb.w	r3, [r0, #1173]	@ 0x495
 8000ec2:	6805      	ldr	r5, [r0, #0]
 8000ec4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8000ec8:	b91b      	cbnz	r3, 8000ed2 <HAL_PCD_Init+0x1a>
 8000eca:	f880 2494 	strb.w	r2, [r0, #1172]	@ 0x494
 8000ece:	f002 fdb9 	bl	8003a44 <HAL_PCD_MspInit>
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	f1b5 4fa0 	cmp.w	r5, #1342177280	@ 0x50000000
 8000ed8:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
 8000edc:	bf04      	itt	eq
 8000ede:	2300      	moveq	r3, #0
 8000ee0:	71a3      	strbeq	r3, [r4, #6]
 8000ee2:	6820      	ldr	r0, [r4, #0]
 8000ee4:	f001 f998 	bl	8002218 <USB_DisableGlobalInt>
 8000ee8:	7c23      	ldrb	r3, [r4, #16]
 8000eea:	f88d 3000 	strb.w	r3, [sp]
 8000eee:	1d25      	adds	r5, r4, #4
 8000ef0:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8000ef4:	6820      	ldr	r0, [r4, #0]
 8000ef6:	f001 f8d5 	bl	80020a4 <USB_CoreInit>
 8000efa:	4601      	mov	r1, r0
 8000efc:	b130      	cbz	r0, 8000f0c <HAL_PCD_Init+0x54>
 8000efe:	2302      	movs	r3, #2
 8000f00:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
 8000f04:	2501      	movs	r5, #1
 8000f06:	4628      	mov	r0, r5
 8000f08:	b003      	add	sp, #12
 8000f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f0c:	6820      	ldr	r0, [r4, #0]
 8000f0e:	f001 f989 	bl	8002224 <USB_SetCurrentMode>
 8000f12:	2800      	cmp	r0, #0
 8000f14:	d1f3      	bne.n	8000efe <HAL_PCD_Init+0x46>
 8000f16:	7926      	ldrb	r6, [r4, #4]
 8000f18:	f104 0314 	add.w	r3, r4, #20
 8000f1c:	2701      	movs	r7, #1
 8000f1e:	4602      	mov	r2, r0
 8000f20:	b2c1      	uxtb	r1, r0
 8000f22:	428e      	cmp	r6, r1
 8000f24:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8000f28:	d81b      	bhi.n	8000f62 <HAL_PCD_Init+0xaa>
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	f504 7315 	add.w	r3, r4, #596	@ 0x254
 8000f30:	460a      	mov	r2, r1
 8000f32:	b2c8      	uxtb	r0, r1
 8000f34:	4286      	cmp	r6, r0
 8000f36:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8000f3a:	d820      	bhi.n	8000f7e <HAL_PCD_Init+0xc6>
 8000f3c:	7c23      	ldrb	r3, [r4, #16]
 8000f3e:	f88d 3000 	strb.w	r3, [sp]
 8000f42:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8000f46:	6820      	ldr	r0, [r4, #0]
 8000f48:	f001 f9e8 	bl	800231c <USB_DevInit>
 8000f4c:	4605      	mov	r5, r0
 8000f4e:	2800      	cmp	r0, #0
 8000f50:	d1d5      	bne.n	8000efe <HAL_PCD_Init+0x46>
 8000f52:	2301      	movs	r3, #1
 8000f54:	7460      	strb	r0, [r4, #17]
 8000f56:	6820      	ldr	r0, [r4, #0]
 8000f58:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
 8000f5c:	f001 fcae 	bl	80028bc <USB_DevDisconnect>
 8000f60:	e7d1      	b.n	8000f06 <HAL_PCD_Init+0x4e>
 8000f62:	f823 0c0a 	strh.w	r0, [r3, #-10]
 8000f66:	e943 2207 	strd	r2, r2, [r3, #-28]
 8000f6a:	f803 7c23 	strb.w	r7, [r3, #-35]
 8000f6e:	f803 1c24 	strb.w	r1, [r3, #-36]
 8000f72:	f803 2c20 	strb.w	r2, [r3, #-32]
 8000f76:	f843 2c14 	str.w	r2, [r3, #-20]
 8000f7a:	3001      	adds	r0, #1
 8000f7c:	e7d0      	b.n	8000f20 <HAL_PCD_Init+0x68>
 8000f7e:	e943 2207 	strd	r2, r2, [r3, #-28]
 8000f82:	f803 2c23 	strb.w	r2, [r3, #-35]
 8000f86:	f803 0c24 	strb.w	r0, [r3, #-36]
 8000f8a:	f803 2c20 	strb.w	r2, [r3, #-32]
 8000f8e:	f843 2c14 	str.w	r2, [r3, #-20]
 8000f92:	3101      	adds	r1, #1
 8000f94:	e7cd      	b.n	8000f32 <HAL_PCD_Init+0x7a>

08000f96 <HAL_PCD_Start>:
 8000f96:	b510      	push	{r4, lr}
 8000f98:	4604      	mov	r4, r0
 8000f9a:	6800      	ldr	r0, [r0, #0]
 8000f9c:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d015      	beq.n	8000fd0 <HAL_PCD_Start+0x3a>
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
 8000faa:	68c3      	ldr	r3, [r0, #12]
 8000fac:	065b      	lsls	r3, r3, #25
 8000fae:	d506      	bpl.n	8000fbe <HAL_PCD_Start+0x28>
 8000fb0:	7b63      	ldrb	r3, [r4, #13]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	bf02      	ittt	eq
 8000fb6:	6b83      	ldreq	r3, [r0, #56]	@ 0x38
 8000fb8:	f443 3380 	orreq.w	r3, r3, #65536	@ 0x10000
 8000fbc:	6383      	streq	r3, [r0, #56]	@ 0x38
 8000fbe:	f001 f925 	bl	800220c <USB_EnableGlobalInt>
 8000fc2:	6820      	ldr	r0, [r4, #0]
 8000fc4:	f001 fc6c 	bl	80028a0 <USB_DevConnect>
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
 8000fce:	bd10      	pop	{r4, pc}
 8000fd0:	2002      	movs	r0, #2
 8000fd2:	e7fc      	b.n	8000fce <HAL_PCD_Start+0x38>

08000fd4 <HAL_PCD_Stop>:
 8000fd4:	b538      	push	{r3, r4, r5, lr}
 8000fd6:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	4604      	mov	r4, r0
 8000fde:	d01b      	beq.n	8001018 <HAL_PCD_Stop+0x44>
 8000fe0:	6805      	ldr	r5, [r0, #0]
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
 8000fe8:	4628      	mov	r0, r5
 8000fea:	f001 f915 	bl	8002218 <USB_DisableGlobalInt>
 8000fee:	6820      	ldr	r0, [r4, #0]
 8000ff0:	f001 fc64 	bl	80028bc <USB_DevDisconnect>
 8000ff4:	6820      	ldr	r0, [r4, #0]
 8000ff6:	2110      	movs	r1, #16
 8000ff8:	f001 f944 	bl	8002284 <USB_FlushTxFifo>
 8000ffc:	68eb      	ldr	r3, [r5, #12]
 8000ffe:	065b      	lsls	r3, r3, #25
 8001000:	d506      	bpl.n	8001010 <HAL_PCD_Stop+0x3c>
 8001002:	7b63      	ldrb	r3, [r4, #13]
 8001004:	2b01      	cmp	r3, #1
 8001006:	bf02      	ittt	eq
 8001008:	6bab      	ldreq	r3, [r5, #56]	@ 0x38
 800100a:	f423 3380 	biceq.w	r3, r3, #65536	@ 0x10000
 800100e:	63ab      	streq	r3, [r5, #56]	@ 0x38
 8001010:	2000      	movs	r0, #0
 8001012:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
 8001016:	bd38      	pop	{r3, r4, r5, pc}
 8001018:	2002      	movs	r0, #2
 800101a:	e7fc      	b.n	8001016 <HAL_PCD_Stop+0x42>

0800101c <HAL_PCD_SetAddress>:
 800101c:	b510      	push	{r4, lr}
 800101e:	f890 2494 	ldrb.w	r2, [r0, #1172]	@ 0x494
 8001022:	2a01      	cmp	r2, #1
 8001024:	4604      	mov	r4, r0
 8001026:	d00a      	beq.n	800103e <HAL_PCD_SetAddress+0x22>
 8001028:	2201      	movs	r2, #1
 800102a:	f880 2494 	strb.w	r2, [r0, #1172]	@ 0x494
 800102e:	7441      	strb	r1, [r0, #17]
 8001030:	6800      	ldr	r0, [r0, #0]
 8001032:	f001 fc25 	bl	8002880 <USB_SetDevAddress>
 8001036:	2000      	movs	r0, #0
 8001038:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
 800103c:	bd10      	pop	{r4, pc}
 800103e:	2002      	movs	r0, #2
 8001040:	e7fc      	b.n	800103c <HAL_PCD_SetAddress+0x20>

08001042 <HAL_PCD_EP_Open>:
 8001042:	b570      	push	{r4, r5, r6, lr}
 8001044:	f001 060f 	and.w	r6, r1, #15
 8001048:	eb06 04c6 	add.w	r4, r6, r6, lsl #3
 800104c:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8001050:	4605      	mov	r5, r0
 8001052:	ea4f 0484 	mov.w	r4, r4, lsl #2
 8001056:	f04f 0024 	mov.w	r0, #36	@ 0x24
 800105a:	d01e      	beq.n	800109a <HAL_PCD_EP_Open+0x58>
 800105c:	fb00 5006 	mla	r0, r0, r6, r5
 8001060:	f104 0114 	add.w	r1, r4, #20
 8001064:	2401      	movs	r4, #1
 8001066:	4429      	add	r1, r5
 8001068:	7544      	strb	r4, [r0, #21]
 800106a:	608a      	str	r2, [r1, #8]
 800106c:	784a      	ldrb	r2, [r1, #1]
 800106e:	700e      	strb	r6, [r1, #0]
 8001070:	710b      	strb	r3, [r1, #4]
 8001072:	b102      	cbz	r2, 8001076 <HAL_PCD_EP_Open+0x34>
 8001074:	834e      	strh	r6, [r1, #26]
 8001076:	2b02      	cmp	r3, #2
 8001078:	bf04      	itt	eq
 800107a:	2300      	moveq	r3, #0
 800107c:	714b      	strbeq	r3, [r1, #5]
 800107e:	f895 3494 	ldrb.w	r3, [r5, #1172]	@ 0x494
 8001082:	2b01      	cmp	r3, #1
 8001084:	d012      	beq.n	80010ac <HAL_PCD_EP_Open+0x6a>
 8001086:	2301      	movs	r3, #1
 8001088:	6828      	ldr	r0, [r5, #0]
 800108a:	f885 3494 	strb.w	r3, [r5, #1172]	@ 0x494
 800108e:	f001 fa0a 	bl	80024a6 <USB_ActivateEndpoint>
 8001092:	2000      	movs	r0, #0
 8001094:	f885 0494 	strb.w	r0, [r5, #1172]	@ 0x494
 8001098:	bd70      	pop	{r4, r5, r6, pc}
 800109a:	fb00 5006 	mla	r0, r0, r6, r5
 800109e:	f504 7115 	add.w	r1, r4, #596	@ 0x254
 80010a2:	2400      	movs	r4, #0
 80010a4:	4429      	add	r1, r5
 80010a6:	f880 4255 	strb.w	r4, [r0, #597]	@ 0x255
 80010aa:	e7de      	b.n	800106a <HAL_PCD_EP_Open+0x28>
 80010ac:	2002      	movs	r0, #2
 80010ae:	e7f3      	b.n	8001098 <HAL_PCD_EP_Open+0x56>

080010b0 <HAL_PCD_EP_Receive>:
 80010b0:	b570      	push	{r4, r5, r6, lr}
 80010b2:	f001 050f 	and.w	r5, r1, #15
 80010b6:	2424      	movs	r4, #36	@ 0x24
 80010b8:	fb04 0105 	mla	r1, r4, r5, r0
 80010bc:	fb04 0405 	mla	r4, r4, r5, r0
 80010c0:	e9c4 2398 	strd	r2, r3, [r4, #608]	@ 0x260
 80010c4:	2300      	movs	r3, #0
 80010c6:	f8c4 3268 	str.w	r3, [r4, #616]	@ 0x268
 80010ca:	f884 3255 	strb.w	r3, [r4, #597]	@ 0x255
 80010ce:	f884 5254 	strb.w	r5, [r4, #596]	@ 0x254
 80010d2:	4616      	mov	r6, r2
 80010d4:	7982      	ldrb	r2, [r0, #6]
 80010d6:	6800      	ldr	r0, [r0, #0]
 80010d8:	2a01      	cmp	r2, #1
 80010da:	f501 7115 	add.w	r1, r1, #596	@ 0x254
 80010de:	bf08      	it	eq
 80010e0:	f8c4 6270 	streq.w	r6, [r4, #624]	@ 0x270
 80010e4:	f001 fa74 	bl	80025d0 <USB_EPStartXfer>
 80010e8:	2000      	movs	r0, #0
 80010ea:	bd70      	pop	{r4, r5, r6, pc}

080010ec <HAL_PCD_EP_Transmit>:
 80010ec:	b570      	push	{r4, r5, r6, lr}
 80010ee:	f001 050f 	and.w	r5, r1, #15
 80010f2:	2424      	movs	r4, #36	@ 0x24
 80010f4:	fb04 0105 	mla	r1, r4, r5, r0
 80010f8:	fb04 0405 	mla	r4, r4, r5, r0
 80010fc:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8001100:	2300      	movs	r3, #0
 8001102:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001104:	2301      	movs	r3, #1
 8001106:	7563      	strb	r3, [r4, #21]
 8001108:	7525      	strb	r5, [r4, #20]
 800110a:	4616      	mov	r6, r2
 800110c:	7982      	ldrb	r2, [r0, #6]
 800110e:	6800      	ldr	r0, [r0, #0]
 8001110:	429a      	cmp	r2, r3
 8001112:	f101 0114 	add.w	r1, r1, #20
 8001116:	bf08      	it	eq
 8001118:	6326      	streq	r6, [r4, #48]	@ 0x30
 800111a:	f001 fa59 	bl	80025d0 <USB_EPStartXfer>
 800111e:	2000      	movs	r0, #0
 8001120:	bd70      	pop	{r4, r5, r6, pc}

08001122 <HAL_PCD_EP_SetStall>:
 8001122:	b538      	push	{r3, r4, r5, lr}
 8001124:	7903      	ldrb	r3, [r0, #4]
 8001126:	f001 050f 	and.w	r5, r1, #15
 800112a:	42ab      	cmp	r3, r5
 800112c:	4604      	mov	r4, r0
 800112e:	d32b      	bcc.n	8001188 <HAL_PCD_EP_SetStall+0x66>
 8001130:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8001134:	f04f 0024 	mov.w	r0, #36	@ 0x24
 8001138:	d01d      	beq.n	8001176 <HAL_PCD_EP_SetStall+0x54>
 800113a:	fb00 4105 	mla	r1, r0, r5, r4
 800113e:	fb00 4005 	mla	r0, r0, r5, r4
 8001142:	2301      	movs	r3, #1
 8001144:	3114      	adds	r1, #20
 8001146:	7543      	strb	r3, [r0, #21]
 8001148:	2301      	movs	r3, #1
 800114a:	708b      	strb	r3, [r1, #2]
 800114c:	700d      	strb	r5, [r1, #0]
 800114e:	f894 2494 	ldrb.w	r2, [r4, #1172]	@ 0x494
 8001152:	429a      	cmp	r2, r3
 8001154:	d01a      	beq.n	800118c <HAL_PCD_EP_SetStall+0x6a>
 8001156:	6820      	ldr	r0, [r4, #0]
 8001158:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
 800115c:	f001 fb3c 	bl	80027d8 <USB_EPSetStall>
 8001160:	b92d      	cbnz	r5, 800116e <HAL_PCD_EP_SetStall+0x4c>
 8001162:	79a1      	ldrb	r1, [r4, #6]
 8001164:	6820      	ldr	r0, [r4, #0]
 8001166:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 800116a:	f001 fbf7 	bl	800295c <USB_EP0_OutStart>
 800116e:	2000      	movs	r0, #0
 8001170:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
 8001174:	bd38      	pop	{r3, r4, r5, pc}
 8001176:	fb00 4301 	mla	r3, r0, r1, r4
 800117a:	461a      	mov	r2, r3
 800117c:	f503 7115 	add.w	r1, r3, #596	@ 0x254
 8001180:	2300      	movs	r3, #0
 8001182:	f882 3255 	strb.w	r3, [r2, #597]	@ 0x255
 8001186:	e7df      	b.n	8001148 <HAL_PCD_EP_SetStall+0x26>
 8001188:	2001      	movs	r0, #1
 800118a:	e7f3      	b.n	8001174 <HAL_PCD_EP_SetStall+0x52>
 800118c:	2002      	movs	r0, #2
 800118e:	e7f1      	b.n	8001174 <HAL_PCD_EP_SetStall+0x52>

08001190 <HAL_PCD_EP_ClrStall>:
 8001190:	b538      	push	{r3, r4, r5, lr}
 8001192:	7903      	ldrb	r3, [r0, #4]
 8001194:	f001 020f 	and.w	r2, r1, #15
 8001198:	4293      	cmp	r3, r2
 800119a:	4604      	mov	r4, r0
 800119c:	d329      	bcc.n	80011f2 <HAL_PCD_EP_ClrStall+0x62>
 800119e:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 80011a2:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80011a6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80011aa:	f04f 0024 	mov.w	r0, #36	@ 0x24
 80011ae:	d017      	beq.n	80011e0 <HAL_PCD_EP_ClrStall+0x50>
 80011b0:	fb00 4002 	mla	r0, r0, r2, r4
 80011b4:	f103 0114 	add.w	r1, r3, #20
 80011b8:	2301      	movs	r3, #1
 80011ba:	4421      	add	r1, r4
 80011bc:	7543      	strb	r3, [r0, #21]
 80011be:	2500      	movs	r5, #0
 80011c0:	708d      	strb	r5, [r1, #2]
 80011c2:	700a      	strb	r2, [r1, #0]
 80011c4:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d014      	beq.n	80011f6 <HAL_PCD_EP_ClrStall+0x66>
 80011cc:	2301      	movs	r3, #1
 80011ce:	6820      	ldr	r0, [r4, #0]
 80011d0:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
 80011d4:	f001 fb2b 	bl	800282e <USB_EPClearStall>
 80011d8:	f884 5494 	strb.w	r5, [r4, #1172]	@ 0x494
 80011dc:	4628      	mov	r0, r5
 80011de:	bd38      	pop	{r3, r4, r5, pc}
 80011e0:	fb00 4002 	mla	r0, r0, r2, r4
 80011e4:	f503 7115 	add.w	r1, r3, #596	@ 0x254
 80011e8:	2300      	movs	r3, #0
 80011ea:	4421      	add	r1, r4
 80011ec:	f880 3255 	strb.w	r3, [r0, #597]	@ 0x255
 80011f0:	e7e5      	b.n	80011be <HAL_PCD_EP_ClrStall+0x2e>
 80011f2:	2001      	movs	r0, #1
 80011f4:	e7f3      	b.n	80011de <HAL_PCD_EP_ClrStall+0x4e>
 80011f6:	2002      	movs	r0, #2
 80011f8:	e7f1      	b.n	80011de <HAL_PCD_EP_ClrStall+0x4e>

080011fa <HAL_PCD_EP_Abort>:
 80011fa:	f001 030f 	and.w	r3, r1, #15
 80011fe:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8001202:	060a      	lsls	r2, r1, #24
 8001204:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001208:	bf4c      	ite	mi
 800120a:	f103 0114 	addmi.w	r1, r3, #20
 800120e:	f503 7115 	addpl.w	r1, r3, #596	@ 0x254
 8001212:	4401      	add	r1, r0
 8001214:	6800      	ldr	r0, [r0, #0]
 8001216:	f001 b985 	b.w	8002524 <USB_EPStopXfer>
	...

0800121c <HAL_PCD_IRQHandler>:
 800121c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001220:	6806      	ldr	r6, [r0, #0]
 8001222:	b089      	sub	sp, #36	@ 0x24
 8001224:	4604      	mov	r4, r0
 8001226:	4630      	mov	r0, r6
 8001228:	f001 fb84 	bl	8002934 <USB_GetMode>
 800122c:	9003      	str	r0, [sp, #12]
 800122e:	2800      	cmp	r0, #0
 8001230:	f040 8157 	bne.w	80014e2 <HAL_PCD_IRQHandler+0x2c6>
 8001234:	6820      	ldr	r0, [r4, #0]
 8001236:	f001 fb4f 	bl	80028d8 <USB_ReadInterrupts>
 800123a:	2800      	cmp	r0, #0
 800123c:	f000 8151 	beq.w	80014e2 <HAL_PCD_IRQHandler+0x2c6>
 8001240:	f8d6 3808 	ldr.w	r3, [r6, #2056]	@ 0x808
 8001244:	6820      	ldr	r0, [r4, #0]
 8001246:	f3c3 230d 	ubfx	r3, r3, #8, #14
 800124a:	f8c4 34d4 	str.w	r3, [r4, #1236]	@ 0x4d4
 800124e:	f001 fb43 	bl	80028d8 <USB_ReadInterrupts>
 8001252:	0787      	lsls	r7, r0, #30
 8001254:	bf48      	it	mi
 8001256:	6822      	ldrmi	r2, [r4, #0]
 8001258:	6820      	ldr	r0, [r4, #0]
 800125a:	bf42      	ittt	mi
 800125c:	6953      	ldrmi	r3, [r2, #20]
 800125e:	f003 0302 	andmi.w	r3, r3, #2
 8001262:	6153      	strmi	r3, [r2, #20]
 8001264:	f001 fb38 	bl	80028d8 <USB_ReadInterrupts>
 8001268:	06c0      	lsls	r0, r0, #27
 800126a:	f506 6500 	add.w	r5, r6, #2048	@ 0x800
 800126e:	d52c      	bpl.n	80012ca <HAL_PCD_IRQHandler+0xae>
 8001270:	6822      	ldr	r2, [r4, #0]
 8001272:	6993      	ldr	r3, [r2, #24]
 8001274:	f023 0310 	bic.w	r3, r3, #16
 8001278:	6193      	str	r3, [r2, #24]
 800127a:	f8d6 8020 	ldr.w	r8, [r6, #32]
 800127e:	f3c8 4343 	ubfx	r3, r8, #17, #4
 8001282:	2b02      	cmp	r3, #2
 8001284:	f008 070f 	and.w	r7, r8, #15
 8001288:	f040 812e 	bne.w	80014e8 <HAL_PCD_IRQHandler+0x2cc>
 800128c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001290:	ea18 0f03 	tst.w	r8, r3
 8001294:	d014      	beq.n	80012c0 <HAL_PCD_IRQHandler+0xa4>
 8001296:	2324      	movs	r3, #36	@ 0x24
 8001298:	fb03 4707 	mla	r7, r3, r7, r4
 800129c:	f3c8 190a 	ubfx	r9, r8, #4, #11
 80012a0:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 80012a4:	464a      	mov	r2, r9
 80012a6:	4630      	mov	r0, r6
 80012a8:	f001 fa76 	bl	8002798 <USB_ReadPacket>
 80012ac:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 80012b0:	444b      	add	r3, r9
 80012b2:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
 80012b6:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 80012ba:	444b      	add	r3, r9
 80012bc:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 80012c0:	6822      	ldr	r2, [r4, #0]
 80012c2:	6993      	ldr	r3, [r2, #24]
 80012c4:	f043 0310 	orr.w	r3, r3, #16
 80012c8:	6193      	str	r3, [r2, #24]
 80012ca:	6820      	ldr	r0, [r4, #0]
 80012cc:	f001 fb04 	bl	80028d8 <USB_ReadInterrupts>
 80012d0:	0301      	lsls	r1, r0, #12
 80012d2:	f100 811b 	bmi.w	800150c <HAL_PCD_IRQHandler+0x2f0>
 80012d6:	6820      	ldr	r0, [r4, #0]
 80012d8:	f001 fafe 	bl	80028d8 <USB_ReadInterrupts>
 80012dc:	0342      	lsls	r2, r0, #13
 80012de:	d50d      	bpl.n	80012fc <HAL_PCD_IRQHandler+0xe0>
 80012e0:	6820      	ldr	r0, [r4, #0]
 80012e2:	f001 fb05 	bl	80028f0 <USB_ReadDevAllInEpInterrupt>
 80012e6:	4627      	mov	r7, r4
 80012e8:	9004      	str	r0, [sp, #16]
 80012ea:	f506 6b10 	add.w	fp, r6, #2304	@ 0x900
 80012ee:	f04f 0a00 	mov.w	sl, #0
 80012f2:	9b04      	ldr	r3, [sp, #16]
 80012f4:	6820      	ldr	r0, [r4, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f040 81d5 	bne.w	80016a6 <HAL_PCD_IRQHandler+0x48a>
 80012fc:	6820      	ldr	r0, [r4, #0]
 80012fe:	f001 faeb 	bl	80028d8 <USB_ReadInterrupts>
 8001302:	2800      	cmp	r0, #0
 8001304:	da13      	bge.n	800132e <HAL_PCD_IRQHandler+0x112>
 8001306:	686b      	ldr	r3, [r5, #4]
 8001308:	f023 0301 	bic.w	r3, r3, #1
 800130c:	606b      	str	r3, [r5, #4]
 800130e:	f894 34cc 	ldrb.w	r3, [r4, #1228]	@ 0x4cc
 8001312:	2b01      	cmp	r3, #1
 8001314:	f040 826d 	bne.w	80017f2 <HAL_PCD_IRQHandler+0x5d6>
 8001318:	2100      	movs	r1, #0
 800131a:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
 800131e:	4620      	mov	r0, r4
 8001320:	f000 fae9 	bl	80018f6 <HAL_PCDEx_LPM_Callback>
 8001324:	6822      	ldr	r2, [r4, #0]
 8001326:	6953      	ldr	r3, [r2, #20]
 8001328:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800132c:	6153      	str	r3, [r2, #20]
 800132e:	6820      	ldr	r0, [r4, #0]
 8001330:	f001 fad2 	bl	80028d8 <USB_ReadInterrupts>
 8001334:	0501      	lsls	r1, r0, #20
 8001336:	d50a      	bpl.n	800134e <HAL_PCD_IRQHandler+0x132>
 8001338:	68ab      	ldr	r3, [r5, #8]
 800133a:	07da      	lsls	r2, r3, #31
 800133c:	d502      	bpl.n	8001344 <HAL_PCD_IRQHandler+0x128>
 800133e:	4620      	mov	r0, r4
 8001340:	f002 fbf0 	bl	8003b24 <HAL_PCD_SuspendCallback>
 8001344:	6822      	ldr	r2, [r4, #0]
 8001346:	6953      	ldr	r3, [r2, #20]
 8001348:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800134c:	6153      	str	r3, [r2, #20]
 800134e:	6820      	ldr	r0, [r4, #0]
 8001350:	f001 fac2 	bl	80028d8 <USB_ReadInterrupts>
 8001354:	04c3      	lsls	r3, r0, #19
 8001356:	d533      	bpl.n	80013c0 <HAL_PCD_IRQHandler+0x1a4>
 8001358:	686b      	ldr	r3, [r5, #4]
 800135a:	6820      	ldr	r0, [r4, #0]
 800135c:	f023 0301 	bic.w	r3, r3, #1
 8001360:	606b      	str	r3, [r5, #4]
 8001362:	2110      	movs	r1, #16
 8001364:	f000 ff8e 	bl	8002284 <USB_FlushTxFifo>
 8001368:	7920      	ldrb	r0, [r4, #4]
 800136a:	f506 6310 	add.w	r3, r6, #2304	@ 0x900
 800136e:	f64f 317f 	movw	r1, #64383	@ 0xfb7f
 8001372:	9a03      	ldr	r2, [sp, #12]
 8001374:	4290      	cmp	r0, r2
 8001376:	f200 8240 	bhi.w	80017fa <HAL_PCD_IRQHandler+0x5de>
 800137a:	69eb      	ldr	r3, [r5, #28]
 800137c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001380:	61eb      	str	r3, [r5, #28]
 8001382:	7be3      	ldrb	r3, [r4, #15]
 8001384:	2b00      	cmp	r3, #0
 8001386:	f000 8255 	beq.w	8001834 <HAL_PCD_IRQHandler+0x618>
 800138a:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
 800138e:	f043 030b 	orr.w	r3, r3, #11
 8001392:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
 8001396:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8001398:	f043 030b 	orr.w	r3, r3, #11
 800139c:	646b      	str	r3, [r5, #68]	@ 0x44
 800139e:	f8d6 3800 	ldr.w	r3, [r6, #2048]	@ 0x800
 80013a2:	6820      	ldr	r0, [r4, #0]
 80013a4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80013a8:	f8c6 3800 	str.w	r3, [r6, #2048]	@ 0x800
 80013ac:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 80013b0:	79a1      	ldrb	r1, [r4, #6]
 80013b2:	f001 fad3 	bl	800295c <USB_EP0_OutStart>
 80013b6:	6822      	ldr	r2, [r4, #0]
 80013b8:	6953      	ldr	r3, [r2, #20]
 80013ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013be:	6153      	str	r3, [r2, #20]
 80013c0:	6820      	ldr	r0, [r4, #0]
 80013c2:	f001 fa89 	bl	80028d8 <USB_ReadInterrupts>
 80013c6:	0487      	lsls	r7, r0, #18
 80013c8:	d516      	bpl.n	80013f8 <HAL_PCD_IRQHandler+0x1dc>
 80013ca:	6820      	ldr	r0, [r4, #0]
 80013cc:	f001 fab6 	bl	800293c <USB_ActivateSetup>
 80013d0:	6820      	ldr	r0, [r4, #0]
 80013d2:	f001 f85d 	bl	8002490 <USB_GetDevSpeed>
 80013d6:	71e0      	strb	r0, [r4, #7]
 80013d8:	6827      	ldr	r7, [r4, #0]
 80013da:	f000 fd03 	bl	8001de4 <HAL_RCC_GetHCLKFreq>
 80013de:	79e2      	ldrb	r2, [r4, #7]
 80013e0:	4601      	mov	r1, r0
 80013e2:	4638      	mov	r0, r7
 80013e4:	f000 fea2 	bl	800212c <USB_SetTurnaroundTime>
 80013e8:	4620      	mov	r0, r4
 80013ea:	f002 fb88 	bl	8003afe <HAL_PCD_ResetCallback>
 80013ee:	6822      	ldr	r2, [r4, #0]
 80013f0:	6953      	ldr	r3, [r2, #20]
 80013f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013f6:	6153      	str	r3, [r2, #20]
 80013f8:	6820      	ldr	r0, [r4, #0]
 80013fa:	f001 fa6d 	bl	80028d8 <USB_ReadInterrupts>
 80013fe:	0700      	lsls	r0, r0, #28
 8001400:	d507      	bpl.n	8001412 <HAL_PCD_IRQHandler+0x1f6>
 8001402:	4620      	mov	r0, r4
 8001404:	f002 fb77 	bl	8003af6 <HAL_PCD_SOFCallback>
 8001408:	6822      	ldr	r2, [r4, #0]
 800140a:	6953      	ldr	r3, [r2, #20]
 800140c:	f003 0308 	and.w	r3, r3, #8
 8001410:	6153      	str	r3, [r2, #20]
 8001412:	6820      	ldr	r0, [r4, #0]
 8001414:	f001 fa60 	bl	80028d8 <USB_ReadInterrupts>
 8001418:	0601      	lsls	r1, r0, #24
 800141a:	f100 8216 	bmi.w	800184a <HAL_PCD_IRQHandler+0x62e>
 800141e:	6820      	ldr	r0, [r4, #0]
 8001420:	f001 fa5a 	bl	80028d8 <USB_ReadInterrupts>
 8001424:	02c2      	lsls	r2, r0, #11
 8001426:	d50c      	bpl.n	8001442 <HAL_PCD_IRQHandler+0x226>
 8001428:	46a0      	mov	r8, r4
 800142a:	f506 6912 	add.w	r9, r6, #2336	@ 0x920
 800142e:	2701      	movs	r7, #1
 8001430:	7923      	ldrb	r3, [r4, #4]
 8001432:	42bb      	cmp	r3, r7
 8001434:	f200 8222 	bhi.w	800187c <HAL_PCD_IRQHandler+0x660>
 8001438:	6822      	ldr	r2, [r4, #0]
 800143a:	6953      	ldr	r3, [r2, #20]
 800143c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001440:	6153      	str	r3, [r2, #20]
 8001442:	6820      	ldr	r0, [r4, #0]
 8001444:	f001 fa48 	bl	80028d8 <USB_ReadInterrupts>
 8001448:	0283      	lsls	r3, r0, #10
 800144a:	d52d      	bpl.n	80014a8 <HAL_PCD_IRQHandler+0x28c>
 800144c:	f894 e004 	ldrb.w	lr, [r4, #4]
 8001450:	4623      	mov	r3, r4
 8001452:	f506 6032 	add.w	r0, r6, #2848	@ 0xb20
 8001456:	2101      	movs	r1, #1
 8001458:	458e      	cmp	lr, r1
 800145a:	d920      	bls.n	800149e <HAL_PCD_IRQHandler+0x282>
 800145c:	f893 c27c 	ldrb.w	ip, [r3, #636]	@ 0x27c
 8001460:	6802      	ldr	r2, [r0, #0]
 8001462:	f1bc 0f01 	cmp.w	ip, #1
 8001466:	f040 821f 	bne.w	80018a8 <HAL_PCD_IRQHandler+0x68c>
 800146a:	2a00      	cmp	r2, #0
 800146c:	f280 821c 	bge.w	80018a8 <HAL_PCD_IRQHandler+0x68c>
 8001470:	f8d4 74d4 	ldr.w	r7, [r4, #1236]	@ 0x4d4
 8001474:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
 8001478:	f007 0701 	and.w	r7, r7, #1
 800147c:	42ba      	cmp	r2, r7
 800147e:	f040 8213 	bne.w	80018a8 <HAL_PCD_IRQHandler+0x68c>
 8001482:	f883 c27b 	strb.w	ip, [r3, #635]	@ 0x27b
 8001486:	69b2      	ldr	r2, [r6, #24]
 8001488:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800148c:	61b2      	str	r2, [r6, #24]
 800148e:	6972      	ldr	r2, [r6, #20]
 8001490:	0617      	lsls	r7, r2, #24
 8001492:	f100 8209 	bmi.w	80018a8 <HAL_PCD_IRQHandler+0x68c>
 8001496:	686b      	ldr	r3, [r5, #4]
 8001498:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800149c:	606b      	str	r3, [r5, #4]
 800149e:	6822      	ldr	r2, [r4, #0]
 80014a0:	6953      	ldr	r3, [r2, #20]
 80014a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014a6:	6153      	str	r3, [r2, #20]
 80014a8:	6820      	ldr	r0, [r4, #0]
 80014aa:	f001 fa15 	bl	80028d8 <USB_ReadInterrupts>
 80014ae:	0041      	lsls	r1, r0, #1
 80014b0:	d507      	bpl.n	80014c2 <HAL_PCD_IRQHandler+0x2a6>
 80014b2:	4620      	mov	r0, r4
 80014b4:	f002 fb5a 	bl	8003b6c <HAL_PCD_ConnectCallback>
 80014b8:	6822      	ldr	r2, [r4, #0]
 80014ba:	6953      	ldr	r3, [r2, #20]
 80014bc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80014c0:	6153      	str	r3, [r2, #20]
 80014c2:	6820      	ldr	r0, [r4, #0]
 80014c4:	f001 fa08 	bl	80028d8 <USB_ReadInterrupts>
 80014c8:	0742      	lsls	r2, r0, #29
 80014ca:	d50a      	bpl.n	80014e2 <HAL_PCD_IRQHandler+0x2c6>
 80014cc:	6823      	ldr	r3, [r4, #0]
 80014ce:	685d      	ldr	r5, [r3, #4]
 80014d0:	076b      	lsls	r3, r5, #29
 80014d2:	d502      	bpl.n	80014da <HAL_PCD_IRQHandler+0x2be>
 80014d4:	4620      	mov	r0, r4
 80014d6:	f002 fb4d 	bl	8003b74 <HAL_PCD_DisconnectCallback>
 80014da:	6822      	ldr	r2, [r4, #0]
 80014dc:	6853      	ldr	r3, [r2, #4]
 80014de:	432b      	orrs	r3, r5
 80014e0:	6053      	str	r3, [r2, #4]
 80014e2:	b009      	add	sp, #36	@ 0x24
 80014e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014e8:	2b06      	cmp	r3, #6
 80014ea:	f47f aee9 	bne.w	80012c0 <HAL_PCD_IRQHandler+0xa4>
 80014ee:	2208      	movs	r2, #8
 80014f0:	f204 419c 	addw	r1, r4, #1180	@ 0x49c
 80014f4:	4630      	mov	r0, r6
 80014f6:	f001 f94f 	bl	8002798 <USB_ReadPacket>
 80014fa:	2324      	movs	r3, #36	@ 0x24
 80014fc:	fb03 4707 	mla	r7, r3, r7, r4
 8001500:	f3c8 180a 	ubfx	r8, r8, #4, #11
 8001504:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 8001508:	4443      	add	r3, r8
 800150a:	e6d7      	b.n	80012bc <HAL_PCD_IRQHandler+0xa0>
 800150c:	6820      	ldr	r0, [r4, #0]
 800150e:	f001 f9e7 	bl	80028e0 <USB_ReadDevAllOutEpInterrupt>
 8001512:	f506 6830 	add.w	r8, r6, #2816	@ 0xb00
 8001516:	9004      	str	r0, [sp, #16]
 8001518:	46a2      	mov	sl, r4
 800151a:	2700      	movs	r7, #0
 800151c:	9b04      	ldr	r3, [sp, #16]
 800151e:	6820      	ldr	r0, [r4, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	f43f aed8 	beq.w	80012d6 <HAL_PCD_IRQHandler+0xba>
 8001526:	9b04      	ldr	r3, [sp, #16]
 8001528:	07db      	lsls	r3, r3, #31
 800152a:	d578      	bpl.n	800161e <HAL_PCD_IRQHandler+0x402>
 800152c:	fa5f fb87 	uxtb.w	fp, r7
 8001530:	4659      	mov	r1, fp
 8001532:	f001 f9e5 	bl	8002900 <USB_ReadDevOutEPInterrupt>
 8001536:	f010 0f01 	tst.w	r0, #1
 800153a:	4681      	mov	r9, r0
 800153c:	d01f      	beq.n	800157e <HAL_PCD_IRQHandler+0x362>
 800153e:	6820      	ldr	r0, [r4, #0]
 8001540:	2301      	movs	r3, #1
 8001542:	f8c8 3008 	str.w	r3, [r8, #8]
 8001546:	f894 c006 	ldrb.w	ip, [r4, #6]
 800154a:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 800154c:	f500 6330 	add.w	r3, r0, #2816	@ 0xb00
 8001550:	eb03 1347 	add.w	r3, r3, r7, lsl #5
 8001554:	f1bc 0f01 	cmp.w	ip, #1
 8001558:	689a      	ldr	r2, [r3, #8]
 800155a:	f040 808e 	bne.w	800167a <HAL_PCD_IRQHandler+0x45e>
 800155e:	f012 0f08 	tst.w	r2, #8
 8001562:	d007      	beq.n	8001574 <HAL_PCD_IRQHandler+0x358>
 8001564:	48b1      	ldr	r0, [pc, #708]	@ (800182c <HAL_PCD_IRQHandler+0x610>)
 8001566:	4281      	cmp	r1, r0
 8001568:	d909      	bls.n	800157e <HAL_PCD_IRQHandler+0x362>
 800156a:	0412      	lsls	r2, r2, #16
 800156c:	d507      	bpl.n	800157e <HAL_PCD_IRQHandler+0x362>
 800156e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001572:	e003      	b.n	800157c <HAL_PCD_IRQHandler+0x360>
 8001574:	f012 0f20 	tst.w	r2, #32
 8001578:	d05a      	beq.n	8001630 <HAL_PCD_IRQHandler+0x414>
 800157a:	2220      	movs	r2, #32
 800157c:	609a      	str	r2, [r3, #8]
 800157e:	f019 0f08 	tst.w	r9, #8
 8001582:	d021      	beq.n	80015c8 <HAL_PCD_IRQHandler+0x3ac>
 8001584:	2308      	movs	r3, #8
 8001586:	f8c8 3008 	str.w	r3, [r8, #8]
 800158a:	6823      	ldr	r3, [r4, #0]
 800158c:	49a7      	ldr	r1, [pc, #668]	@ (800182c <HAL_PCD_IRQHandler+0x610>)
 800158e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001590:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001594:	eb03 1347 	add.w	r3, r3, r7, lsl #5
 8001598:	428a      	cmp	r2, r1
 800159a:	6898      	ldr	r0, [r3, #8]
 800159c:	d904      	bls.n	80015a8 <HAL_PCD_IRQHandler+0x38c>
 800159e:	0401      	lsls	r1, r0, #16
 80015a0:	bf44      	itt	mi
 80015a2:	f44f 4000 	movmi.w	r0, #32768	@ 0x8000
 80015a6:	6098      	strmi	r0, [r3, #8]
 80015a8:	4620      	mov	r0, r4
 80015aa:	9205      	str	r2, [sp, #20]
 80015ac:	f002 fa8c 	bl	8003ac8 <HAL_PCD_SetupStageCallback>
 80015b0:	9a05      	ldr	r2, [sp, #20]
 80015b2:	499e      	ldr	r1, [pc, #632]	@ (800182c <HAL_PCD_IRQHandler+0x610>)
 80015b4:	428a      	cmp	r2, r1
 80015b6:	d907      	bls.n	80015c8 <HAL_PCD_IRQHandler+0x3ac>
 80015b8:	79a1      	ldrb	r1, [r4, #6]
 80015ba:	2901      	cmp	r1, #1
 80015bc:	d104      	bne.n	80015c8 <HAL_PCD_IRQHandler+0x3ac>
 80015be:	6820      	ldr	r0, [r4, #0]
 80015c0:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 80015c4:	f001 f9ca 	bl	800295c <USB_EP0_OutStart>
 80015c8:	f019 0f10 	tst.w	r9, #16
 80015cc:	bf1c      	itt	ne
 80015ce:	2310      	movne	r3, #16
 80015d0:	f8c8 3008 	strne.w	r3, [r8, #8]
 80015d4:	f019 0f02 	tst.w	r9, #2
 80015d8:	d014      	beq.n	8001604 <HAL_PCD_IRQHandler+0x3e8>
 80015da:	6973      	ldr	r3, [r6, #20]
 80015dc:	061a      	lsls	r2, r3, #24
 80015de:	bf42      	ittt	mi
 80015e0:	686b      	ldrmi	r3, [r5, #4]
 80015e2:	f443 6380 	orrmi.w	r3, r3, #1024	@ 0x400
 80015e6:	606b      	strmi	r3, [r5, #4]
 80015e8:	f89a 3257 	ldrb.w	r3, [sl, #599]	@ 0x257
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d106      	bne.n	80015fe <HAL_PCD_IRQHandler+0x3e2>
 80015f0:	2300      	movs	r3, #0
 80015f2:	f88a 3257 	strb.w	r3, [sl, #599]	@ 0x257
 80015f6:	4659      	mov	r1, fp
 80015f8:	4620      	mov	r0, r4
 80015fa:	f002 faaf 	bl	8003b5c <HAL_PCD_ISOOUTIncompleteCallback>
 80015fe:	2302      	movs	r3, #2
 8001600:	f8c8 3008 	str.w	r3, [r8, #8]
 8001604:	f019 0f20 	tst.w	r9, #32
 8001608:	bf1c      	itt	ne
 800160a:	2320      	movne	r3, #32
 800160c:	f8c8 3008 	strne.w	r3, [r8, #8]
 8001610:	f419 5f00 	tst.w	r9, #8192	@ 0x2000
 8001614:	bf1c      	itt	ne
 8001616:	f44f 5300 	movne.w	r3, #8192	@ 0x2000
 800161a:	f8c8 3008 	strne.w	r3, [r8, #8]
 800161e:	9b04      	ldr	r3, [sp, #16]
 8001620:	085b      	lsrs	r3, r3, #1
 8001622:	3701      	adds	r7, #1
 8001624:	9304      	str	r3, [sp, #16]
 8001626:	f108 0820 	add.w	r8, r8, #32
 800162a:	f10a 0a24 	add.w	sl, sl, #36	@ 0x24
 800162e:	e775      	b.n	800151c <HAL_PCD_IRQHandler+0x300>
 8001630:	f012 0f28 	tst.w	r2, #40	@ 0x28
 8001634:	d1a3      	bne.n	800157e <HAL_PCD_IRQHandler+0x362>
 8001636:	f8df c1f4 	ldr.w	ip, [pc, #500]	@ 800182c <HAL_PCD_IRQHandler+0x610>
 800163a:	4561      	cmp	r1, ip
 800163c:	d901      	bls.n	8001642 <HAL_PCD_IRQHandler+0x426>
 800163e:	0412      	lsls	r2, r2, #16
 8001640:	d495      	bmi.n	800156e <HAL_PCD_IRQHandler+0x352>
 8001642:	691a      	ldr	r2, [r3, #16]
 8001644:	f8da 3274 	ldr.w	r3, [sl, #628]	@ 0x274
 8001648:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800164c:	1a9b      	subs	r3, r3, r2
 800164e:	f8ca 3268 	str.w	r3, [sl, #616]	@ 0x268
 8001652:	b96f      	cbnz	r7, 8001670 <HAL_PCD_IRQHandler+0x454>
 8001654:	f8d4 2264 	ldr.w	r2, [r4, #612]	@ 0x264
 8001658:	b92a      	cbnz	r2, 8001666 <HAL_PCD_IRQHandler+0x44a>
 800165a:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 800165e:	2101      	movs	r1, #1
 8001660:	f001 f97c 	bl	800295c <USB_EP0_OutStart>
 8001664:	e004      	b.n	8001670 <HAL_PCD_IRQHandler+0x454>
 8001666:	f8d4 2260 	ldr.w	r2, [r4, #608]	@ 0x260
 800166a:	441a      	add	r2, r3
 800166c:	f8c4 2260 	str.w	r2, [r4, #608]	@ 0x260
 8001670:	4659      	mov	r1, fp
 8001672:	4620      	mov	r0, r4
 8001674:	f002 fa2e 	bl	8003ad4 <HAL_PCD_DataOutStageCallback>
 8001678:	e781      	b.n	800157e <HAL_PCD_IRQHandler+0x362>
 800167a:	f8df c1b4 	ldr.w	ip, [pc, #436]	@ 8001830 <HAL_PCD_IRQHandler+0x614>
 800167e:	4561      	cmp	r1, ip
 8001680:	d107      	bne.n	8001692 <HAL_PCD_IRQHandler+0x476>
 8001682:	0411      	lsls	r1, r2, #16
 8001684:	f53f af73 	bmi.w	800156e <HAL_PCD_IRQHandler+0x352>
 8001688:	0690      	lsls	r0, r2, #26
 800168a:	d5f1      	bpl.n	8001670 <HAL_PCD_IRQHandler+0x454>
 800168c:	2220      	movs	r2, #32
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	e7ee      	b.n	8001670 <HAL_PCD_IRQHandler+0x454>
 8001692:	2f00      	cmp	r7, #0
 8001694:	d1ec      	bne.n	8001670 <HAL_PCD_IRQHandler+0x454>
 8001696:	f8d4 3264 	ldr.w	r3, [r4, #612]	@ 0x264
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1e8      	bne.n	8001670 <HAL_PCD_IRQHandler+0x454>
 800169e:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 80016a2:	4639      	mov	r1, r7
 80016a4:	e7dc      	b.n	8001660 <HAL_PCD_IRQHandler+0x444>
 80016a6:	9b04      	ldr	r3, [sp, #16]
 80016a8:	07db      	lsls	r3, r3, #31
 80016aa:	f140 8099 	bpl.w	80017e0 <HAL_PCD_IRQHandler+0x5c4>
 80016ae:	fa5f f38a 	uxtb.w	r3, sl
 80016b2:	4619      	mov	r1, r3
 80016b4:	9305      	str	r3, [sp, #20]
 80016b6:	f001 f92c 	bl	8002912 <USB_ReadDevInEPInterrupt>
 80016ba:	f010 0f01 	tst.w	r0, #1
 80016be:	4680      	mov	r8, r0
 80016c0:	d01f      	beq.n	8001702 <HAL_PCD_IRQHandler+0x4e6>
 80016c2:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80016c4:	2101      	movs	r1, #1
 80016c6:	f00a 020f 	and.w	r2, sl, #15
 80016ca:	fa01 f202 	lsl.w	r2, r1, r2
 80016ce:	ea23 0302 	bic.w	r3, r3, r2
 80016d2:	636b      	str	r3, [r5, #52]	@ 0x34
 80016d4:	f8cb 1008 	str.w	r1, [fp, #8]
 80016d8:	79a1      	ldrb	r1, [r4, #6]
 80016da:	2901      	cmp	r1, #1
 80016dc:	d10d      	bne.n	80016fa <HAL_PCD_IRQHandler+0x4de>
 80016de:	e9d7 2307 	ldrd	r2, r3, [r7, #28]
 80016e2:	4413      	add	r3, r2
 80016e4:	623b      	str	r3, [r7, #32]
 80016e6:	f1ba 0f00 	cmp.w	sl, #0
 80016ea:	d106      	bne.n	80016fa <HAL_PCD_IRQHandler+0x4de>
 80016ec:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80016ee:	b923      	cbnz	r3, 80016fa <HAL_PCD_IRQHandler+0x4de>
 80016f0:	6820      	ldr	r0, [r4, #0]
 80016f2:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 80016f6:	f001 f931 	bl	800295c <USB_EP0_OutStart>
 80016fa:	9905      	ldr	r1, [sp, #20]
 80016fc:	4620      	mov	r0, r4
 80016fe:	f002 f9f2 	bl	8003ae6 <HAL_PCD_DataInStageCallback>
 8001702:	f018 0f08 	tst.w	r8, #8
 8001706:	bf1c      	itt	ne
 8001708:	2308      	movne	r3, #8
 800170a:	f8cb 3008 	strne.w	r3, [fp, #8]
 800170e:	f018 0f10 	tst.w	r8, #16
 8001712:	bf1c      	itt	ne
 8001714:	2310      	movne	r3, #16
 8001716:	f8cb 3008 	strne.w	r3, [fp, #8]
 800171a:	f018 0f40 	tst.w	r8, #64	@ 0x40
 800171e:	bf1c      	itt	ne
 8001720:	2340      	movne	r3, #64	@ 0x40
 8001722:	f8cb 3008 	strne.w	r3, [fp, #8]
 8001726:	f018 0f02 	tst.w	r8, #2
 800172a:	d00f      	beq.n	800174c <HAL_PCD_IRQHandler+0x530>
 800172c:	4651      	mov	r1, sl
 800172e:	4630      	mov	r0, r6
 8001730:	f000 fda8 	bl	8002284 <USB_FlushTxFifo>
 8001734:	7dfb      	ldrb	r3, [r7, #23]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d105      	bne.n	8001746 <HAL_PCD_IRQHandler+0x52a>
 800173a:	2300      	movs	r3, #0
 800173c:	9905      	ldr	r1, [sp, #20]
 800173e:	75fb      	strb	r3, [r7, #23]
 8001740:	4620      	mov	r0, r4
 8001742:	f002 fa0f 	bl	8003b64 <HAL_PCD_ISOINIncompleteCallback>
 8001746:	2302      	movs	r3, #2
 8001748:	f8cb 3008 	str.w	r3, [fp, #8]
 800174c:	6823      	ldr	r3, [r4, #0]
 800174e:	9306      	str	r3, [sp, #24]
 8001750:	f018 0f80 	tst.w	r8, #128	@ 0x80
 8001754:	d044      	beq.n	80017e0 <HAL_PCD_IRQHandler+0x5c4>
 8001756:	e9d7 3209 	ldrd	r3, r2, [r7, #36]	@ 0x24
 800175a:	429a      	cmp	r2, r3
 800175c:	d840      	bhi.n	80017e0 <HAL_PCD_IRQHandler+0x5c4>
 800175e:	eba3 0802 	sub.w	r8, r3, r2
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	4598      	cmp	r8, r3
 8001766:	bf28      	it	cs
 8001768:	4698      	movcs	r8, r3
 800176a:	9b06      	ldr	r3, [sp, #24]
 800176c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001770:	f108 0803 	add.w	r8, r8, #3
 8001774:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 8001778:	ea4f 0898 	mov.w	r8, r8, lsr #2
 800177c:	9307      	str	r3, [sp, #28]
 800177e:	9b07      	ldr	r3, [sp, #28]
 8001780:	6999      	ldr	r1, [r3, #24]
 8001782:	b289      	uxth	r1, r1
 8001784:	4541      	cmp	r1, r8
 8001786:	e9d7 3209 	ldrd	r3, r2, [r7, #36]	@ 0x24
 800178a:	d327      	bcc.n	80017dc <HAL_PCD_IRQHandler+0x5c0>
 800178c:	4293      	cmp	r3, r2
 800178e:	d80b      	bhi.n	80017a8 <HAL_PCD_IRQHandler+0x58c>
 8001790:	9b06      	ldr	r3, [sp, #24]
 8001792:	f00a 000f 	and.w	r0, sl, #15
 8001796:	f8d3 2834 	ldr.w	r2, [r3, #2100]	@ 0x834
 800179a:	2101      	movs	r1, #1
 800179c:	4081      	lsls	r1, r0
 800179e:	ea22 0201 	bic.w	r2, r2, r1
 80017a2:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
 80017a6:	e01b      	b.n	80017e0 <HAL_PCD_IRQHandler+0x5c4>
 80017a8:	eba3 0902 	sub.w	r9, r3, r2
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	9a05      	ldr	r2, [sp, #20]
 80017b0:	9806      	ldr	r0, [sp, #24]
 80017b2:	4599      	cmp	r9, r3
 80017b4:	bf28      	it	cs
 80017b6:	4699      	movcs	r9, r3
 80017b8:	79a3      	ldrb	r3, [r4, #6]
 80017ba:	9300      	str	r3, [sp, #0]
 80017bc:	6a39      	ldr	r1, [r7, #32]
 80017be:	fa1f f389 	uxth.w	r3, r9
 80017c2:	f000 fef1 	bl	80025a8 <USB_WritePacket>
 80017c6:	6a3b      	ldr	r3, [r7, #32]
 80017c8:	444b      	add	r3, r9
 80017ca:	623b      	str	r3, [r7, #32]
 80017cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017ce:	f109 0803 	add.w	r8, r9, #3
 80017d2:	444b      	add	r3, r9
 80017d4:	ea4f 0898 	mov.w	r8, r8, lsr #2
 80017d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017da:	e7d0      	b.n	800177e <HAL_PCD_IRQHandler+0x562>
 80017dc:	4293      	cmp	r3, r2
 80017de:	d9d7      	bls.n	8001790 <HAL_PCD_IRQHandler+0x574>
 80017e0:	9b04      	ldr	r3, [sp, #16]
 80017e2:	085b      	lsrs	r3, r3, #1
 80017e4:	f10a 0a01 	add.w	sl, sl, #1
 80017e8:	9304      	str	r3, [sp, #16]
 80017ea:	3724      	adds	r7, #36	@ 0x24
 80017ec:	f10b 0b20 	add.w	fp, fp, #32
 80017f0:	e57f      	b.n	80012f2 <HAL_PCD_IRQHandler+0xd6>
 80017f2:	4620      	mov	r0, r4
 80017f4:	f002 f9ae 	bl	8003b54 <HAL_PCD_ResumeCallback>
 80017f8:	e594      	b.n	8001324 <HAL_PCD_IRQHandler+0x108>
 80017fa:	6099      	str	r1, [r3, #8]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
 8001808:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800180c:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8001810:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
 8001814:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001818:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 800181c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
 8001820:	9a03      	ldr	r2, [sp, #12]
 8001822:	3201      	adds	r2, #1
 8001824:	9203      	str	r2, [sp, #12]
 8001826:	3320      	adds	r3, #32
 8001828:	e5a3      	b.n	8001372 <HAL_PCD_IRQHandler+0x156>
 800182a:	bf00      	nop
 800182c:	4f54300a 	.word	0x4f54300a
 8001830:	4f54310a 	.word	0x4f54310a
 8001834:	696b      	ldr	r3, [r5, #20]
 8001836:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800183a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800183e:	616b      	str	r3, [r5, #20]
 8001840:	692b      	ldr	r3, [r5, #16]
 8001842:	f043 030b 	orr.w	r3, r3, #11
 8001846:	612b      	str	r3, [r5, #16]
 8001848:	e5a9      	b.n	800139e <HAL_PCD_IRQHandler+0x182>
 800184a:	69b3      	ldr	r3, [r6, #24]
 800184c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001850:	61b3      	str	r3, [r6, #24]
 8001852:	2701      	movs	r7, #1
 8001854:	f204 2857 	addw	r8, r4, #599	@ 0x257
 8001858:	f04f 0924 	mov.w	r9, #36	@ 0x24
 800185c:	7923      	ldrb	r3, [r4, #4]
 800185e:	42bb      	cmp	r3, r7
 8001860:	f67f addd 	bls.w	800141e <HAL_PCD_IRQHandler+0x202>
 8001864:	fb09 f307 	mul.w	r3, r9, r7
 8001868:	f818 3003 	ldrb.w	r3, [r8, r3]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d103      	bne.n	8001878 <HAL_PCD_IRQHandler+0x65c>
 8001870:	b2f9      	uxtb	r1, r7
 8001872:	4620      	mov	r0, r4
 8001874:	f7ff fcc1 	bl	80011fa <HAL_PCD_EP_Abort>
 8001878:	3701      	adds	r7, #1
 800187a:	e7ef      	b.n	800185c <HAL_PCD_IRQHandler+0x640>
 800187c:	f898 303c 	ldrb.w	r3, [r8, #60]	@ 0x3c
 8001880:	f8d9 2000 	ldr.w	r2, [r9]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d109      	bne.n	800189c <HAL_PCD_IRQHandler+0x680>
 8001888:	2a00      	cmp	r2, #0
 800188a:	da07      	bge.n	800189c <HAL_PCD_IRQHandler+0x680>
 800188c:	f067 017f 	orn	r1, r7, #127	@ 0x7f
 8001890:	f888 303b 	strb.w	r3, [r8, #59]	@ 0x3b
 8001894:	b2c9      	uxtb	r1, r1
 8001896:	4620      	mov	r0, r4
 8001898:	f7ff fcaf 	bl	80011fa <HAL_PCD_EP_Abort>
 800189c:	3701      	adds	r7, #1
 800189e:	f108 0824 	add.w	r8, r8, #36	@ 0x24
 80018a2:	f109 0920 	add.w	r9, r9, #32
 80018a6:	e5c3      	b.n	8001430 <HAL_PCD_IRQHandler+0x214>
 80018a8:	3101      	adds	r1, #1
 80018aa:	3324      	adds	r3, #36	@ 0x24
 80018ac:	3020      	adds	r0, #32
 80018ae:	e5d3      	b.n	8001458 <HAL_PCD_IRQHandler+0x23c>

080018b0 <HAL_PCDEx_SetTxFiFo>:
 80018b0:	6803      	ldr	r3, [r0, #0]
 80018b2:	b570      	push	{r4, r5, r6, lr}
 80018b4:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80018b6:	0412      	lsls	r2, r2, #16
 80018b8:	b919      	cbnz	r1, 80018c2 <HAL_PCDEx_SetTxFiFo+0x12>
 80018ba:	4302      	orrs	r2, r0
 80018bc:	629a      	str	r2, [r3, #40]	@ 0x28
 80018be:	2000      	movs	r0, #0
 80018c0:	bd70      	pop	{r4, r5, r6, pc}
 80018c2:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 80018c4:	1e4e      	subs	r6, r1, #1
 80018c6:	eb00 4014 	add.w	r0, r0, r4, lsr #16
 80018ca:	2400      	movs	r4, #0
 80018cc:	42b4      	cmp	r4, r6
 80018ce:	d305      	bcc.n	80018dc <HAL_PCDEx_SetTxFiFo+0x2c>
 80018d0:	313f      	adds	r1, #63	@ 0x3f
 80018d2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80018d6:	4302      	orrs	r2, r0
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	e7f0      	b.n	80018be <HAL_PCDEx_SetTxFiFo+0xe>
 80018dc:	f104 0540 	add.w	r5, r4, #64	@ 0x40
 80018e0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80018e4:	3401      	adds	r4, #1
 80018e6:	686d      	ldr	r5, [r5, #4]
 80018e8:	eb00 4015 	add.w	r0, r0, r5, lsr #16
 80018ec:	e7ee      	b.n	80018cc <HAL_PCDEx_SetTxFiFo+0x1c>

080018ee <HAL_PCDEx_SetRxFiFo>:
 80018ee:	6803      	ldr	r3, [r0, #0]
 80018f0:	2000      	movs	r0, #0
 80018f2:	6259      	str	r1, [r3, #36]	@ 0x24
 80018f4:	4770      	bx	lr

080018f6 <HAL_PCDEx_LPM_Callback>:
 80018f6:	4770      	bx	lr

080018f8 <HAL_RCC_OscConfig>:
 80018f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80018fc:	4604      	mov	r4, r0
 80018fe:	b340      	cbz	r0, 8001952 <HAL_RCC_OscConfig+0x5a>
 8001900:	6803      	ldr	r3, [r0, #0]
 8001902:	07de      	lsls	r6, r3, #31
 8001904:	d410      	bmi.n	8001928 <HAL_RCC_OscConfig+0x30>
 8001906:	6823      	ldr	r3, [r4, #0]
 8001908:	079d      	lsls	r5, r3, #30
 800190a:	d45b      	bmi.n	80019c4 <HAL_RCC_OscConfig+0xcc>
 800190c:	6823      	ldr	r3, [r4, #0]
 800190e:	0719      	lsls	r1, r3, #28
 8001910:	f100 809d 	bmi.w	8001a4e <HAL_RCC_OscConfig+0x156>
 8001914:	6823      	ldr	r3, [r4, #0]
 8001916:	075a      	lsls	r2, r3, #29
 8001918:	f100 80bd 	bmi.w	8001a96 <HAL_RCC_OscConfig+0x19e>
 800191c:	69a3      	ldr	r3, [r4, #24]
 800191e:	2b00      	cmp	r3, #0
 8001920:	f040 8124 	bne.w	8001b6c <HAL_RCC_OscConfig+0x274>
 8001924:	2000      	movs	r0, #0
 8001926:	e02c      	b.n	8001982 <HAL_RCC_OscConfig+0x8a>
 8001928:	4b8d      	ldr	r3, [pc, #564]	@ (8001b60 <HAL_RCC_OscConfig+0x268>)
 800192a:	689a      	ldr	r2, [r3, #8]
 800192c:	f002 020c 	and.w	r2, r2, #12
 8001930:	2a04      	cmp	r2, #4
 8001932:	d007      	beq.n	8001944 <HAL_RCC_OscConfig+0x4c>
 8001934:	689a      	ldr	r2, [r3, #8]
 8001936:	f002 020c 	and.w	r2, r2, #12
 800193a:	2a08      	cmp	r2, #8
 800193c:	d10b      	bne.n	8001956 <HAL_RCC_OscConfig+0x5e>
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	0259      	lsls	r1, r3, #9
 8001942:	d508      	bpl.n	8001956 <HAL_RCC_OscConfig+0x5e>
 8001944:	4b86      	ldr	r3, [pc, #536]	@ (8001b60 <HAL_RCC_OscConfig+0x268>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	039a      	lsls	r2, r3, #14
 800194a:	d5dc      	bpl.n	8001906 <HAL_RCC_OscConfig+0xe>
 800194c:	6863      	ldr	r3, [r4, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1d9      	bne.n	8001906 <HAL_RCC_OscConfig+0xe>
 8001952:	2001      	movs	r0, #1
 8001954:	e015      	b.n	8001982 <HAL_RCC_OscConfig+0x8a>
 8001956:	6863      	ldr	r3, [r4, #4]
 8001958:	4d81      	ldr	r5, [pc, #516]	@ (8001b60 <HAL_RCC_OscConfig+0x268>)
 800195a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800195e:	d113      	bne.n	8001988 <HAL_RCC_OscConfig+0x90>
 8001960:	682b      	ldr	r3, [r5, #0]
 8001962:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001966:	602b      	str	r3, [r5, #0]
 8001968:	f7fe ff90 	bl	800088c <HAL_GetTick>
 800196c:	4e7c      	ldr	r6, [pc, #496]	@ (8001b60 <HAL_RCC_OscConfig+0x268>)
 800196e:	4605      	mov	r5, r0
 8001970:	6833      	ldr	r3, [r6, #0]
 8001972:	039b      	lsls	r3, r3, #14
 8001974:	d4c7      	bmi.n	8001906 <HAL_RCC_OscConfig+0xe>
 8001976:	f7fe ff89 	bl	800088c <HAL_GetTick>
 800197a:	1b40      	subs	r0, r0, r5
 800197c:	2864      	cmp	r0, #100	@ 0x64
 800197e:	d9f7      	bls.n	8001970 <HAL_RCC_OscConfig+0x78>
 8001980:	2003      	movs	r0, #3
 8001982:	b002      	add	sp, #8
 8001984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001988:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800198c:	d104      	bne.n	8001998 <HAL_RCC_OscConfig+0xa0>
 800198e:	682b      	ldr	r3, [r5, #0]
 8001990:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001994:	602b      	str	r3, [r5, #0]
 8001996:	e7e3      	b.n	8001960 <HAL_RCC_OscConfig+0x68>
 8001998:	682a      	ldr	r2, [r5, #0]
 800199a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800199e:	602a      	str	r2, [r5, #0]
 80019a0:	682a      	ldr	r2, [r5, #0]
 80019a2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80019a6:	602a      	str	r2, [r5, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1dd      	bne.n	8001968 <HAL_RCC_OscConfig+0x70>
 80019ac:	f7fe ff6e 	bl	800088c <HAL_GetTick>
 80019b0:	4606      	mov	r6, r0
 80019b2:	682b      	ldr	r3, [r5, #0]
 80019b4:	039f      	lsls	r7, r3, #14
 80019b6:	d5a6      	bpl.n	8001906 <HAL_RCC_OscConfig+0xe>
 80019b8:	f7fe ff68 	bl	800088c <HAL_GetTick>
 80019bc:	1b80      	subs	r0, r0, r6
 80019be:	2864      	cmp	r0, #100	@ 0x64
 80019c0:	d9f7      	bls.n	80019b2 <HAL_RCC_OscConfig+0xba>
 80019c2:	e7dd      	b.n	8001980 <HAL_RCC_OscConfig+0x88>
 80019c4:	4b66      	ldr	r3, [pc, #408]	@ (8001b60 <HAL_RCC_OscConfig+0x268>)
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	f012 0f0c 	tst.w	r2, #12
 80019cc:	d007      	beq.n	80019de <HAL_RCC_OscConfig+0xe6>
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	f002 020c 	and.w	r2, r2, #12
 80019d4:	2a08      	cmp	r2, #8
 80019d6:	d111      	bne.n	80019fc <HAL_RCC_OscConfig+0x104>
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	025d      	lsls	r5, r3, #9
 80019dc:	d40e      	bmi.n	80019fc <HAL_RCC_OscConfig+0x104>
 80019de:	4a60      	ldr	r2, [pc, #384]	@ (8001b60 <HAL_RCC_OscConfig+0x268>)
 80019e0:	6813      	ldr	r3, [r2, #0]
 80019e2:	0799      	lsls	r1, r3, #30
 80019e4:	d502      	bpl.n	80019ec <HAL_RCC_OscConfig+0xf4>
 80019e6:	68e3      	ldr	r3, [r4, #12]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d1b2      	bne.n	8001952 <HAL_RCC_OscConfig+0x5a>
 80019ec:	6813      	ldr	r3, [r2, #0]
 80019ee:	6921      	ldr	r1, [r4, #16]
 80019f0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80019f4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80019f8:	6013      	str	r3, [r2, #0]
 80019fa:	e787      	b.n	800190c <HAL_RCC_OscConfig+0x14>
 80019fc:	68e2      	ldr	r2, [r4, #12]
 80019fe:	4b59      	ldr	r3, [pc, #356]	@ (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001a00:	b1b2      	cbz	r2, 8001a30 <HAL_RCC_OscConfig+0x138>
 8001a02:	2201      	movs	r2, #1
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	f7fe ff41 	bl	800088c <HAL_GetTick>
 8001a0a:	4d55      	ldr	r5, [pc, #340]	@ (8001b60 <HAL_RCC_OscConfig+0x268>)
 8001a0c:	4606      	mov	r6, r0
 8001a0e:	682b      	ldr	r3, [r5, #0]
 8001a10:	079b      	lsls	r3, r3, #30
 8001a12:	d507      	bpl.n	8001a24 <HAL_RCC_OscConfig+0x12c>
 8001a14:	682b      	ldr	r3, [r5, #0]
 8001a16:	6922      	ldr	r2, [r4, #16]
 8001a18:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001a1c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001a20:	602b      	str	r3, [r5, #0]
 8001a22:	e773      	b.n	800190c <HAL_RCC_OscConfig+0x14>
 8001a24:	f7fe ff32 	bl	800088c <HAL_GetTick>
 8001a28:	1b80      	subs	r0, r0, r6
 8001a2a:	2802      	cmp	r0, #2
 8001a2c:	d9ef      	bls.n	8001a0e <HAL_RCC_OscConfig+0x116>
 8001a2e:	e7a7      	b.n	8001980 <HAL_RCC_OscConfig+0x88>
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	f7fe ff2b 	bl	800088c <HAL_GetTick>
 8001a36:	4e4a      	ldr	r6, [pc, #296]	@ (8001b60 <HAL_RCC_OscConfig+0x268>)
 8001a38:	4605      	mov	r5, r0
 8001a3a:	6833      	ldr	r3, [r6, #0]
 8001a3c:	079f      	lsls	r7, r3, #30
 8001a3e:	f57f af65 	bpl.w	800190c <HAL_RCC_OscConfig+0x14>
 8001a42:	f7fe ff23 	bl	800088c <HAL_GetTick>
 8001a46:	1b40      	subs	r0, r0, r5
 8001a48:	2802      	cmp	r0, #2
 8001a4a:	d9f6      	bls.n	8001a3a <HAL_RCC_OscConfig+0x142>
 8001a4c:	e798      	b.n	8001980 <HAL_RCC_OscConfig+0x88>
 8001a4e:	6962      	ldr	r2, [r4, #20]
 8001a50:	4b44      	ldr	r3, [pc, #272]	@ (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001a52:	b182      	cbz	r2, 8001a76 <HAL_RCC_OscConfig+0x17e>
 8001a54:	2201      	movs	r2, #1
 8001a56:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
 8001a5a:	f7fe ff17 	bl	800088c <HAL_GetTick>
 8001a5e:	4e40      	ldr	r6, [pc, #256]	@ (8001b60 <HAL_RCC_OscConfig+0x268>)
 8001a60:	4605      	mov	r5, r0
 8001a62:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8001a64:	079b      	lsls	r3, r3, #30
 8001a66:	f53f af55 	bmi.w	8001914 <HAL_RCC_OscConfig+0x1c>
 8001a6a:	f7fe ff0f 	bl	800088c <HAL_GetTick>
 8001a6e:	1b40      	subs	r0, r0, r5
 8001a70:	2802      	cmp	r0, #2
 8001a72:	d9f6      	bls.n	8001a62 <HAL_RCC_OscConfig+0x16a>
 8001a74:	e784      	b.n	8001980 <HAL_RCC_OscConfig+0x88>
 8001a76:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
 8001a7a:	f7fe ff07 	bl	800088c <HAL_GetTick>
 8001a7e:	4e38      	ldr	r6, [pc, #224]	@ (8001b60 <HAL_RCC_OscConfig+0x268>)
 8001a80:	4605      	mov	r5, r0
 8001a82:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8001a84:	079f      	lsls	r7, r3, #30
 8001a86:	f57f af45 	bpl.w	8001914 <HAL_RCC_OscConfig+0x1c>
 8001a8a:	f7fe feff 	bl	800088c <HAL_GetTick>
 8001a8e:	1b40      	subs	r0, r0, r5
 8001a90:	2802      	cmp	r0, #2
 8001a92:	d9f6      	bls.n	8001a82 <HAL_RCC_OscConfig+0x18a>
 8001a94:	e774      	b.n	8001980 <HAL_RCC_OscConfig+0x88>
 8001a96:	4b32      	ldr	r3, [pc, #200]	@ (8001b60 <HAL_RCC_OscConfig+0x268>)
 8001a98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a9a:	f012 5280 	ands.w	r2, r2, #268435456	@ 0x10000000
 8001a9e:	d128      	bne.n	8001af2 <HAL_RCC_OscConfig+0x1fa>
 8001aa0:	9201      	str	r2, [sp, #4]
 8001aa2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001aa4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001aa8:	641a      	str	r2, [r3, #64]	@ 0x40
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ab0:	9301      	str	r3, [sp, #4]
 8001ab2:	9b01      	ldr	r3, [sp, #4]
 8001ab4:	2701      	movs	r7, #1
 8001ab6:	4d2c      	ldr	r5, [pc, #176]	@ (8001b68 <HAL_RCC_OscConfig+0x270>)
 8001ab8:	682b      	ldr	r3, [r5, #0]
 8001aba:	05d8      	lsls	r0, r3, #23
 8001abc:	d51b      	bpl.n	8001af6 <HAL_RCC_OscConfig+0x1fe>
 8001abe:	68a3      	ldr	r3, [r4, #8]
 8001ac0:	4d27      	ldr	r5, [pc, #156]	@ (8001b60 <HAL_RCC_OscConfig+0x268>)
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d127      	bne.n	8001b16 <HAL_RCC_OscConfig+0x21e>
 8001ac6:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	672b      	str	r3, [r5, #112]	@ 0x70
 8001ace:	f7fe fedd 	bl	800088c <HAL_GetTick>
 8001ad2:	4e23      	ldr	r6, [pc, #140]	@ (8001b60 <HAL_RCC_OscConfig+0x268>)
 8001ad4:	4605      	mov	r5, r0
 8001ad6:	f241 3888 	movw	r8, #5000	@ 0x1388
 8001ada:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8001adc:	079a      	lsls	r2, r3, #30
 8001ade:	d539      	bpl.n	8001b54 <HAL_RCC_OscConfig+0x25c>
 8001ae0:	2f00      	cmp	r7, #0
 8001ae2:	f43f af1b 	beq.w	800191c <HAL_RCC_OscConfig+0x24>
 8001ae6:	4a1e      	ldr	r2, [pc, #120]	@ (8001b60 <HAL_RCC_OscConfig+0x268>)
 8001ae8:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001aea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001aee:	6413      	str	r3, [r2, #64]	@ 0x40
 8001af0:	e714      	b.n	800191c <HAL_RCC_OscConfig+0x24>
 8001af2:	2700      	movs	r7, #0
 8001af4:	e7df      	b.n	8001ab6 <HAL_RCC_OscConfig+0x1be>
 8001af6:	682b      	ldr	r3, [r5, #0]
 8001af8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001afc:	602b      	str	r3, [r5, #0]
 8001afe:	f7fe fec5 	bl	800088c <HAL_GetTick>
 8001b02:	4606      	mov	r6, r0
 8001b04:	682b      	ldr	r3, [r5, #0]
 8001b06:	05d9      	lsls	r1, r3, #23
 8001b08:	d4d9      	bmi.n	8001abe <HAL_RCC_OscConfig+0x1c6>
 8001b0a:	f7fe febf 	bl	800088c <HAL_GetTick>
 8001b0e:	1b80      	subs	r0, r0, r6
 8001b10:	2802      	cmp	r0, #2
 8001b12:	d9f7      	bls.n	8001b04 <HAL_RCC_OscConfig+0x20c>
 8001b14:	e734      	b.n	8001980 <HAL_RCC_OscConfig+0x88>
 8001b16:	2b05      	cmp	r3, #5
 8001b18:	d104      	bne.n	8001b24 <HAL_RCC_OscConfig+0x22c>
 8001b1a:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8001b1c:	f043 0304 	orr.w	r3, r3, #4
 8001b20:	672b      	str	r3, [r5, #112]	@ 0x70
 8001b22:	e7d0      	b.n	8001ac6 <HAL_RCC_OscConfig+0x1ce>
 8001b24:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 8001b26:	f022 0201 	bic.w	r2, r2, #1
 8001b2a:	672a      	str	r2, [r5, #112]	@ 0x70
 8001b2c:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 8001b2e:	f022 0204 	bic.w	r2, r2, #4
 8001b32:	672a      	str	r2, [r5, #112]	@ 0x70
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1ca      	bne.n	8001ace <HAL_RCC_OscConfig+0x1d6>
 8001b38:	f7fe fea8 	bl	800088c <HAL_GetTick>
 8001b3c:	f241 3888 	movw	r8, #5000	@ 0x1388
 8001b40:	4606      	mov	r6, r0
 8001b42:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8001b44:	079b      	lsls	r3, r3, #30
 8001b46:	d5cb      	bpl.n	8001ae0 <HAL_RCC_OscConfig+0x1e8>
 8001b48:	f7fe fea0 	bl	800088c <HAL_GetTick>
 8001b4c:	1b80      	subs	r0, r0, r6
 8001b4e:	4540      	cmp	r0, r8
 8001b50:	d9f7      	bls.n	8001b42 <HAL_RCC_OscConfig+0x24a>
 8001b52:	e715      	b.n	8001980 <HAL_RCC_OscConfig+0x88>
 8001b54:	f7fe fe9a 	bl	800088c <HAL_GetTick>
 8001b58:	1b40      	subs	r0, r0, r5
 8001b5a:	4540      	cmp	r0, r8
 8001b5c:	d9bd      	bls.n	8001ada <HAL_RCC_OscConfig+0x1e2>
 8001b5e:	e70f      	b.n	8001980 <HAL_RCC_OscConfig+0x88>
 8001b60:	40023800 	.word	0x40023800
 8001b64:	42470000 	.word	0x42470000
 8001b68:	40007000 	.word	0x40007000
 8001b6c:	4d37      	ldr	r5, [pc, #220]	@ (8001c4c <HAL_RCC_OscConfig+0x354>)
 8001b6e:	68aa      	ldr	r2, [r5, #8]
 8001b70:	f002 020c 	and.w	r2, r2, #12
 8001b74:	2a08      	cmp	r2, #8
 8001b76:	d03e      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x2fe>
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	4b35      	ldr	r3, [pc, #212]	@ (8001c50 <HAL_RCC_OscConfig+0x358>)
 8001b7c:	f04f 0200 	mov.w	r2, #0
 8001b80:	661a      	str	r2, [r3, #96]	@ 0x60
 8001b82:	d12b      	bne.n	8001bdc <HAL_RCC_OscConfig+0x2e4>
 8001b84:	f7fe fe82 	bl	800088c <HAL_GetTick>
 8001b88:	4606      	mov	r6, r0
 8001b8a:	682b      	ldr	r3, [r5, #0]
 8001b8c:	0199      	lsls	r1, r3, #6
 8001b8e:	d41f      	bmi.n	8001bd0 <HAL_RCC_OscConfig+0x2d8>
 8001b90:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001b98:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001b9c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001b9e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001ba2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001ba4:	0852      	lsrs	r2, r2, #1
 8001ba6:	3a01      	subs	r2, #1
 8001ba8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001bac:	606b      	str	r3, [r5, #4]
 8001bae:	4b28      	ldr	r3, [pc, #160]	@ (8001c50 <HAL_RCC_OscConfig+0x358>)
 8001bb0:	4d26      	ldr	r5, [pc, #152]	@ (8001c4c <HAL_RCC_OscConfig+0x354>)
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	661a      	str	r2, [r3, #96]	@ 0x60
 8001bb6:	f7fe fe69 	bl	800088c <HAL_GetTick>
 8001bba:	4604      	mov	r4, r0
 8001bbc:	682b      	ldr	r3, [r5, #0]
 8001bbe:	019a      	lsls	r2, r3, #6
 8001bc0:	f53f aeb0 	bmi.w	8001924 <HAL_RCC_OscConfig+0x2c>
 8001bc4:	f7fe fe62 	bl	800088c <HAL_GetTick>
 8001bc8:	1b00      	subs	r0, r0, r4
 8001bca:	2802      	cmp	r0, #2
 8001bcc:	d9f6      	bls.n	8001bbc <HAL_RCC_OscConfig+0x2c4>
 8001bce:	e6d7      	b.n	8001980 <HAL_RCC_OscConfig+0x88>
 8001bd0:	f7fe fe5c 	bl	800088c <HAL_GetTick>
 8001bd4:	1b80      	subs	r0, r0, r6
 8001bd6:	2802      	cmp	r0, #2
 8001bd8:	d9d7      	bls.n	8001b8a <HAL_RCC_OscConfig+0x292>
 8001bda:	e6d1      	b.n	8001980 <HAL_RCC_OscConfig+0x88>
 8001bdc:	f7fe fe56 	bl	800088c <HAL_GetTick>
 8001be0:	4604      	mov	r4, r0
 8001be2:	682b      	ldr	r3, [r5, #0]
 8001be4:	019b      	lsls	r3, r3, #6
 8001be6:	f57f ae9d 	bpl.w	8001924 <HAL_RCC_OscConfig+0x2c>
 8001bea:	f7fe fe4f 	bl	800088c <HAL_GetTick>
 8001bee:	1b00      	subs	r0, r0, r4
 8001bf0:	2802      	cmp	r0, #2
 8001bf2:	d9f6      	bls.n	8001be2 <HAL_RCC_OscConfig+0x2ea>
 8001bf4:	e6c4      	b.n	8001980 <HAL_RCC_OscConfig+0x88>
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	f43f aeab 	beq.w	8001952 <HAL_RCC_OscConfig+0x5a>
 8001bfc:	686b      	ldr	r3, [r5, #4]
 8001bfe:	69e2      	ldr	r2, [r4, #28]
 8001c00:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8001c04:	4291      	cmp	r1, r2
 8001c06:	f47f aea4 	bne.w	8001952 <HAL_RCC_OscConfig+0x5a>
 8001c0a:	6a21      	ldr	r1, [r4, #32]
 8001c0c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001c10:	428a      	cmp	r2, r1
 8001c12:	f47f ae9e 	bne.w	8001952 <HAL_RCC_OscConfig+0x5a>
 8001c16:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001c18:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8001c1c:	401a      	ands	r2, r3
 8001c1e:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001c22:	f47f ae96 	bne.w	8001952 <HAL_RCC_OscConfig+0x5a>
 8001c26:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001c28:	0852      	lsrs	r2, r2, #1
 8001c2a:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8001c2e:	3a01      	subs	r2, #1
 8001c30:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001c34:	f47f ae8d 	bne.w	8001952 <HAL_RCC_OscConfig+0x5a>
 8001c38:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001c3a:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8001c3e:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8001c42:	bf14      	ite	ne
 8001c44:	2001      	movne	r0, #1
 8001c46:	2000      	moveq	r0, #0
 8001c48:	e69b      	b.n	8001982 <HAL_RCC_OscConfig+0x8a>
 8001c4a:	bf00      	nop
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	42470000 	.word	0x42470000

08001c54 <HAL_RCC_GetSysClockFreq>:
 8001c54:	4913      	ldr	r1, [pc, #76]	@ (8001ca4 <HAL_RCC_GetSysClockFreq+0x50>)
 8001c56:	b508      	push	{r3, lr}
 8001c58:	688b      	ldr	r3, [r1, #8]
 8001c5a:	f003 030c 	and.w	r3, r3, #12
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	d01c      	beq.n	8001c9c <HAL_RCC_GetSysClockFreq+0x48>
 8001c62:	2b08      	cmp	r3, #8
 8001c64:	d11c      	bne.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x4c>
 8001c66:	684a      	ldr	r2, [r1, #4]
 8001c68:	684b      	ldr	r3, [r1, #4]
 8001c6a:	6849      	ldr	r1, [r1, #4]
 8001c6c:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
 8001c70:	bf14      	ite	ne
 8001c72:	480d      	ldrne	r0, [pc, #52]	@ (8001ca8 <HAL_RCC_GetSysClockFreq+0x54>)
 8001c74:	480d      	ldreq	r0, [pc, #52]	@ (8001cac <HAL_RCC_GetSysClockFreq+0x58>)
 8001c76:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001c7a:	bf18      	it	ne
 8001c7c:	2300      	movne	r3, #0
 8001c7e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8001c82:	fba1 0100 	umull	r0, r1, r1, r0
 8001c86:	f7fe faaf 	bl	80001e8 <__aeabi_uldivmod>
 8001c8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ca4 <HAL_RCC_GetSysClockFreq+0x50>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001c92:	3301      	adds	r3, #1
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c9a:	bd08      	pop	{r3, pc}
 8001c9c:	4802      	ldr	r0, [pc, #8]	@ (8001ca8 <HAL_RCC_GetSysClockFreq+0x54>)
 8001c9e:	e7fc      	b.n	8001c9a <HAL_RCC_GetSysClockFreq+0x46>
 8001ca0:	4802      	ldr	r0, [pc, #8]	@ (8001cac <HAL_RCC_GetSysClockFreq+0x58>)
 8001ca2:	e7fa      	b.n	8001c9a <HAL_RCC_GetSysClockFreq+0x46>
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	017d7840 	.word	0x017d7840
 8001cac:	00f42400 	.word	0x00f42400

08001cb0 <HAL_RCC_ClockConfig>:
 8001cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cb4:	460d      	mov	r5, r1
 8001cb6:	4604      	mov	r4, r0
 8001cb8:	b910      	cbnz	r0, 8001cc0 <HAL_RCC_ClockConfig+0x10>
 8001cba:	2001      	movs	r0, #1
 8001cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001cc0:	4b43      	ldr	r3, [pc, #268]	@ (8001dd0 <HAL_RCC_ClockConfig+0x120>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	f002 0207 	and.w	r2, r2, #7
 8001cc8:	428a      	cmp	r2, r1
 8001cca:	d328      	bcc.n	8001d1e <HAL_RCC_ClockConfig+0x6e>
 8001ccc:	6821      	ldr	r1, [r4, #0]
 8001cce:	078f      	lsls	r7, r1, #30
 8001cd0:	d42d      	bmi.n	8001d2e <HAL_RCC_ClockConfig+0x7e>
 8001cd2:	07c8      	lsls	r0, r1, #31
 8001cd4:	d440      	bmi.n	8001d58 <HAL_RCC_ClockConfig+0xa8>
 8001cd6:	4b3e      	ldr	r3, [pc, #248]	@ (8001dd0 <HAL_RCC_ClockConfig+0x120>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	f002 0207 	and.w	r2, r2, #7
 8001cde:	42aa      	cmp	r2, r5
 8001ce0:	d865      	bhi.n	8001dae <HAL_RCC_ClockConfig+0xfe>
 8001ce2:	6822      	ldr	r2, [r4, #0]
 8001ce4:	0751      	lsls	r1, r2, #29
 8001ce6:	d46b      	bmi.n	8001dc0 <HAL_RCC_ClockConfig+0x110>
 8001ce8:	0713      	lsls	r3, r2, #28
 8001cea:	d507      	bpl.n	8001cfc <HAL_RCC_ClockConfig+0x4c>
 8001cec:	4a39      	ldr	r2, [pc, #228]	@ (8001dd4 <HAL_RCC_ClockConfig+0x124>)
 8001cee:	6921      	ldr	r1, [r4, #16]
 8001cf0:	6893      	ldr	r3, [r2, #8]
 8001cf2:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001cf6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001cfa:	6093      	str	r3, [r2, #8]
 8001cfc:	f7ff ffaa 	bl	8001c54 <HAL_RCC_GetSysClockFreq>
 8001d00:	4b34      	ldr	r3, [pc, #208]	@ (8001dd4 <HAL_RCC_ClockConfig+0x124>)
 8001d02:	4a35      	ldr	r2, [pc, #212]	@ (8001dd8 <HAL_RCC_ClockConfig+0x128>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001d0a:	5cd3      	ldrb	r3, [r2, r3]
 8001d0c:	40d8      	lsrs	r0, r3
 8001d0e:	4b33      	ldr	r3, [pc, #204]	@ (8001ddc <HAL_RCC_ClockConfig+0x12c>)
 8001d10:	6018      	str	r0, [r3, #0]
 8001d12:	4b33      	ldr	r3, [pc, #204]	@ (8001de0 <HAL_RCC_ClockConfig+0x130>)
 8001d14:	6818      	ldr	r0, [r3, #0]
 8001d16:	f7fe fd6f 	bl	80007f8 <HAL_InitTick>
 8001d1a:	2000      	movs	r0, #0
 8001d1c:	e7ce      	b.n	8001cbc <HAL_RCC_ClockConfig+0xc>
 8001d1e:	b2ca      	uxtb	r2, r1
 8001d20:	701a      	strb	r2, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	428b      	cmp	r3, r1
 8001d2a:	d1c6      	bne.n	8001cba <HAL_RCC_ClockConfig+0xa>
 8001d2c:	e7ce      	b.n	8001ccc <HAL_RCC_ClockConfig+0x1c>
 8001d2e:	4b29      	ldr	r3, [pc, #164]	@ (8001dd4 <HAL_RCC_ClockConfig+0x124>)
 8001d30:	f011 0f04 	tst.w	r1, #4
 8001d34:	bf1e      	ittt	ne
 8001d36:	689a      	ldrne	r2, [r3, #8]
 8001d38:	f442 52e0 	orrne.w	r2, r2, #7168	@ 0x1c00
 8001d3c:	609a      	strne	r2, [r3, #8]
 8001d3e:	070e      	lsls	r6, r1, #28
 8001d40:	bf42      	ittt	mi
 8001d42:	689a      	ldrmi	r2, [r3, #8]
 8001d44:	f442 4260 	orrmi.w	r2, r2, #57344	@ 0xe000
 8001d48:	609a      	strmi	r2, [r3, #8]
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	68a0      	ldr	r0, [r4, #8]
 8001d4e:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8001d52:	4302      	orrs	r2, r0
 8001d54:	609a      	str	r2, [r3, #8]
 8001d56:	e7bc      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x22>
 8001d58:	6862      	ldr	r2, [r4, #4]
 8001d5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001dd4 <HAL_RCC_ClockConfig+0x124>)
 8001d5c:	2a01      	cmp	r2, #1
 8001d5e:	d11c      	bne.n	8001d9a <HAL_RCC_ClockConfig+0xea>
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001d66:	d0a8      	beq.n	8001cba <HAL_RCC_ClockConfig+0xa>
 8001d68:	4e1a      	ldr	r6, [pc, #104]	@ (8001dd4 <HAL_RCC_ClockConfig+0x124>)
 8001d6a:	68b3      	ldr	r3, [r6, #8]
 8001d6c:	f023 0303 	bic.w	r3, r3, #3
 8001d70:	4313      	orrs	r3, r2
 8001d72:	60b3      	str	r3, [r6, #8]
 8001d74:	f7fe fd8a 	bl	800088c <HAL_GetTick>
 8001d78:	f241 3888 	movw	r8, #5000	@ 0x1388
 8001d7c:	4607      	mov	r7, r0
 8001d7e:	68b3      	ldr	r3, [r6, #8]
 8001d80:	6862      	ldr	r2, [r4, #4]
 8001d82:	f003 030c 	and.w	r3, r3, #12
 8001d86:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001d8a:	d0a4      	beq.n	8001cd6 <HAL_RCC_ClockConfig+0x26>
 8001d8c:	f7fe fd7e 	bl	800088c <HAL_GetTick>
 8001d90:	1bc0      	subs	r0, r0, r7
 8001d92:	4540      	cmp	r0, r8
 8001d94:	d9f3      	bls.n	8001d7e <HAL_RCC_ClockConfig+0xce>
 8001d96:	2003      	movs	r0, #3
 8001d98:	e790      	b.n	8001cbc <HAL_RCC_ClockConfig+0xc>
 8001d9a:	1e91      	subs	r1, r2, #2
 8001d9c:	2901      	cmp	r1, #1
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	d802      	bhi.n	8001da8 <HAL_RCC_ClockConfig+0xf8>
 8001da2:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001da6:	e7de      	b.n	8001d66 <HAL_RCC_ClockConfig+0xb6>
 8001da8:	f013 0f02 	tst.w	r3, #2
 8001dac:	e7db      	b.n	8001d66 <HAL_RCC_ClockConfig+0xb6>
 8001dae:	b2ea      	uxtb	r2, r5
 8001db0:	701a      	strb	r2, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0307 	and.w	r3, r3, #7
 8001db8:	42ab      	cmp	r3, r5
 8001dba:	f47f af7e 	bne.w	8001cba <HAL_RCC_ClockConfig+0xa>
 8001dbe:	e790      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x32>
 8001dc0:	4904      	ldr	r1, [pc, #16]	@ (8001dd4 <HAL_RCC_ClockConfig+0x124>)
 8001dc2:	68e0      	ldr	r0, [r4, #12]
 8001dc4:	688b      	ldr	r3, [r1, #8]
 8001dc6:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8001dca:	4303      	orrs	r3, r0
 8001dcc:	608b      	str	r3, [r1, #8]
 8001dce:	e78b      	b.n	8001ce8 <HAL_RCC_ClockConfig+0x38>
 8001dd0:	40023c00 	.word	0x40023c00
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	08003d18 	.word	0x08003d18
 8001ddc:	20000000 	.word	0x20000000
 8001de0:	20000008 	.word	0x20000008

08001de4 <HAL_RCC_GetHCLKFreq>:
 8001de4:	4b01      	ldr	r3, [pc, #4]	@ (8001dec <HAL_RCC_GetHCLKFreq+0x8>)
 8001de6:	6818      	ldr	r0, [r3, #0]
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	20000000 	.word	0x20000000

08001df0 <HAL_RCCEx_PeriphCLKConfig>:
 8001df0:	6803      	ldr	r3, [r0, #0]
 8001df2:	f013 0f05 	tst.w	r3, #5
 8001df6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001df8:	4604      	mov	r4, r0
 8001dfa:	d139      	bne.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x80>
 8001dfc:	6823      	ldr	r3, [r4, #0]
 8001dfe:	079a      	lsls	r2, r3, #30
 8001e00:	d531      	bpl.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e02:	2300      	movs	r3, #0
 8001e04:	9301      	str	r3, [sp, #4]
 8001e06:	4b47      	ldr	r3, [pc, #284]	@ (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e08:	4d47      	ldr	r5, [pc, #284]	@ (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8001e0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e0c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001e10:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e18:	9301      	str	r3, [sp, #4]
 8001e1a:	9b01      	ldr	r3, [sp, #4]
 8001e1c:	682b      	ldr	r3, [r5, #0]
 8001e1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e22:	602b      	str	r3, [r5, #0]
 8001e24:	f7fe fd32 	bl	800088c <HAL_GetTick>
 8001e28:	4606      	mov	r6, r0
 8001e2a:	682b      	ldr	r3, [r5, #0]
 8001e2c:	05d8      	lsls	r0, r3, #23
 8001e2e:	d54a      	bpl.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
 8001e30:	4d3c      	ldr	r5, [pc, #240]	@ (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e32:	6922      	ldr	r2, [r4, #16]
 8001e34:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8001e36:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8001e3a:	d14a      	bne.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001e3c:	6923      	ldr	r3, [r4, #16]
 8001e3e:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8001e42:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8001e46:	4a37      	ldr	r2, [pc, #220]	@ (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e48:	d163      	bne.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x122>
 8001e4a:	6891      	ldr	r1, [r2, #8]
 8001e4c:	f023 4070 	bic.w	r0, r3, #4026531840	@ 0xf0000000
 8001e50:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 8001e54:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 8001e58:	4301      	orrs	r1, r0
 8001e5a:	6091      	str	r1, [r2, #8]
 8001e5c:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8001e5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e62:	430b      	orrs	r3, r1
 8001e64:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e66:	6823      	ldr	r3, [r4, #0]
 8001e68:	071b      	lsls	r3, r3, #28
 8001e6a:	d456      	bmi.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	e028      	b.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
 8001e70:	4b2e      	ldr	r3, [pc, #184]	@ (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001e72:	4e2c      	ldr	r6, [pc, #176]	@ (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	669a      	str	r2, [r3, #104]	@ 0x68
 8001e78:	f7fe fd08 	bl	800088c <HAL_GetTick>
 8001e7c:	4605      	mov	r5, r0
 8001e7e:	6833      	ldr	r3, [r6, #0]
 8001e80:	011b      	lsls	r3, r3, #4
 8001e82:	d418      	bmi.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
 8001e84:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8001e88:	071b      	lsls	r3, r3, #28
 8001e8a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001e8e:	6862      	ldr	r2, [r4, #4]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	f8c6 3084 	str.w	r3, [r6, #132]	@ 0x84
 8001e96:	4b25      	ldr	r3, [pc, #148]	@ (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001e98:	4e22      	ldr	r6, [pc, #136]	@ (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	669a      	str	r2, [r3, #104]	@ 0x68
 8001e9e:	f7fe fcf5 	bl	800088c <HAL_GetTick>
 8001ea2:	4605      	mov	r5, r0
 8001ea4:	6833      	ldr	r3, [r6, #0]
 8001ea6:	011f      	lsls	r7, r3, #4
 8001ea8:	d4a8      	bmi.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0xc>
 8001eaa:	f7fe fcef 	bl	800088c <HAL_GetTick>
 8001eae:	1b40      	subs	r0, r0, r5
 8001eb0:	2802      	cmp	r0, #2
 8001eb2:	d9f7      	bls.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8001eb4:	e004      	b.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001eb6:	f7fe fce9 	bl	800088c <HAL_GetTick>
 8001eba:	1b40      	subs	r0, r0, r5
 8001ebc:	2802      	cmp	r0, #2
 8001ebe:	d9de      	bls.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x8e>
 8001ec0:	2003      	movs	r0, #3
 8001ec2:	b003      	add	sp, #12
 8001ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ec6:	f7fe fce1 	bl	800088c <HAL_GetTick>
 8001eca:	1b80      	subs	r0, r0, r6
 8001ecc:	2802      	cmp	r0, #2
 8001ece:	d9ac      	bls.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8001ed0:	e7f6      	b.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001ed2:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d0b0      	beq.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x4c>
 8001eda:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8001edc:	4a13      	ldr	r2, [pc, #76]	@ (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001ede:	2101      	movs	r1, #1
 8001ee0:	f8c2 1e40 	str.w	r1, [r2, #3648]	@ 0xe40
 8001ee4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ee8:	2100      	movs	r1, #0
 8001eea:	f8c2 1e40 	str.w	r1, [r2, #3648]	@ 0xe40
 8001eee:	672b      	str	r3, [r5, #112]	@ 0x70
 8001ef0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8001ef2:	07d9      	lsls	r1, r3, #31
 8001ef4:	d5a2      	bpl.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x4c>
 8001ef6:	f7fe fcc9 	bl	800088c <HAL_GetTick>
 8001efa:	f241 3788 	movw	r7, #5000	@ 0x1388
 8001efe:	4606      	mov	r6, r0
 8001f00:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8001f02:	079a      	lsls	r2, r3, #30
 8001f04:	d49a      	bmi.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x4c>
 8001f06:	f7fe fcc1 	bl	800088c <HAL_GetTick>
 8001f0a:	1b80      	subs	r0, r0, r6
 8001f0c:	42b8      	cmp	r0, r7
 8001f0e:	d9f7      	bls.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8001f10:	e7d6      	b.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001f12:	6891      	ldr	r1, [r2, #8]
 8001f14:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 8001f18:	e79f      	b.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8001f1a:	4b05      	ldr	r3, [pc, #20]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001f1c:	7d22      	ldrb	r2, [r4, #20]
 8001f1e:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
 8001f22:	e7a3      	b.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001f24:	40023800 	.word	0x40023800
 8001f28:	40007000 	.word	0x40007000
 8001f2c:	42470000 	.word	0x42470000
 8001f30:	42471000 	.word	0x42471000

08001f34 <HAL_RTC_WaitForSynchro>:
 8001f34:	b538      	push	{r3, r4, r5, lr}
 8001f36:	6803      	ldr	r3, [r0, #0]
 8001f38:	4a09      	ldr	r2, [pc, #36]	@ (8001f60 <HAL_RTC_WaitForSynchro+0x2c>)
 8001f3a:	60da      	str	r2, [r3, #12]
 8001f3c:	4604      	mov	r4, r0
 8001f3e:	f7fe fca5 	bl	800088c <HAL_GetTick>
 8001f42:	4605      	mov	r5, r0
 8001f44:	6823      	ldr	r3, [r4, #0]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	069b      	lsls	r3, r3, #26
 8001f4a:	d501      	bpl.n	8001f50 <HAL_RTC_WaitForSynchro+0x1c>
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	bd38      	pop	{r3, r4, r5, pc}
 8001f50:	f7fe fc9c 	bl	800088c <HAL_GetTick>
 8001f54:	1b40      	subs	r0, r0, r5
 8001f56:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8001f5a:	d9f3      	bls.n	8001f44 <HAL_RTC_WaitForSynchro+0x10>
 8001f5c:	2003      	movs	r0, #3
 8001f5e:	e7f6      	b.n	8001f4e <HAL_RTC_WaitForSynchro+0x1a>
 8001f60:	00013f5f 	.word	0x00013f5f

08001f64 <RTC_EnterInitMode>:
 8001f64:	6803      	ldr	r3, [r0, #0]
 8001f66:	b570      	push	{r4, r5, r6, lr}
 8001f68:	68dc      	ldr	r4, [r3, #12]
 8001f6a:	f014 0440 	ands.w	r4, r4, #64	@ 0x40
 8001f6e:	4605      	mov	r5, r0
 8001f70:	d117      	bne.n	8001fa2 <RTC_EnterInitMode+0x3e>
 8001f72:	68da      	ldr	r2, [r3, #12]
 8001f74:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001f78:	60da      	str	r2, [r3, #12]
 8001f7a:	f7fe fc87 	bl	800088c <HAL_GetTick>
 8001f7e:	4606      	mov	r6, r0
 8001f80:	682b      	ldr	r3, [r5, #0]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	065b      	lsls	r3, r3, #25
 8001f86:	d400      	bmi.n	8001f8a <RTC_EnterInitMode+0x26>
 8001f88:	b10c      	cbz	r4, 8001f8e <RTC_EnterInitMode+0x2a>
 8001f8a:	4620      	mov	r0, r4
 8001f8c:	bd70      	pop	{r4, r5, r6, pc}
 8001f8e:	f7fe fc7d 	bl	800088c <HAL_GetTick>
 8001f92:	1b80      	subs	r0, r0, r6
 8001f94:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8001f98:	bf82      	ittt	hi
 8001f9a:	2304      	movhi	r3, #4
 8001f9c:	776b      	strbhi	r3, [r5, #29]
 8001f9e:	2401      	movhi	r4, #1
 8001fa0:	e7ee      	b.n	8001f80 <RTC_EnterInitMode+0x1c>
 8001fa2:	2400      	movs	r4, #0
 8001fa4:	e7f1      	b.n	8001f8a <RTC_EnterInitMode+0x26>

08001fa6 <RTC_ExitInitMode>:
 8001fa6:	6803      	ldr	r3, [r0, #0]
 8001fa8:	68da      	ldr	r2, [r3, #12]
 8001faa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001fae:	b510      	push	{r4, lr}
 8001fb0:	60da      	str	r2, [r3, #12]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	069b      	lsls	r3, r3, #26
 8001fb6:	4604      	mov	r4, r0
 8001fb8:	d501      	bpl.n	8001fbe <RTC_ExitInitMode+0x18>
 8001fba:	2000      	movs	r0, #0
 8001fbc:	bd10      	pop	{r4, pc}
 8001fbe:	f7ff ffb9 	bl	8001f34 <HAL_RTC_WaitForSynchro>
 8001fc2:	2800      	cmp	r0, #0
 8001fc4:	d0f9      	beq.n	8001fba <RTC_ExitInitMode+0x14>
 8001fc6:	2304      	movs	r3, #4
 8001fc8:	7763      	strb	r3, [r4, #29]
 8001fca:	2001      	movs	r0, #1
 8001fcc:	e7f6      	b.n	8001fbc <RTC_ExitInitMode+0x16>

08001fce <HAL_RTC_Init>:
 8001fce:	b510      	push	{r4, lr}
 8001fd0:	4604      	mov	r4, r0
 8001fd2:	2800      	cmp	r0, #0
 8001fd4:	d041      	beq.n	800205a <HAL_RTC_Init+0x8c>
 8001fd6:	7f43      	ldrb	r3, [r0, #29]
 8001fd8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001fdc:	b913      	cbnz	r3, 8001fe4 <HAL_RTC_Init+0x16>
 8001fde:	7702      	strb	r2, [r0, #28]
 8001fe0:	f7fe fb84 	bl	80006ec <HAL_RTC_MspInit>
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	7763      	strb	r3, [r4, #29]
 8001fe8:	6823      	ldr	r3, [r4, #0]
 8001fea:	68da      	ldr	r2, [r3, #12]
 8001fec:	06d2      	lsls	r2, r2, #27
 8001fee:	d503      	bpl.n	8001ff8 <HAL_RTC_Init+0x2a>
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	7763      	strb	r3, [r4, #29]
 8001ff4:	2000      	movs	r0, #0
 8001ff6:	bd10      	pop	{r4, pc}
 8001ff8:	22ca      	movs	r2, #202	@ 0xca
 8001ffa:	625a      	str	r2, [r3, #36]	@ 0x24
 8001ffc:	2253      	movs	r2, #83	@ 0x53
 8001ffe:	625a      	str	r2, [r3, #36]	@ 0x24
 8002000:	4620      	mov	r0, r4
 8002002:	f7ff ffaf 	bl	8001f64 <RTC_EnterInitMode>
 8002006:	bb10      	cbnz	r0, 800204e <HAL_RTC_Init+0x80>
 8002008:	6823      	ldr	r3, [r4, #0]
 800200a:	6920      	ldr	r0, [r4, #16]
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	f422 02e0 	bic.w	r2, r2, #7340032	@ 0x700000
 8002012:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002016:	609a      	str	r2, [r3, #8]
 8002018:	6862      	ldr	r2, [r4, #4]
 800201a:	6899      	ldr	r1, [r3, #8]
 800201c:	4302      	orrs	r2, r0
 800201e:	6960      	ldr	r0, [r4, #20]
 8002020:	4302      	orrs	r2, r0
 8002022:	430a      	orrs	r2, r1
 8002024:	609a      	str	r2, [r3, #8]
 8002026:	68e2      	ldr	r2, [r4, #12]
 8002028:	611a      	str	r2, [r3, #16]
 800202a:	691a      	ldr	r2, [r3, #16]
 800202c:	68a1      	ldr	r1, [r4, #8]
 800202e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002032:	611a      	str	r2, [r3, #16]
 8002034:	4620      	mov	r0, r4
 8002036:	f7ff ffb6 	bl	8001fa6 <RTC_ExitInitMode>
 800203a:	b940      	cbnz	r0, 800204e <HAL_RTC_Init+0x80>
 800203c:	6823      	ldr	r3, [r4, #0]
 800203e:	69a1      	ldr	r1, [r4, #24]
 8002040:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002042:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002046:	641a      	str	r2, [r3, #64]	@ 0x40
 8002048:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800204a:	430a      	orrs	r2, r1
 800204c:	641a      	str	r2, [r3, #64]	@ 0x40
 800204e:	6823      	ldr	r3, [r4, #0]
 8002050:	22ff      	movs	r2, #255	@ 0xff
 8002052:	625a      	str	r2, [r3, #36]	@ 0x24
 8002054:	2800      	cmp	r0, #0
 8002056:	d0cb      	beq.n	8001ff0 <HAL_RTC_Init+0x22>
 8002058:	e7cd      	b.n	8001ff6 <HAL_RTC_Init+0x28>
 800205a:	2001      	movs	r0, #1
 800205c:	e7cb      	b.n	8001ff6 <HAL_RTC_Init+0x28>

0800205e <USB_CoreReset>:
 800205e:	b082      	sub	sp, #8
 8002060:	2300      	movs	r3, #0
 8002062:	4602      	mov	r2, r0
 8002064:	9301      	str	r3, [sp, #4]
 8002066:	9b01      	ldr	r3, [sp, #4]
 8002068:	3301      	adds	r3, #1
 800206a:	9301      	str	r3, [sp, #4]
 800206c:	9b01      	ldr	r3, [sp, #4]
 800206e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002072:	d815      	bhi.n	80020a0 <USB_CoreReset+0x42>
 8002074:	6913      	ldr	r3, [r2, #16]
 8002076:	2b00      	cmp	r3, #0
 8002078:	daf5      	bge.n	8002066 <USB_CoreReset+0x8>
 800207a:	2300      	movs	r3, #0
 800207c:	9301      	str	r3, [sp, #4]
 800207e:	6913      	ldr	r3, [r2, #16]
 8002080:	f043 0301 	orr.w	r3, r3, #1
 8002084:	6113      	str	r3, [r2, #16]
 8002086:	9b01      	ldr	r3, [sp, #4]
 8002088:	3301      	adds	r3, #1
 800208a:	9301      	str	r3, [sp, #4]
 800208c:	9b01      	ldr	r3, [sp, #4]
 800208e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002092:	d805      	bhi.n	80020a0 <USB_CoreReset+0x42>
 8002094:	6910      	ldr	r0, [r2, #16]
 8002096:	f010 0001 	ands.w	r0, r0, #1
 800209a:	d1f4      	bne.n	8002086 <USB_CoreReset+0x28>
 800209c:	b002      	add	sp, #8
 800209e:	4770      	bx	lr
 80020a0:	2003      	movs	r0, #3
 80020a2:	e7fb      	b.n	800209c <USB_CoreReset+0x3e>

080020a4 <USB_CoreInit>:
 80020a4:	b084      	sub	sp, #16
 80020a6:	b538      	push	{r3, r4, r5, lr}
 80020a8:	ad05      	add	r5, sp, #20
 80020aa:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 80020ae:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	4604      	mov	r4, r0
 80020b6:	d127      	bne.n	8002108 <USB_CoreInit+0x64>
 80020b8:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80020ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020be:	6383      	str	r3, [r0, #56]	@ 0x38
 80020c0:	68c3      	ldr	r3, [r0, #12]
 80020c2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80020c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80020ca:	60c3      	str	r3, [r0, #12]
 80020cc:	68c3      	ldr	r3, [r0, #12]
 80020ce:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80020d2:	60c3      	str	r3, [r0, #12]
 80020d4:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	bf02      	ittt	eq
 80020dc:	68c3      	ldreq	r3, [r0, #12]
 80020de:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
 80020e2:	60c3      	streq	r3, [r0, #12]
 80020e4:	f7ff ffbb 	bl	800205e <USB_CoreReset>
 80020e8:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d107      	bne.n	8002100 <USB_CoreInit+0x5c>
 80020f0:	68a3      	ldr	r3, [r4, #8]
 80020f2:	f043 0306 	orr.w	r3, r3, #6
 80020f6:	60a3      	str	r3, [r4, #8]
 80020f8:	68a3      	ldr	r3, [r4, #8]
 80020fa:	f043 0320 	orr.w	r3, r3, #32
 80020fe:	60a3      	str	r3, [r4, #8]
 8002100:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002104:	b004      	add	sp, #16
 8002106:	4770      	bx	lr
 8002108:	68c3      	ldr	r3, [r0, #12]
 800210a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800210e:	60c3      	str	r3, [r0, #12]
 8002110:	f7ff ffa5 	bl	800205e <USB_CoreReset>
 8002114:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8002118:	b923      	cbnz	r3, 8002124 <USB_CoreInit+0x80>
 800211a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800211c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002120:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002122:	e7e1      	b.n	80020e8 <USB_CoreInit+0x44>
 8002124:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002126:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800212a:	e7f9      	b.n	8002120 <USB_CoreInit+0x7c>

0800212c <USB_SetTurnaroundTime>:
 800212c:	2a02      	cmp	r2, #2
 800212e:	d14a      	bne.n	80021c6 <USB_SetTurnaroundTime+0x9a>
 8002130:	4b27      	ldr	r3, [pc, #156]	@ (80021d0 <USB_SetTurnaroundTime+0xa4>)
 8002132:	4a28      	ldr	r2, [pc, #160]	@ (80021d4 <USB_SetTurnaroundTime+0xa8>)
 8002134:	440b      	add	r3, r1
 8002136:	4293      	cmp	r3, r2
 8002138:	d939      	bls.n	80021ae <USB_SetTurnaroundTime+0x82>
 800213a:	4b27      	ldr	r3, [pc, #156]	@ (80021d8 <USB_SetTurnaroundTime+0xac>)
 800213c:	4a27      	ldr	r2, [pc, #156]	@ (80021dc <USB_SetTurnaroundTime+0xb0>)
 800213e:	440b      	add	r3, r1
 8002140:	4293      	cmp	r3, r2
 8002142:	d936      	bls.n	80021b2 <USB_SetTurnaroundTime+0x86>
 8002144:	4a26      	ldr	r2, [pc, #152]	@ (80021e0 <USB_SetTurnaroundTime+0xb4>)
 8002146:	f5a1 0374 	sub.w	r3, r1, #15990784	@ 0xf40000
 800214a:	f5a3 5310 	sub.w	r3, r3, #9216	@ 0x2400
 800214e:	4293      	cmp	r3, r2
 8002150:	d931      	bls.n	80021b6 <USB_SetTurnaroundTime+0x8a>
 8002152:	4a24      	ldr	r2, [pc, #144]	@ (80021e4 <USB_SetTurnaroundTime+0xb8>)
 8002154:	f1a1 7383 	sub.w	r3, r1, #17170432	@ 0x1060000
 8002158:	f5a3 43e7 	sub.w	r3, r3, #29568	@ 0x7380
 800215c:	4293      	cmp	r3, r2
 800215e:	d32c      	bcc.n	80021ba <USB_SetTurnaroundTime+0x8e>
 8002160:	4b21      	ldr	r3, [pc, #132]	@ (80021e8 <USB_SetTurnaroundTime+0xbc>)
 8002162:	4a22      	ldr	r2, [pc, #136]	@ (80021ec <USB_SetTurnaroundTime+0xc0>)
 8002164:	440b      	add	r3, r1
 8002166:	4293      	cmp	r3, r2
 8002168:	d929      	bls.n	80021be <USB_SetTurnaroundTime+0x92>
 800216a:	4b21      	ldr	r3, [pc, #132]	@ (80021f0 <USB_SetTurnaroundTime+0xc4>)
 800216c:	4a21      	ldr	r2, [pc, #132]	@ (80021f4 <USB_SetTurnaroundTime+0xc8>)
 800216e:	440b      	add	r3, r1
 8002170:	4293      	cmp	r3, r2
 8002172:	d326      	bcc.n	80021c2 <USB_SetTurnaroundTime+0x96>
 8002174:	4b20      	ldr	r3, [pc, #128]	@ (80021f8 <USB_SetTurnaroundTime+0xcc>)
 8002176:	4a21      	ldr	r2, [pc, #132]	@ (80021fc <USB_SetTurnaroundTime+0xd0>)
 8002178:	440b      	add	r3, r1
 800217a:	4293      	cmp	r3, r2
 800217c:	d323      	bcc.n	80021c6 <USB_SetTurnaroundTime+0x9a>
 800217e:	4a20      	ldr	r2, [pc, #128]	@ (8002200 <USB_SetTurnaroundTime+0xd4>)
 8002180:	f1a1 73b7 	sub.w	r3, r1, #23986176	@ 0x16e0000
 8002184:	f5a3 5358 	sub.w	r3, r3, #13824	@ 0x3600
 8002188:	4293      	cmp	r3, r2
 800218a:	d31e      	bcc.n	80021ca <USB_SetTurnaroundTime+0x9e>
 800218c:	4b1d      	ldr	r3, [pc, #116]	@ (8002204 <USB_SetTurnaroundTime+0xd8>)
 800218e:	4a1e      	ldr	r2, [pc, #120]	@ (8002208 <USB_SetTurnaroundTime+0xdc>)
 8002190:	440b      	add	r3, r1
 8002192:	4293      	cmp	r3, r2
 8002194:	bf2c      	ite	cs
 8002196:	2306      	movcs	r3, #6
 8002198:	2307      	movcc	r3, #7
 800219a:	68c2      	ldr	r2, [r0, #12]
 800219c:	f422 5270 	bic.w	r2, r2, #15360	@ 0x3c00
 80021a0:	60c2      	str	r2, [r0, #12]
 80021a2:	68c2      	ldr	r2, [r0, #12]
 80021a4:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
 80021a8:	60c3      	str	r3, [r0, #12]
 80021aa:	2000      	movs	r0, #0
 80021ac:	4770      	bx	lr
 80021ae:	230f      	movs	r3, #15
 80021b0:	e7f3      	b.n	800219a <USB_SetTurnaroundTime+0x6e>
 80021b2:	230e      	movs	r3, #14
 80021b4:	e7f1      	b.n	800219a <USB_SetTurnaroundTime+0x6e>
 80021b6:	230d      	movs	r3, #13
 80021b8:	e7ef      	b.n	800219a <USB_SetTurnaroundTime+0x6e>
 80021ba:	230c      	movs	r3, #12
 80021bc:	e7ed      	b.n	800219a <USB_SetTurnaroundTime+0x6e>
 80021be:	230b      	movs	r3, #11
 80021c0:	e7eb      	b.n	800219a <USB_SetTurnaroundTime+0x6e>
 80021c2:	230a      	movs	r3, #10
 80021c4:	e7e9      	b.n	800219a <USB_SetTurnaroundTime+0x6e>
 80021c6:	2309      	movs	r3, #9
 80021c8:	e7e7      	b.n	800219a <USB_SetTurnaroundTime+0x6e>
 80021ca:	2308      	movs	r3, #8
 80021cc:	e7e5      	b.n	800219a <USB_SetTurnaroundTime+0x6e>
 80021ce:	bf00      	nop
 80021d0:	ff275340 	.word	0xff275340
 80021d4:	000c34ff 	.word	0x000c34ff
 80021d8:	ff1b1e40 	.word	0xff1b1e40
 80021dc:	000f423f 	.word	0x000f423f
 80021e0:	00124f7f 	.word	0x00124f7f
 80021e4:	0013d620 	.word	0x0013d620
 80021e8:	fee5b660 	.word	0xfee5b660
 80021ec:	0016e35f 	.word	0x0016e35f
 80021f0:	feced300 	.word	0xfeced300
 80021f4:	001b7740 	.word	0x001b7740
 80021f8:	feb35bc0 	.word	0xfeb35bc0
 80021fc:	002191c0 	.word	0x002191c0
 8002200:	00387520 	.word	0x00387520
 8002204:	fe5954e0 	.word	0xfe5954e0
 8002208:	00419ce0 	.word	0x00419ce0

0800220c <USB_EnableGlobalInt>:
 800220c:	6883      	ldr	r3, [r0, #8]
 800220e:	f043 0301 	orr.w	r3, r3, #1
 8002212:	6083      	str	r3, [r0, #8]
 8002214:	2000      	movs	r0, #0
 8002216:	4770      	bx	lr

08002218 <USB_DisableGlobalInt>:
 8002218:	6883      	ldr	r3, [r0, #8]
 800221a:	f023 0301 	bic.w	r3, r3, #1
 800221e:	6083      	str	r3, [r0, #8]
 8002220:	2000      	movs	r0, #0
 8002222:	4770      	bx	lr

08002224 <USB_SetCurrentMode>:
 8002224:	b538      	push	{r3, r4, r5, lr}
 8002226:	68c3      	ldr	r3, [r0, #12]
 8002228:	2901      	cmp	r1, #1
 800222a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800222e:	4605      	mov	r5, r0
 8002230:	460c      	mov	r4, r1
 8002232:	60c3      	str	r3, [r0, #12]
 8002234:	d114      	bne.n	8002260 <USB_SetCurrentMode+0x3c>
 8002236:	68c3      	ldr	r3, [r0, #12]
 8002238:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800223c:	60c3      	str	r3, [r0, #12]
 800223e:	2400      	movs	r4, #0
 8002240:	200a      	movs	r0, #10
 8002242:	f7fe fb29 	bl	8000898 <HAL_Delay>
 8002246:	696b      	ldr	r3, [r5, #20]
 8002248:	07d9      	lsls	r1, r3, #31
 800224a:	f104 040a 	add.w	r4, r4, #10
 800224e:	d402      	bmi.n	8002256 <USB_SetCurrentMode+0x32>
 8002250:	2cc8      	cmp	r4, #200	@ 0xc8
 8002252:	d1f5      	bne.n	8002240 <USB_SetCurrentMode+0x1c>
 8002254:	24c8      	movs	r4, #200	@ 0xc8
 8002256:	f1a4 03c8 	sub.w	r3, r4, #200	@ 0xc8
 800225a:	4258      	negs	r0, r3
 800225c:	4158      	adcs	r0, r3
 800225e:	bd38      	pop	{r3, r4, r5, pc}
 8002260:	b971      	cbnz	r1, 8002280 <USB_SetCurrentMode+0x5c>
 8002262:	68c3      	ldr	r3, [r0, #12]
 8002264:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002268:	60c3      	str	r3, [r0, #12]
 800226a:	200a      	movs	r0, #10
 800226c:	f7fe fb14 	bl	8000898 <HAL_Delay>
 8002270:	696b      	ldr	r3, [r5, #20]
 8002272:	07da      	lsls	r2, r3, #31
 8002274:	f104 040a 	add.w	r4, r4, #10
 8002278:	d5ed      	bpl.n	8002256 <USB_SetCurrentMode+0x32>
 800227a:	2cc8      	cmp	r4, #200	@ 0xc8
 800227c:	d1f5      	bne.n	800226a <USB_SetCurrentMode+0x46>
 800227e:	e7e9      	b.n	8002254 <USB_SetCurrentMode+0x30>
 8002280:	2001      	movs	r0, #1
 8002282:	e7ec      	b.n	800225e <USB_SetCurrentMode+0x3a>

08002284 <USB_FlushTxFifo>:
 8002284:	b082      	sub	sp, #8
 8002286:	2300      	movs	r3, #0
 8002288:	4602      	mov	r2, r0
 800228a:	9301      	str	r3, [sp, #4]
 800228c:	9b01      	ldr	r3, [sp, #4]
 800228e:	3301      	adds	r3, #1
 8002290:	9301      	str	r3, [sp, #4]
 8002292:	9b01      	ldr	r3, [sp, #4]
 8002294:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002298:	d815      	bhi.n	80022c6 <USB_FlushTxFifo+0x42>
 800229a:	6913      	ldr	r3, [r2, #16]
 800229c:	2b00      	cmp	r3, #0
 800229e:	daf5      	bge.n	800228c <USB_FlushTxFifo+0x8>
 80022a0:	0189      	lsls	r1, r1, #6
 80022a2:	2300      	movs	r3, #0
 80022a4:	f041 0120 	orr.w	r1, r1, #32
 80022a8:	9301      	str	r3, [sp, #4]
 80022aa:	6111      	str	r1, [r2, #16]
 80022ac:	9b01      	ldr	r3, [sp, #4]
 80022ae:	3301      	adds	r3, #1
 80022b0:	9301      	str	r3, [sp, #4]
 80022b2:	9b01      	ldr	r3, [sp, #4]
 80022b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80022b8:	d805      	bhi.n	80022c6 <USB_FlushTxFifo+0x42>
 80022ba:	6910      	ldr	r0, [r2, #16]
 80022bc:	f010 0020 	ands.w	r0, r0, #32
 80022c0:	d1f4      	bne.n	80022ac <USB_FlushTxFifo+0x28>
 80022c2:	b002      	add	sp, #8
 80022c4:	4770      	bx	lr
 80022c6:	2003      	movs	r0, #3
 80022c8:	e7fb      	b.n	80022c2 <USB_FlushTxFifo+0x3e>

080022ca <USB_FlushRxFifo>:
 80022ca:	b082      	sub	sp, #8
 80022cc:	2300      	movs	r3, #0
 80022ce:	4602      	mov	r2, r0
 80022d0:	9301      	str	r3, [sp, #4]
 80022d2:	9b01      	ldr	r3, [sp, #4]
 80022d4:	3301      	adds	r3, #1
 80022d6:	9301      	str	r3, [sp, #4]
 80022d8:	9b01      	ldr	r3, [sp, #4]
 80022da:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80022de:	d813      	bhi.n	8002308 <USB_FlushRxFifo+0x3e>
 80022e0:	6913      	ldr	r3, [r2, #16]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	daf5      	bge.n	80022d2 <USB_FlushRxFifo+0x8>
 80022e6:	2300      	movs	r3, #0
 80022e8:	9301      	str	r3, [sp, #4]
 80022ea:	2310      	movs	r3, #16
 80022ec:	6113      	str	r3, [r2, #16]
 80022ee:	9b01      	ldr	r3, [sp, #4]
 80022f0:	3301      	adds	r3, #1
 80022f2:	9301      	str	r3, [sp, #4]
 80022f4:	9b01      	ldr	r3, [sp, #4]
 80022f6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80022fa:	d805      	bhi.n	8002308 <USB_FlushRxFifo+0x3e>
 80022fc:	6910      	ldr	r0, [r2, #16]
 80022fe:	f010 0010 	ands.w	r0, r0, #16
 8002302:	d1f4      	bne.n	80022ee <USB_FlushRxFifo+0x24>
 8002304:	b002      	add	sp, #8
 8002306:	4770      	bx	lr
 8002308:	2003      	movs	r0, #3
 800230a:	e7fb      	b.n	8002304 <USB_FlushRxFifo+0x3a>

0800230c <USB_SetDevSpeed>:
 800230c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8002310:	4319      	orrs	r1, r3
 8002312:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
 8002316:	2000      	movs	r0, #0
 8002318:	4770      	bx	lr
	...

0800231c <USB_DevInit>:
 800231c:	b084      	sub	sp, #16
 800231e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002322:	4604      	mov	r4, r0
 8002324:	a809      	add	r0, sp, #36	@ 0x24
 8002326:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800232a:	2300      	movs	r3, #0
 800232c:	f89d 6024 	ldrb.w	r6, [sp, #36]	@ 0x24
 8002330:	f89d 502e 	ldrb.w	r5, [sp, #46]	@ 0x2e
 8002334:	4619      	mov	r1, r3
 8002336:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800233a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800233e:	3301      	adds	r3, #1
 8002340:	2b0f      	cmp	r3, #15
 8002342:	6051      	str	r1, [r2, #4]
 8002344:	d1f7      	bne.n	8002336 <USB_DevInit+0x1a>
 8002346:	f504 6700 	add.w	r7, r4, #2048	@ 0x800
 800234a:	2d00      	cmp	r5, #0
 800234c:	d16c      	bne.n	8002428 <USB_DevInit+0x10c>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f043 0302 	orr.w	r3, r3, #2
 8002354:	607b      	str	r3, [r7, #4]
 8002356:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002358:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800235c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800235e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002360:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8002364:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002366:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002368:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800236c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800236e:	2300      	movs	r3, #0
 8002370:	f8c4 3e00 	str.w	r3, [r4, #3584]	@ 0xe00
 8002374:	f89d 3029 	ldrb.w	r3, [sp, #41]	@ 0x29
 8002378:	2b01      	cmp	r3, #1
 800237a:	d15f      	bne.n	800243c <USB_DevInit+0x120>
 800237c:	f89d 1027 	ldrb.w	r1, [sp, #39]	@ 0x27
 8002380:	2900      	cmp	r1, #0
 8002382:	d159      	bne.n	8002438 <USB_DevInit+0x11c>
 8002384:	4620      	mov	r0, r4
 8002386:	f7ff ffc1 	bl	800230c <USB_SetDevSpeed>
 800238a:	2110      	movs	r1, #16
 800238c:	4620      	mov	r0, r4
 800238e:	f7ff ff79 	bl	8002284 <USB_FlushTxFifo>
 8002392:	4601      	mov	r1, r0
 8002394:	4620      	mov	r0, r4
 8002396:	f7ff ff98 	bl	80022ca <USB_FlushRxFifo>
 800239a:	4308      	orrs	r0, r1
 800239c:	b2c0      	uxtb	r0, r0
 800239e:	2300      	movs	r3, #0
 80023a0:	3800      	subs	r0, #0
 80023a2:	613b      	str	r3, [r7, #16]
 80023a4:	bf18      	it	ne
 80023a6:	2001      	movne	r0, #1
 80023a8:	617b      	str	r3, [r7, #20]
 80023aa:	f504 6210 	add.w	r2, r4, #2304	@ 0x900
 80023ae:	61fb      	str	r3, [r7, #28]
 80023b0:	4619      	mov	r1, r3
 80023b2:	f04f 4c90 	mov.w	ip, #1207959552	@ 0x48000000
 80023b6:	f04f 6e00 	mov.w	lr, #134217728	@ 0x8000000
 80023ba:	f64f 387f 	movw	r8, #64383	@ 0xfb7f
 80023be:	429e      	cmp	r6, r3
 80023c0:	d83e      	bhi.n	8002440 <USB_DevInit+0x124>
 80023c2:	2200      	movs	r2, #0
 80023c4:	f504 6330 	add.w	r3, r4, #2816	@ 0xb00
 80023c8:	4611      	mov	r1, r2
 80023ca:	f04f 4c90 	mov.w	ip, #1207959552	@ 0x48000000
 80023ce:	f04f 6e00 	mov.w	lr, #134217728	@ 0x8000000
 80023d2:	f64f 387f 	movw	r8, #64383	@ 0xfb7f
 80023d6:	4296      	cmp	r6, r2
 80023d8:	d845      	bhi.n	8002466 <USB_DevInit+0x14a>
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023e0:	613b      	str	r3, [r7, #16]
 80023e2:	2300      	movs	r3, #0
 80023e4:	61a3      	str	r3, [r4, #24]
 80023e6:	f06f 4380 	mvn.w	r3, #1073741824	@ 0x40000000
 80023ea:	6163      	str	r3, [r4, #20]
 80023ec:	f89d 3026 	ldrb.w	r3, [sp, #38]	@ 0x26
 80023f0:	b91b      	cbnz	r3, 80023fa <USB_DevInit+0xde>
 80023f2:	69a3      	ldr	r3, [r4, #24]
 80023f4:	f043 0310 	orr.w	r3, r3, #16
 80023f8:	61a3      	str	r3, [r4, #24]
 80023fa:	69a2      	ldr	r2, [r4, #24]
 80023fc:	4b23      	ldr	r3, [pc, #140]	@ (800248c <USB_DevInit+0x170>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	61a3      	str	r3, [r4, #24]
 8002402:	f89d 302a 	ldrb.w	r3, [sp, #42]	@ 0x2a
 8002406:	b11b      	cbz	r3, 8002410 <USB_DevInit+0xf4>
 8002408:	69a3      	ldr	r3, [r4, #24]
 800240a:	f043 0308 	orr.w	r3, r3, #8
 800240e:	61a3      	str	r3, [r4, #24]
 8002410:	2d01      	cmp	r5, #1
 8002412:	bf01      	itttt	eq
 8002414:	69a3      	ldreq	r3, [r4, #24]
 8002416:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 800241a:	f043 0304 	orreq.w	r3, r3, #4
 800241e:	61a3      	streq	r3, [r4, #24]
 8002420:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002424:	b004      	add	sp, #16
 8002426:	4770      	bx	lr
 8002428:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800242a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800242e:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002430:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002432:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002436:	e799      	b.n	800236c <USB_DevInit+0x50>
 8002438:	4619      	mov	r1, r3
 800243a:	e7a3      	b.n	8002384 <USB_DevInit+0x68>
 800243c:	2103      	movs	r1, #3
 800243e:	e7a1      	b.n	8002384 <USB_DevInit+0x68>
 8002440:	f8d2 9000 	ldr.w	r9, [r2]
 8002444:	f1b9 0f00 	cmp.w	r9, #0
 8002448:	da0b      	bge.n	8002462 <USB_DevInit+0x146>
 800244a:	b93b      	cbnz	r3, 800245c <USB_DevInit+0x140>
 800244c:	f8c2 e000 	str.w	lr, [r2]
 8002450:	6111      	str	r1, [r2, #16]
 8002452:	3301      	adds	r3, #1
 8002454:	f8c2 8008 	str.w	r8, [r2, #8]
 8002458:	3220      	adds	r2, #32
 800245a:	e7b0      	b.n	80023be <USB_DevInit+0xa2>
 800245c:	f8c2 c000 	str.w	ip, [r2]
 8002460:	e7f6      	b.n	8002450 <USB_DevInit+0x134>
 8002462:	6011      	str	r1, [r2, #0]
 8002464:	e7f4      	b.n	8002450 <USB_DevInit+0x134>
 8002466:	f8d3 9000 	ldr.w	r9, [r3]
 800246a:	f1b9 0f00 	cmp.w	r9, #0
 800246e:	da0b      	bge.n	8002488 <USB_DevInit+0x16c>
 8002470:	b93a      	cbnz	r2, 8002482 <USB_DevInit+0x166>
 8002472:	f8c3 e000 	str.w	lr, [r3]
 8002476:	6119      	str	r1, [r3, #16]
 8002478:	3201      	adds	r2, #1
 800247a:	f8c3 8008 	str.w	r8, [r3, #8]
 800247e:	3320      	adds	r3, #32
 8002480:	e7a9      	b.n	80023d6 <USB_DevInit+0xba>
 8002482:	f8c3 c000 	str.w	ip, [r3]
 8002486:	e7f6      	b.n	8002476 <USB_DevInit+0x15a>
 8002488:	6019      	str	r1, [r3, #0]
 800248a:	e7f4      	b.n	8002476 <USB_DevInit+0x15a>
 800248c:	803c3800 	.word	0x803c3800

08002490 <USB_GetDevSpeed>:
 8002490:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8002494:	f013 0006 	ands.w	r0, r3, #6
 8002498:	d004      	beq.n	80024a4 <USB_GetDevSpeed+0x14>
 800249a:	f013 0f02 	tst.w	r3, #2
 800249e:	bf14      	ite	ne
 80024a0:	2002      	movne	r0, #2
 80024a2:	200f      	moveq	r0, #15
 80024a4:	4770      	bx	lr

080024a6 <USB_ActivateEndpoint>:
 80024a6:	b530      	push	{r4, r5, lr}
 80024a8:	780c      	ldrb	r4, [r1, #0]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f004 050f 	and.w	r5, r4, #15
 80024b0:	40aa      	lsls	r2, r5
 80024b2:	784d      	ldrb	r5, [r1, #1]
 80024b4:	2d01      	cmp	r5, #1
 80024b6:	f500 6300 	add.w	r3, r0, #2048	@ 0x800
 80024ba:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 80024be:	d119      	bne.n	80024f4 <USB_ActivateEndpoint+0x4e>
 80024c0:	69dd      	ldr	r5, [r3, #28]
 80024c2:	432a      	orrs	r2, r5
 80024c4:	61da      	str	r2, [r3, #28]
 80024c6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 80024ca:	041a      	lsls	r2, r3, #16
 80024cc:	d410      	bmi.n	80024f0 <USB_ActivateEndpoint+0x4a>
 80024ce:	688a      	ldr	r2, [r1, #8]
 80024d0:	f8d0 5900 	ldr.w	r5, [r0, #2304]	@ 0x900
 80024d4:	f3c2 030a 	ubfx	r3, r2, #0, #11
 80024d8:	790a      	ldrb	r2, [r1, #4]
 80024da:	432b      	orrs	r3, r5
 80024dc:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 80024e0:	ea43 5384 	orr.w	r3, r3, r4, lsl #22
 80024e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024ec:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 80024f0:	2000      	movs	r0, #0
 80024f2:	bd30      	pop	{r4, r5, pc}
 80024f4:	69dc      	ldr	r4, [r3, #28]
 80024f6:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 80024fa:	61da      	str	r2, [r3, #28]
 80024fc:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8002500:	041b      	lsls	r3, r3, #16
 8002502:	d4f5      	bmi.n	80024f0 <USB_ActivateEndpoint+0x4a>
 8002504:	688b      	ldr	r3, [r1, #8]
 8002506:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 800250a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800250e:	4313      	orrs	r3, r2
 8002510:	790a      	ldrb	r2, [r1, #4]
 8002512:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8002516:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800251a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800251e:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 8002522:	e7e5      	b.n	80024f0 <USB_ActivateEndpoint+0x4a>

08002524 <USB_EPStopXfer>:
 8002524:	b082      	sub	sp, #8
 8002526:	2300      	movs	r3, #0
 8002528:	784a      	ldrb	r2, [r1, #1]
 800252a:	9301      	str	r3, [sp, #4]
 800252c:	780b      	ldrb	r3, [r1, #0]
 800252e:	2a01      	cmp	r2, #1
 8002530:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8002534:	d11e      	bne.n	8002574 <USB_EPStopXfer+0x50>
 8002536:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
 800253a:	18c1      	adds	r1, r0, r3
 800253c:	58c2      	ldr	r2, [r0, r3]
 800253e:	2a00      	cmp	r2, #0
 8002540:	db02      	blt.n	8002548 <USB_EPStopXfer+0x24>
 8002542:	2000      	movs	r0, #0
 8002544:	b002      	add	sp, #8
 8002546:	4770      	bx	lr
 8002548:	58c2      	ldr	r2, [r0, r3]
 800254a:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 800254e:	50c2      	str	r2, [r0, r3]
 8002550:	58c2      	ldr	r2, [r0, r3]
 8002552:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002556:	50c2      	str	r2, [r0, r3]
 8002558:	f242 7210 	movw	r2, #10000	@ 0x2710
 800255c:	9b01      	ldr	r3, [sp, #4]
 800255e:	3301      	adds	r3, #1
 8002560:	9301      	str	r3, [sp, #4]
 8002562:	9b01      	ldr	r3, [sp, #4]
 8002564:	4293      	cmp	r3, r2
 8002566:	d901      	bls.n	800256c <USB_EPStopXfer+0x48>
 8002568:	2001      	movs	r0, #1
 800256a:	e7eb      	b.n	8002544 <USB_EPStopXfer+0x20>
 800256c:	680b      	ldr	r3, [r1, #0]
 800256e:	2b00      	cmp	r3, #0
 8002570:	dbf4      	blt.n	800255c <USB_EPStopXfer+0x38>
 8002572:	e7e6      	b.n	8002542 <USB_EPStopXfer+0x1e>
 8002574:	f500 6030 	add.w	r0, r0, #2816	@ 0xb00
 8002578:	18c1      	adds	r1, r0, r3
 800257a:	58c2      	ldr	r2, [r0, r3]
 800257c:	2a00      	cmp	r2, #0
 800257e:	dae0      	bge.n	8002542 <USB_EPStopXfer+0x1e>
 8002580:	58c2      	ldr	r2, [r0, r3]
 8002582:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8002586:	50c2      	str	r2, [r0, r3]
 8002588:	58c2      	ldr	r2, [r0, r3]
 800258a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800258e:	50c2      	str	r2, [r0, r3]
 8002590:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002594:	9b01      	ldr	r3, [sp, #4]
 8002596:	3301      	adds	r3, #1
 8002598:	9301      	str	r3, [sp, #4]
 800259a:	9b01      	ldr	r3, [sp, #4]
 800259c:	4293      	cmp	r3, r2
 800259e:	d8e3      	bhi.n	8002568 <USB_EPStopXfer+0x44>
 80025a0:	680b      	ldr	r3, [r1, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	dbf6      	blt.n	8002594 <USB_EPStopXfer+0x70>
 80025a6:	e7cc      	b.n	8002542 <USB_EPStopXfer+0x1e>

080025a8 <USB_WritePacket>:
 80025a8:	b510      	push	{r4, lr}
 80025aa:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80025ae:	b944      	cbnz	r4, 80025c2 <USB_WritePacket+0x1a>
 80025b0:	3303      	adds	r3, #3
 80025b2:	3201      	adds	r2, #1
 80025b4:	089b      	lsrs	r3, r3, #2
 80025b6:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 80025ba:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80025be:	428b      	cmp	r3, r1
 80025c0:	d101      	bne.n	80025c6 <USB_WritePacket+0x1e>
 80025c2:	2000      	movs	r0, #0
 80025c4:	bd10      	pop	{r4, pc}
 80025c6:	f851 2b04 	ldr.w	r2, [r1], #4
 80025ca:	6002      	str	r2, [r0, #0]
 80025cc:	e7f7      	b.n	80025be <USB_WritePacket+0x16>
	...

080025d0 <USB_EPStartXfer>:
 80025d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80025d2:	784b      	ldrb	r3, [r1, #1]
 80025d4:	690c      	ldr	r4, [r1, #16]
 80025d6:	f8df c1b8 	ldr.w	ip, [pc, #440]	@ 8002790 <USB_EPStartXfer+0x1c0>
 80025da:	f8df e1b8 	ldr.w	lr, [pc, #440]	@ 8002794 <USB_EPStartXfer+0x1c4>
 80025de:	4617      	mov	r7, r2
 80025e0:	780a      	ldrb	r2, [r1, #0]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	eb00 1542 	add.w	r5, r0, r2, lsl #5
 80025e8:	f040 8082 	bne.w	80026f0 <USB_EPStartXfer+0x120>
 80025ec:	f505 6610 	add.w	r6, r5, #2304	@ 0x900
 80025f0:	6933      	ldr	r3, [r6, #16]
 80025f2:	bb44      	cbnz	r4, 8002646 <USB_EPStartXfer+0x76>
 80025f4:	ea03 030c 	and.w	r3, r3, ip
 80025f8:	6133      	str	r3, [r6, #16]
 80025fa:	6933      	ldr	r3, [r6, #16]
 80025fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002600:	6133      	str	r3, [r6, #16]
 8002602:	6933      	ldr	r3, [r6, #16]
 8002604:	ea03 030e 	and.w	r3, r3, lr
 8002608:	6133      	str	r3, [r6, #16]
 800260a:	2f01      	cmp	r7, #1
 800260c:	790c      	ldrb	r4, [r1, #4]
 800260e:	d147      	bne.n	80026a0 <USB_EPStartXfer+0xd0>
 8002610:	69cb      	ldr	r3, [r1, #28]
 8002612:	b103      	cbz	r3, 8002616 <USB_EPStartXfer+0x46>
 8002614:	6173      	str	r3, [r6, #20]
 8002616:	2c01      	cmp	r4, #1
 8002618:	d10c      	bne.n	8002634 <USB_EPStartXfer+0x64>
 800261a:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 800261e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002622:	f8d5 3900 	ldr.w	r3, [r5, #2304]	@ 0x900
 8002626:	bf0c      	ite	eq
 8002628:	f043 5300 	orreq.w	r3, r3, #536870912	@ 0x20000000
 800262c:	f043 5380 	orrne.w	r3, r3, #268435456	@ 0x10000000
 8002630:	f8c5 3900 	str.w	r3, [r5, #2304]	@ 0x900
 8002634:	f8d5 3900 	ldr.w	r3, [r5, #2304]	@ 0x900
 8002638:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800263c:	f8c5 3900 	str.w	r3, [r5, #2304]	@ 0x900
 8002640:	2000      	movs	r0, #0
 8002642:	b003      	add	sp, #12
 8002644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002646:	ea03 030e 	and.w	r3, r3, lr
 800264a:	6133      	str	r3, [r6, #16]
 800264c:	6933      	ldr	r3, [r6, #16]
 800264e:	ea03 030c 	and.w	r3, r3, ip
 8002652:	6133      	str	r3, [r6, #16]
 8002654:	688b      	ldr	r3, [r1, #8]
 8002656:	b9ba      	cbnz	r2, 8002688 <USB_EPStartXfer+0xb8>
 8002658:	42a3      	cmp	r3, r4
 800265a:	bf38      	it	cc
 800265c:	610b      	strcc	r3, [r1, #16]
 800265e:	6933      	ldr	r3, [r6, #16]
 8002660:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002664:	6133      	str	r3, [r6, #16]
 8002666:	690b      	ldr	r3, [r1, #16]
 8002668:	6934      	ldr	r4, [r6, #16]
 800266a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800266e:	4323      	orrs	r3, r4
 8002670:	6133      	str	r3, [r6, #16]
 8002672:	790b      	ldrb	r3, [r1, #4]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d1c8      	bne.n	800260a <USB_EPStartXfer+0x3a>
 8002678:	6933      	ldr	r3, [r6, #16]
 800267a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800267e:	6133      	str	r3, [r6, #16]
 8002680:	6933      	ldr	r3, [r6, #16]
 8002682:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002686:	e7bf      	b.n	8002608 <USB_EPStartXfer+0x38>
 8002688:	441c      	add	r4, r3
 800268a:	3c01      	subs	r4, #1
 800268c:	fbb4 f4f3 	udiv	r4, r4, r3
 8002690:	4b3e      	ldr	r3, [pc, #248]	@ (800278c <USB_EPStartXfer+0x1bc>)
 8002692:	f8d6 c010 	ldr.w	ip, [r6, #16]
 8002696:	ea03 43c4 	and.w	r3, r3, r4, lsl #19
 800269a:	ea43 030c 	orr.w	r3, r3, ip
 800269e:	e7e1      	b.n	8002664 <USB_EPStartXfer+0x94>
 80026a0:	f8d5 3900 	ldr.w	r3, [r5, #2304]	@ 0x900
 80026a4:	2c01      	cmp	r4, #1
 80026a6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80026aa:	f8c5 3900 	str.w	r3, [r5, #2304]	@ 0x900
 80026ae:	690b      	ldr	r3, [r1, #16]
 80026b0:	d00b      	beq.n	80026ca <USB_EPStartXfer+0xfa>
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0c4      	beq.n	8002640 <USB_EPStartXfer+0x70>
 80026b6:	f8d0 1834 	ldr.w	r1, [r0, #2100]	@ 0x834
 80026ba:	f002 020f 	and.w	r2, r2, #15
 80026be:	2301      	movs	r3, #1
 80026c0:	4093      	lsls	r3, r2
 80026c2:	430b      	orrs	r3, r1
 80026c4:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
 80026c8:	e7ba      	b.n	8002640 <USB_EPStartXfer+0x70>
 80026ca:	f8d0 4808 	ldr.w	r4, [r0, #2056]	@ 0x808
 80026ce:	f414 7f80 	tst.w	r4, #256	@ 0x100
 80026d2:	f8d5 4900 	ldr.w	r4, [r5, #2304]	@ 0x900
 80026d6:	bf0c      	ite	eq
 80026d8:	f044 5400 	orreq.w	r4, r4, #536870912	@ 0x20000000
 80026dc:	f044 5480 	orrne.w	r4, r4, #268435456	@ 0x10000000
 80026e0:	f8c5 4900 	str.w	r4, [r5, #2304]	@ 0x900
 80026e4:	9700      	str	r7, [sp, #0]
 80026e6:	68c9      	ldr	r1, [r1, #12]
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	f7ff ff5d 	bl	80025a8 <USB_WritePacket>
 80026ee:	e7a7      	b.n	8002640 <USB_EPStartXfer+0x70>
 80026f0:	f8d5 3b10 	ldr.w	r3, [r5, #2832]	@ 0xb10
 80026f4:	ea03 030e 	and.w	r3, r3, lr
 80026f8:	f8c5 3b10 	str.w	r3, [r5, #2832]	@ 0xb10
 80026fc:	f8d5 3b10 	ldr.w	r3, [r5, #2832]	@ 0xb10
 8002700:	ea03 030c 	and.w	r3, r3, ip
 8002704:	f505 6630 	add.w	r6, r5, #2816	@ 0xb00
 8002708:	6133      	str	r3, [r6, #16]
 800270a:	688b      	ldr	r3, [r1, #8]
 800270c:	bb3a      	cbnz	r2, 800275e <USB_EPStartXfer+0x18e>
 800270e:	b104      	cbz	r4, 8002712 <USB_EPStartXfer+0x142>
 8002710:	610b      	str	r3, [r1, #16]
 8002712:	620b      	str	r3, [r1, #32]
 8002714:	6932      	ldr	r2, [r6, #16]
 8002716:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800271a:	4313      	orrs	r3, r2
 800271c:	6133      	str	r3, [r6, #16]
 800271e:	6933      	ldr	r3, [r6, #16]
 8002720:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002724:	2f01      	cmp	r7, #1
 8002726:	6133      	str	r3, [r6, #16]
 8002728:	d102      	bne.n	8002730 <USB_EPStartXfer+0x160>
 800272a:	68cb      	ldr	r3, [r1, #12]
 800272c:	b103      	cbz	r3, 8002730 <USB_EPStartXfer+0x160>
 800272e:	6173      	str	r3, [r6, #20]
 8002730:	790b      	ldrb	r3, [r1, #4]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d10c      	bne.n	8002750 <USB_EPStartXfer+0x180>
 8002736:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 800273a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800273e:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	@ 0xb00
 8002742:	bf0c      	ite	eq
 8002744:	f043 5300 	orreq.w	r3, r3, #536870912	@ 0x20000000
 8002748:	f043 5380 	orrne.w	r3, r3, #268435456	@ 0x10000000
 800274c:	f8c5 3b00 	str.w	r3, [r5, #2816]	@ 0xb00
 8002750:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	@ 0xb00
 8002754:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8002758:	f8c5 3b00 	str.w	r3, [r5, #2816]	@ 0xb00
 800275c:	e770      	b.n	8002640 <USB_EPStartXfer+0x70>
 800275e:	2c00      	cmp	r4, #0
 8002760:	d0d8      	beq.n	8002714 <USB_EPStartXfer+0x144>
 8002762:	441c      	add	r4, r3
 8002764:	4a09      	ldr	r2, [pc, #36]	@ (800278c <USB_EPStartXfer+0x1bc>)
 8002766:	f8d6 c010 	ldr.w	ip, [r6, #16]
 800276a:	3c01      	subs	r4, #1
 800276c:	fbb4 f4f3 	udiv	r4, r4, r3
 8002770:	b2a4      	uxth	r4, r4
 8002772:	ea02 42c4 	and.w	r2, r2, r4, lsl #19
 8002776:	4363      	muls	r3, r4
 8002778:	ea42 020c 	orr.w	r2, r2, ip
 800277c:	620b      	str	r3, [r1, #32]
 800277e:	6132      	str	r2, [r6, #16]
 8002780:	6932      	ldr	r2, [r6, #16]
 8002782:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002786:	4313      	orrs	r3, r2
 8002788:	e7cc      	b.n	8002724 <USB_EPStartXfer+0x154>
 800278a:	bf00      	nop
 800278c:	1ff80000 	.word	0x1ff80000
 8002790:	e007ffff 	.word	0xe007ffff
 8002794:	fff80000 	.word	0xfff80000

08002798 <USB_ReadPacket>:
 8002798:	4603      	mov	r3, r0
 800279a:	b570      	push	{r4, r5, r6, lr}
 800279c:	2000      	movs	r0, #0
 800279e:	0894      	lsrs	r4, r2, #2
 80027a0:	f503 5580 	add.w	r5, r3, #4096	@ 0x1000
 80027a4:	f002 0203 	and.w	r2, r2, #3
 80027a8:	42a0      	cmp	r0, r4
 80027aa:	d310      	bcc.n	80027ce <USB_ReadPacket+0x36>
 80027ac:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 80027b0:	b162      	cbz	r2, 80027cc <USB_ReadPacket+0x34>
 80027b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027b6:	681c      	ldr	r4, [r3, #0]
 80027b8:	2300      	movs	r3, #0
 80027ba:	00d9      	lsls	r1, r3, #3
 80027bc:	fa24 f101 	lsr.w	r1, r4, r1
 80027c0:	54c1      	strb	r1, [r0, r3]
 80027c2:	3301      	adds	r3, #1
 80027c4:	b299      	uxth	r1, r3
 80027c6:	428a      	cmp	r2, r1
 80027c8:	d1f7      	bne.n	80027ba <USB_ReadPacket+0x22>
 80027ca:	4410      	add	r0, r2
 80027cc:	bd70      	pop	{r4, r5, r6, pc}
 80027ce:	682e      	ldr	r6, [r5, #0]
 80027d0:	f841 6020 	str.w	r6, [r1, r0, lsl #2]
 80027d4:	3001      	adds	r0, #1
 80027d6:	e7e7      	b.n	80027a8 <USB_ReadPacket+0x10>

080027d8 <USB_EPSetStall>:
 80027d8:	784a      	ldrb	r2, [r1, #1]
 80027da:	780b      	ldrb	r3, [r1, #0]
 80027dc:	2a01      	cmp	r2, #1
 80027de:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80027e2:	d112      	bne.n	800280a <USB_EPSetStall+0x32>
 80027e4:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
 80027e8:	2a00      	cmp	r2, #0
 80027ea:	db06      	blt.n	80027fa <USB_EPSetStall+0x22>
 80027ec:	b12b      	cbz	r3, 80027fa <USB_EPSetStall+0x22>
 80027ee:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 80027f2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80027f6:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 80027fa:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 80027fe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002802:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8002806:	2000      	movs	r0, #0
 8002808:	4770      	bx	lr
 800280a:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 800280e:	2a00      	cmp	r2, #0
 8002810:	db06      	blt.n	8002820 <USB_EPSetStall+0x48>
 8002812:	b12b      	cbz	r3, 8002820 <USB_EPSetStall+0x48>
 8002814:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8002818:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800281c:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 8002820:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8002824:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002828:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 800282c:	e7eb      	b.n	8002806 <USB_EPSetStall+0x2e>

0800282e <USB_EPClearStall>:
 800282e:	780b      	ldrb	r3, [r1, #0]
 8002830:	784a      	ldrb	r2, [r1, #1]
 8002832:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002836:	790b      	ldrb	r3, [r1, #4]
 8002838:	2a01      	cmp	r2, #1
 800283a:	f1a3 0302 	sub.w	r3, r3, #2
 800283e:	b2db      	uxtb	r3, r3
 8002840:	d10f      	bne.n	8002862 <USB_EPClearStall+0x34>
 8002842:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
 8002846:	2b01      	cmp	r3, #1
 8002848:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 800284c:	f8c0 2900 	str.w	r2, [r0, #2304]	@ 0x900
 8002850:	d805      	bhi.n	800285e <USB_EPClearStall+0x30>
 8002852:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8002856:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800285a:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 800285e:	2000      	movs	r0, #0
 8002860:	4770      	bx	lr
 8002862:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 8002866:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 800286a:	2b01      	cmp	r3, #1
 800286c:	f8c0 2b00 	str.w	r2, [r0, #2816]	@ 0xb00
 8002870:	bf9e      	ittt	ls
 8002872:	f8d0 3b00 	ldrls.w	r3, [r0, #2816]	@ 0xb00
 8002876:	f043 5380 	orrls.w	r3, r3, #268435456	@ 0x10000000
 800287a:	f8c0 3b00 	strls.w	r3, [r0, #2816]	@ 0xb00
 800287e:	e7ee      	b.n	800285e <USB_EPClearStall+0x30>

08002880 <USB_SetDevAddress>:
 8002880:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8002884:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002888:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
 800288c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8002890:	0109      	lsls	r1, r1, #4
 8002892:	f401 61fe 	and.w	r1, r1, #2032	@ 0x7f0
 8002896:	4319      	orrs	r1, r3
 8002898:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
 800289c:	2000      	movs	r0, #0
 800289e:	4770      	bx	lr

080028a0 <USB_DevConnect>:
 80028a0:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 80028a4:	f023 0303 	bic.w	r3, r3, #3
 80028a8:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
 80028ac:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 80028b0:	f023 0302 	bic.w	r3, r3, #2
 80028b4:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
 80028b8:	2000      	movs	r0, #0
 80028ba:	4770      	bx	lr

080028bc <USB_DevDisconnect>:
 80028bc:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 80028c0:	f023 0303 	bic.w	r3, r3, #3
 80028c4:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
 80028c8:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 80028cc:	f043 0302 	orr.w	r3, r3, #2
 80028d0:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
 80028d4:	2000      	movs	r0, #0
 80028d6:	4770      	bx	lr

080028d8 <USB_ReadInterrupts>:
 80028d8:	6942      	ldr	r2, [r0, #20]
 80028da:	6980      	ldr	r0, [r0, #24]
 80028dc:	4010      	ands	r0, r2
 80028de:	4770      	bx	lr

080028e0 <USB_ReadDevAllOutEpInterrupt>:
 80028e0:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 80028e4:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
 80028e8:	69c0      	ldr	r0, [r0, #28]
 80028ea:	4018      	ands	r0, r3
 80028ec:	0c00      	lsrs	r0, r0, #16
 80028ee:	4770      	bx	lr

080028f0 <USB_ReadDevAllInEpInterrupt>:
 80028f0:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 80028f4:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
 80028f8:	69c0      	ldr	r0, [r0, #28]
 80028fa:	4018      	ands	r0, r3
 80028fc:	b280      	uxth	r0, r0
 80028fe:	4770      	bx	lr

08002900 <USB_ReadDevOutEPInterrupt>:
 8002900:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8002904:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
 8002908:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	@ 0xb08
 800290c:	6940      	ldr	r0, [r0, #20]
 800290e:	4010      	ands	r0, r2
 8002910:	4770      	bx	lr

08002912 <USB_ReadDevInEPInterrupt>:
 8002912:	f8d0 2810 	ldr.w	r2, [r0, #2064]	@ 0x810
 8002916:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
 800291a:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 800291e:	f001 010f 	and.w	r1, r1, #15
 8002922:	40cb      	lsrs	r3, r1
 8002924:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
 8002928:	01db      	lsls	r3, r3, #7
 800292a:	6880      	ldr	r0, [r0, #8]
 800292c:	b2db      	uxtb	r3, r3
 800292e:	4313      	orrs	r3, r2
 8002930:	4018      	ands	r0, r3
 8002932:	4770      	bx	lr

08002934 <USB_GetMode>:
 8002934:	6940      	ldr	r0, [r0, #20]
 8002936:	f000 0001 	and.w	r0, r0, #1
 800293a:	4770      	bx	lr

0800293c <USB_ActivateSetup>:
 800293c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8002940:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002944:	f023 0307 	bic.w	r3, r3, #7
 8002948:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 800294c:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8002950:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002954:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
 8002958:	2000      	movs	r0, #0
 800295a:	4770      	bx	lr

0800295c <USB_EP0_OutStart>:
 800295c:	b530      	push	{r4, r5, lr}
 800295e:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8002960:	4c10      	ldr	r4, [pc, #64]	@ (80029a4 <USB_EP0_OutStart+0x48>)
 8002962:	42a5      	cmp	r5, r4
 8002964:	f500 6330 	add.w	r3, r0, #2816	@ 0xb00
 8002968:	d903      	bls.n	8002972 <USB_EP0_OutStart+0x16>
 800296a:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	@ 0xb00
 800296e:	2c00      	cmp	r4, #0
 8002970:	db16      	blt.n	80029a0 <USB_EP0_OutStart+0x44>
 8002972:	2400      	movs	r4, #0
 8002974:	611c      	str	r4, [r3, #16]
 8002976:	691c      	ldr	r4, [r3, #16]
 8002978:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 800297c:	611c      	str	r4, [r3, #16]
 800297e:	691c      	ldr	r4, [r3, #16]
 8002980:	f044 0418 	orr.w	r4, r4, #24
 8002984:	611c      	str	r4, [r3, #16]
 8002986:	691c      	ldr	r4, [r3, #16]
 8002988:	2901      	cmp	r1, #1
 800298a:	f044 44c0 	orr.w	r4, r4, #1610612736	@ 0x60000000
 800298e:	611c      	str	r4, [r3, #16]
 8002990:	bf01      	itttt	eq
 8002992:	615a      	streq	r2, [r3, #20]
 8002994:	f8d0 3b00 	ldreq.w	r3, [r0, #2816]	@ 0xb00
 8002998:	f043 2380 	orreq.w	r3, r3, #2147516416	@ 0x80008000
 800299c:	f8c0 3b00 	streq.w	r3, [r0, #2816]	@ 0xb00
 80029a0:	2000      	movs	r0, #0
 80029a2:	bd30      	pop	{r4, r5, pc}
 80029a4:	4f54300a 	.word	0x4f54300a

080029a8 <USBD_DFU_GetCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 80029a8:	231b      	movs	r3, #27
 80029aa:	8003      	strh	r3, [r0, #0]

  return USBD_DFU_CfgDesc;
}
 80029ac:	4800      	ldr	r0, [pc, #0]	@ (80029b0 <USBD_DFU_GetCfgDesc+0x8>)
 80029ae:	4770      	bx	lr
 80029b0:	20000018 	.word	0x20000018

080029b4 <USBD_DFU_EP0_RxReady>:
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
}
 80029b4:	2000      	movs	r0, #0
 80029b6:	4770      	bx	lr

080029b8 <USBD_DFU_GetDeviceQualifierDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 80029b8:	230a      	movs	r3, #10
 80029ba:	8003      	strh	r3, [r0, #0]

  return USBD_DFU_DeviceQualifierDesc;
}
 80029bc:	4800      	ldr	r0, [pc, #0]	@ (80029c0 <USBD_DFU_GetDeviceQualifierDesc+0x8>)
 80029be:	4770      	bx	lr
 80029c0:	2000000c 	.word	0x2000000c

080029c4 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 80029c4:	b510      	push	{r4, lr}
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 80029c6:	f8d0 42d4 	ldr.w	r4, [r0, #724]	@ 0x2d4
 80029ca:	eb00 0084 	add.w	r0, r0, r4, lsl #2

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 80029ce:	2906      	cmp	r1, #6
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 80029d0:	f8d0 02c4 	ldr.w	r0, [r0, #708]	@ 0x2c4
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 80029d4:	d805      	bhi.n	80029e2 <USBD_DFU_GetUsrStringDesc+0x1e>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 80029d6:	6800      	ldr	r0, [r0, #0]
 80029d8:	4903      	ldr	r1, [pc, #12]	@ (80029e8 <USBD_DFU_GetUsrStringDesc+0x24>)
 80029da:	f000 feb7 	bl	800374c <USBD_GetString>
    return USBD_StrDesc;
 80029de:	4802      	ldr	r0, [pc, #8]	@ (80029e8 <USBD_DFU_GetUsrStringDesc+0x24>)
  {
    /* Not supported Interface Descriptor index */
    *length = 0U;
    return NULL;
  }
}
 80029e0:	bd10      	pop	{r4, pc}
    *length = 0U;
 80029e2:	2000      	movs	r0, #0
 80029e4:	8010      	strh	r0, [r2, #0]
    return NULL;
 80029e6:	e7fb      	b.n	80029e0 <USBD_DFU_GetUsrStringDesc+0x1c>
 80029e8:	20000148 	.word	0x20000148

080029ec <USBD_DFU_GetDfuFuncDesc>:
  * @param  pdev: device instance
  * @param  pConfDesc:  pointer to Bos descriptor
  * @retval pointer to the DFU descriptor
  */
static void *USBD_DFU_GetDfuFuncDesc(uint8_t *pConfDesc)
{
 80029ec:	b513      	push	{r0, r1, r4, lr}
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
  uint8_t *pDfuDesc = NULL;
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80029ee:	7803      	ldrb	r3, [r0, #0]
 80029f0:	8842      	ldrh	r2, [r0, #2]
 80029f2:	429a      	cmp	r2, r3
{
 80029f4:	4604      	mov	r4, r0
  if (desc->wTotalLength > desc->bLength)
 80029f6:	d802      	bhi.n	80029fe <USBD_DFU_GetDfuFuncDesc+0x12>
  uint8_t *pDfuDesc = NULL;
 80029f8:	2000      	movs	r0, #0
        break;
      }
    }
  }
  return pDfuDesc;
}
 80029fa:	b002      	add	sp, #8
 80029fc:	bd10      	pop	{r4, pc}
    ptr = desc->bLength;
 80029fe:	f8ad 3006 	strh.w	r3, [sp, #6]
    while (ptr < desc->wTotalLength)
 8002a02:	8862      	ldrh	r2, [r4, #2]
 8002a04:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d9f5      	bls.n	80029f8 <USBD_DFU_GetDfuFuncDesc+0xc>
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8002a0c:	f10d 0106 	add.w	r1, sp, #6
 8002a10:	f000 fc4c 	bl	80032ac <USBD_GetNextDesc>
      if (pdesc->bDescriptorType == DFU_DESCRIPTOR_TYPE)
 8002a14:	7843      	ldrb	r3, [r0, #1]
 8002a16:	2b21      	cmp	r3, #33	@ 0x21
 8002a18:	d1f3      	bne.n	8002a02 <USBD_DFU_GetDfuFuncDesc+0x16>
 8002a1a:	e7ee      	b.n	80029fa <USBD_DFU_GetDfuFuncDesc+0xe>

08002a1c <USBD_DFU_EP0_TxReady>:
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8002a1c:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8002a20:	eb00 0383 	add.w	r3, r0, r3, lsl #2
{
 8002a24:	b573      	push	{r0, r1, r4, r5, r6, lr}
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 8002a26:	e9d3 46b0 	ldrd	r4, r6, [r3, #704]	@ 0x2c0
{
 8002a2a:	4605      	mov	r5, r0
  if (hdfu == NULL)
 8002a2c:	b3a4      	cbz	r4, 8002a98 <USBD_DFU_EP0_TxReady+0x7c>
  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 8002a2e:	f894 341c 	ldrb.w	r3, [r4, #1052]	@ 0x41c
 8002a32:	2b04      	cmp	r3, #4
 8002a34:	d14b      	bne.n	8002ace <USBD_DFU_EP0_TxReady+0xb2>
    if (hdfu->wblock_num == 0U)
 8002a36:	f8d4 1400 	ldr.w	r1, [r4, #1024]	@ 0x400
 8002a3a:	2900      	cmp	r1, #0
 8002a3c:	d13a      	bne.n	8002ab4 <USBD_DFU_EP0_TxReady+0x98>
      if (hdfu->wlength == 1U)
 8002a3e:	f8d4 3404 	ldr.w	r3, [r4, #1028]	@ 0x404
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d008      	beq.n	8002a58 <USBD_DFU_EP0_TxReady+0x3c>
      else if (hdfu->wlength == 5U)
 8002a46:	2b05      	cmp	r3, #5
 8002a48:	d129      	bne.n	8002a9e <USBD_DFU_EP0_TxReady+0x82>
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 8002a4a:	7823      	ldrb	r3, [r4, #0]
 8002a4c:	2b21      	cmp	r3, #33	@ 0x21
 8002a4e:	d113      	bne.n	8002a78 <USBD_DFU_EP0_TxReady+0x5c>
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8002a50:	f8d4 3001 	ldr.w	r3, [r4, #1]
 8002a54:	f8c4 3408 	str.w	r3, [r4, #1032]	@ 0x408
    hdfu->wlength = 0U;
 8002a58:	2300      	movs	r3, #0
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8002a5a:	2203      	movs	r2, #3
    hdfu->wlength = 0U;
 8002a5c:	f8c4 3404 	str.w	r3, [r4, #1028]	@ 0x404
    hdfu->wblock_num = 0U;
 8002a60:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8002a64:	f884 241c 	strb.w	r2, [r4, #1052]	@ 0x41c
    hdfu->dev_status[1] = 0U;
 8002a68:	f884 3415 	strb.w	r3, [r4, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 8002a6c:	f8a4 3416 	strh.w	r3, [r4, #1046]	@ 0x416
    hdfu->dev_status[4] = hdfu->dev_state;
 8002a70:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
  return (uint8_t)USBD_OK;
 8002a74:	2000      	movs	r0, #0
 8002a76:	e010      	b.n	8002a9a <USBD_DFU_EP0_TxReady+0x7e>
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 8002a78:	2b41      	cmp	r3, #65	@ 0x41
 8002a7a:	d10d      	bne.n	8002a98 <USBD_DFU_EP0_TxReady+0x7c>
          if (DfuInterface->Erase(app_addr_ptr) != USBD_OK)
 8002a7c:	68f3      	ldr	r3, [r6, #12]
 8002a7e:	f8d4 0001 	ldr.w	r0, [r4, #1]
 8002a82:	4798      	blx	r3
 8002a84:	2800      	cmp	r0, #0
 8002a86:	d0e7      	beq.n	8002a58 <USBD_DFU_EP0_TxReady+0x3c>
            hdfu->dev_state = DFU_STATE_ERROR;
 8002a88:	230a      	movs	r3, #10
            hdfu->dev_status[0] = DFU_ERROR_VENDOR;
 8002a8a:	220b      	movs	r2, #11
            hdfu->dev_state = DFU_STATE_ERROR;
 8002a8c:	f884 341c 	strb.w	r3, [r4, #1052]	@ 0x41c
            hdfu->dev_status[0] = DFU_ERROR_VENDOR;
 8002a90:	f8c4 2414 	str.w	r2, [r4, #1044]	@ 0x414
            hdfu->dev_status[4] = hdfu->dev_state;
 8002a94:	f884 3418 	strb.w	r3, [r4, #1048]	@ 0x418
    return (uint8_t)USBD_FAIL;
 8002a98:	2003      	movs	r0, #3
}
 8002a9a:	b002      	add	sp, #8
 8002a9c:	bd70      	pop	{r4, r5, r6, pc}
        hdfu->wlength = 0U;
 8002a9e:	f8c4 1404 	str.w	r1, [r4, #1028]	@ 0x404
        req.bmRequest = 0U;
 8002aa2:	f88d 1000 	strb.w	r1, [sp]
        req.wLength = 1U;
 8002aa6:	2301      	movs	r3, #1
        USBD_CtlError(pdev, &req);
 8002aa8:	4669      	mov	r1, sp
        req.wLength = 1U;
 8002aaa:	f8ad 3006 	strh.w	r3, [sp, #6]
        USBD_CtlError(pdev, &req);
 8002aae:	f000 fe42 	bl	8003736 <USBD_CtlError>
 8002ab2:	e7d1      	b.n	8002a58 <USBD_DFU_EP0_TxReady+0x3c>
      if (hdfu->wblock_num > 1U)
 8002ab4:	2901      	cmp	r1, #1
 8002ab6:	d0cf      	beq.n	8002a58 <USBD_DFU_EP0_TxReady+0x3c>
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8002ab8:	f8d4 0408 	ldr.w	r0, [r4, #1032]	@ 0x408
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 8002abc:	6933      	ldr	r3, [r6, #16]
 8002abe:	f8d4 2404 	ldr.w	r2, [r4, #1028]	@ 0x404
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8002ac2:	3902      	subs	r1, #2
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 8002ac4:	eb00 2181 	add.w	r1, r0, r1, lsl #10
 8002ac8:	4620      	mov	r0, r4
 8002aca:	4798      	blx	r3
 8002acc:	e7da      	b.n	8002a84 <USBD_DFU_EP0_TxReady+0x68>
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 8002ace:	2b07      	cmp	r3, #7
 8002ad0:	d1e2      	bne.n	8002a98 <USBD_DFU_EP0_TxReady+0x7c>
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 8002ad2:	f8d0 02d0 	ldr.w	r0, [r0, #720]	@ 0x2d0
 8002ad6:	f7ff ff89 	bl	80029ec <USBD_DFU_GetDfuFuncDesc>
  if ((hdfu == NULL) || (DfuInterface == NULL) || (pDfuFunc == NULL))
 8002ada:	2e00      	cmp	r6, #0
 8002adc:	d0ca      	beq.n	8002a74 <USBD_DFU_EP0_TxReady+0x58>
 8002ade:	2800      	cmp	r0, #0
 8002ae0:	d0c8      	beq.n	8002a74 <USBD_DFU_EP0_TxReady+0x58>
  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f884 241d 	strb.w	r2, [r4, #1053]	@ 0x41d
  if ((pDfuFunc->bmAttributes & DFU_MANIFEST_MASK) != 0U)
 8002ae8:	7883      	ldrb	r3, [r0, #2]
 8002aea:	f013 0304 	ands.w	r3, r3, #4
 8002aee:	d009      	beq.n	8002b04 <USBD_DFU_EP0_TxReady+0xe8>
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8002af0:	2306      	movs	r3, #6
 8002af2:	f884 341c 	strb.w	r3, [r4, #1052]	@ 0x41c
    hdfu->dev_status[1] = 0U;
 8002af6:	f884 2415 	strb.w	r2, [r4, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 8002afa:	f8a4 2416 	strh.w	r2, [r4, #1046]	@ 0x416
    hdfu->dev_status[4] = hdfu->dev_state;
 8002afe:	f884 3418 	strb.w	r3, [r4, #1048]	@ 0x418
    return;
 8002b02:	e7b7      	b.n	8002a74 <USBD_DFU_EP0_TxReady+0x58>
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8002b04:	2208      	movs	r2, #8
 8002b06:	f884 241c 	strb.w	r2, [r4, #1052]	@ 0x41c
    hdfu->dev_status[1] = 0U;
 8002b0a:	f884 3415 	strb.w	r3, [r4, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 8002b0e:	f8a4 3416 	strh.w	r3, [r4, #1046]	@ 0x416
    hdfu->dev_status[4] = hdfu->dev_state;
 8002b12:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
    (void)USBD_Stop(pdev);
 8002b16:	4628      	mov	r0, r5
 8002b18:	f000 fa5f 	bl	8002fda <USBD_Stop>
  __ASM volatile ("dsb 0xF":::"memory");
 8002b1c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002b20:	4905      	ldr	r1, [pc, #20]	@ (8002b38 <USBD_DFU_EP0_TxReady+0x11c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002b22:	4b06      	ldr	r3, [pc, #24]	@ (8002b3c <USBD_DFU_EP0_TxReady+0x120>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002b24:	68ca      	ldr	r2, [r1, #12]
 8002b26:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	60cb      	str	r3, [r1, #12]
 8002b2e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002b32:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8002b34:	e7fd      	b.n	8002b32 <USBD_DFU_EP0_TxReady+0x116>
 8002b36:	bf00      	nop
 8002b38:	e000ed00 	.word	0xe000ed00
 8002b3c:	05fa0004 	.word	0x05fa0004

08002b40 <USBD_DFU_Setup>:
{
 8002b40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b42:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 8002b46:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  uint16_t status_info = 0U;
 8002b4a:	2300      	movs	r3, #0
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8002b4c:	f8d2 42c0 	ldr.w	r4, [r2, #704]	@ 0x2c0
  uint16_t status_info = 0U;
 8002b50:	f8ad 3006 	strh.w	r3, [sp, #6]
{
 8002b54:	4605      	mov	r5, r0
 8002b56:	460e      	mov	r6, r1
  if (hdfu == NULL)
 8002b58:	2c00      	cmp	r4, #0
 8002b5a:	f000 8183 	beq.w	8002e64 <USBD_DFU_Setup+0x324>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002b5e:	780b      	ldrb	r3, [r1, #0]
 8002b60:	f013 0360 	ands.w	r3, r3, #96	@ 0x60
 8002b64:	f000 8154 	beq.w	8002e10 <USBD_DFU_Setup+0x2d0>
 8002b68:	2b20      	cmp	r3, #32
 8002b6a:	f040 8177 	bne.w	8002e5c <USBD_DFU_Setup+0x31c>
      switch (req->bRequest)
 8002b6e:	784b      	ldrb	r3, [r1, #1]
 8002b70:	2b06      	cmp	r3, #6
 8002b72:	f200 8173 	bhi.w	8002e5c <USBD_DFU_Setup+0x31c>
 8002b76:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002b7a:	0121      	.short	0x0121
 8002b7c:	00370007 	.word	0x00370007
 8002b80:	00f300a4 	.word	0x00f300a4
 8002b84:	01090105 	.word	0x01090105
  if (req->wLength > 0U)
 8002b88:	88f2      	ldrh	r2, [r6, #6]
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 8002b8a:	f894 341c 	ldrb.w	r3, [r4, #1052]	@ 0x41c
  if (req->wLength > 0U)
 8002b8e:	b1d2      	cbz	r2, 8002bc6 <USBD_DFU_Setup+0x86>
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d001      	beq.n	8002b98 <USBD_DFU_Setup+0x58>
 8002b94:	2b05      	cmp	r3, #5
 8002b96:	d174      	bne.n	8002c82 <USBD_DFU_Setup+0x142>
      hdfu->wblock_num = req->wValue;
 8002b98:	8873      	ldrh	r3, [r6, #2]
 8002b9a:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 8002b9e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8002ba2:	f04f 0303 	mov.w	r3, #3
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 8002ba6:	bf28      	it	cs
 8002ba8:	f44f 6280 	movcs.w	r2, #1024	@ 0x400
 8002bac:	f8c4 2404 	str.w	r2, [r4, #1028]	@ 0x404
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8002bb0:	f884 341c 	strb.w	r3, [r4, #1052]	@ 0x41c
      hdfu->dev_status[4] = hdfu->dev_state;
 8002bb4:	f884 3418 	strb.w	r3, [r4, #1048]	@ 0x418
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 8002bb8:	4621      	mov	r1, r4
 8002bba:	4628      	mov	r0, r5
 8002bbc:	f000 fdf7 	bl	80037ae <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 8002bc0:	2000      	movs	r0, #0
}
 8002bc2:	b003      	add	sp, #12
 8002bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 8002bc6:	2b05      	cmp	r3, #5
 8002bc8:	d001      	beq.n	8002bce <USBD_DFU_Setup+0x8e>
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d159      	bne.n	8002c82 <USBD_DFU_Setup+0x142>
        hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8002bce:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8002bd2:	f8a4 341c 	strh.w	r3, [r4, #1052]	@ 0x41c
        hdfu->dev_status[1] = 0U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	f884 3415 	strb.w	r3, [r4, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 8002bdc:	f8a4 3416 	strh.w	r3, [r4, #1046]	@ 0x416
        hdfu->dev_status[4] = hdfu->dev_state;
 8002be0:	2306      	movs	r3, #6
    hdfu->dev_status[4] = hdfu->dev_state;
 8002be2:	f884 3418 	strb.w	r3, [r4, #1048]	@ 0x418
 8002be6:	e7eb      	b.n	8002bc0 <USBD_DFU_Setup+0x80>
  if (req->wLength > 0U)
 8002be8:	88f1      	ldrh	r1, [r6, #6]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 8002bea:	f8d2 72c4 	ldr.w	r7, [r2, #708]	@ 0x2c4
  if (req->wLength > 0U)
 8002bee:	2900      	cmp	r1, #0
 8002bf0:	d05f      	beq.n	8002cb2 <USBD_DFU_Setup+0x172>
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8002bf2:	f894 241c 	ldrb.w	r2, [r4, #1052]	@ 0x41c
 8002bf6:	2a02      	cmp	r2, #2
 8002bf8:	d001      	beq.n	8002bfe <USBD_DFU_Setup+0xbe>
 8002bfa:	2a09      	cmp	r2, #9
 8002bfc:	d153      	bne.n	8002ca6 <USBD_DFU_Setup+0x166>
      hdfu->wblock_num = req->wValue;
 8002bfe:	8870      	ldrh	r0, [r6, #2]
 8002c00:	f8c4 0400 	str.w	r0, [r4, #1024]	@ 0x400
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 8002c04:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8002c08:	460a      	mov	r2, r1
 8002c0a:	bf28      	it	cs
 8002c0c:	f44f 6280 	movcs.w	r2, #1024	@ 0x400
 8002c10:	f8c4 2404 	str.w	r2, [r4, #1028]	@ 0x404
      if (hdfu->wblock_num == 0U)
 8002c14:	b9a8      	cbnz	r0, 8002c42 <USBD_DFU_Setup+0x102>
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 8002c16:	2903      	cmp	r1, #3
 8002c18:	bf98      	it	ls
 8002c1a:	2309      	movls	r3, #9
 8002c1c:	f884 341c 	strb.w	r3, [r4, #1052]	@ 0x41c
        hdfu->dev_status[4] = hdfu->dev_state;
 8002c20:	f884 3418 	strb.w	r3, [r4, #1048]	@ 0x418
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8002c24:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 8002c28:	8023      	strh	r3, [r4, #0]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8002c2a:	2341      	movs	r3, #65	@ 0x41
        hdfu->dev_status[1] = 0U;
 8002c2c:	f884 0415 	strb.w	r0, [r4, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 8002c30:	f8a4 0416 	strh.w	r0, [r4, #1046]	@ 0x416
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8002c34:	70a3      	strb	r3, [r4, #2]
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), CmdLength);
 8002c36:	2203      	movs	r2, #3
 8002c38:	4621      	mov	r1, r4
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 8002c3a:	4628      	mov	r0, r5
 8002c3c:	f000 fda2 	bl	8003784 <USBD_CtlSendData>
 8002c40:	e7be      	b.n	8002bc0 <USBD_DFU_Setup+0x80>
      else if (hdfu->wblock_num > 1U)
 8002c42:	2801      	cmp	r0, #1
 8002c44:	f04f 0300 	mov.w	r3, #0
 8002c48:	d023      	beq.n	8002c92 <USBD_DFU_Setup+0x152>
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8002c4a:	2109      	movs	r1, #9
        hdfu->dev_status[1] = 0U;
 8002c4c:	f884 3415 	strb.w	r3, [r4, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 8002c50:	f8a4 3416 	strh.w	r3, [r4, #1046]	@ 0x416
          addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8002c54:	f8d4 3408 	ldr.w	r3, [r4, #1032]	@ 0x408
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8002c58:	f884 141c 	strb.w	r1, [r4, #1052]	@ 0x41c
        hdfu->dev_status[4] = hdfu->dev_state;
 8002c5c:	f884 1418 	strb.w	r1, [r4, #1048]	@ 0x418
          addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8002c60:	3802      	subs	r0, #2
          phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 8002c62:	4621      	mov	r1, r4
 8002c64:	697f      	ldr	r7, [r7, #20]
 8002c66:	eb03 2080 	add.w	r0, r3, r0, lsl #10
 8002c6a:	47b8      	blx	r7
          if (phaddr == NULL)
 8002c6c:	4601      	mov	r1, r0
 8002c6e:	b968      	cbnz	r0, 8002c8c <USBD_DFU_Setup+0x14c>
            hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8002c70:	230f      	movs	r3, #15
 8002c72:	f884 341c 	strb.w	r3, [r4, #1052]	@ 0x41c
            hdfu->dev_status[1] = 0U;
 8002c76:	f884 0415 	strb.w	r0, [r4, #1045]	@ 0x415
            hdfu->dev_status[2] = 0U;
 8002c7a:	f8a4 0416 	strh.w	r0, [r4, #1046]	@ 0x416
            hdfu->dev_status[4] = hdfu->dev_state;
 8002c7e:	f884 3418 	strb.w	r3, [r4, #1048]	@ 0x418
      USBD_CtlError(pdev, req);
 8002c82:	4631      	mov	r1, r6
 8002c84:	4628      	mov	r0, r5
 8002c86:	f000 fd56 	bl	8003736 <USBD_CtlError>
 8002c8a:	e799      	b.n	8002bc0 <USBD_DFU_Setup+0x80>
            (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 8002c8c:	f8d4 2404 	ldr.w	r2, [r4, #1028]	@ 0x404
 8002c90:	e7d3      	b.n	8002c3a <USBD_DFU_Setup+0xfa>
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8002c92:	220f      	movs	r2, #15
 8002c94:	f884 241c 	strb.w	r2, [r4, #1052]	@ 0x41c
        hdfu->dev_status[1] = 0U;
 8002c98:	f884 3415 	strb.w	r3, [r4, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 8002c9c:	f8a4 3416 	strh.w	r3, [r4, #1046]	@ 0x416
        hdfu->dev_status[4] = hdfu->dev_state;
 8002ca0:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
        USBD_CtlError(pdev, req);
 8002ca4:	e7ed      	b.n	8002c82 <USBD_DFU_Setup+0x142>
      hdfu->wlength = 0U;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	f8c4 3404 	str.w	r3, [r4, #1028]	@ 0x404
      hdfu->wblock_num = 0U;
 8002cac:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
      USBD_CtlError(pdev, req);
 8002cb0:	e7e7      	b.n	8002c82 <USBD_DFU_Setup+0x142>
    hdfu->dev_state = DFU_STATE_IDLE;
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	f884 341c 	strb.w	r3, [r4, #1052]	@ 0x41c
    hdfu->dev_status[1] = 0U;
 8002cb8:	f884 1415 	strb.w	r1, [r4, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 8002cbc:	f8a4 1416 	strh.w	r1, [r4, #1046]	@ 0x416
 8002cc0:	e78f      	b.n	8002be2 <USBD_DFU_Setup+0xa2>
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 8002cc2:	f8d2 72c4 	ldr.w	r7, [r2, #708]	@ 0x2c4
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 8002cc6:	f8d0 02d0 	ldr.w	r0, [r0, #720]	@ 0x2d0
 8002cca:	f7ff fe8f 	bl	80029ec <USBD_DFU_GetDfuFuncDesc>
  if ((hdfu == NULL) || (DfuInterface == NULL) || (pDfuFunc == NULL))
 8002cce:	2f00      	cmp	r7, #0
 8002cd0:	f43f af76 	beq.w	8002bc0 <USBD_DFU_Setup+0x80>
 8002cd4:	2800      	cmp	r0, #0
 8002cd6:	f43f af73 	beq.w	8002bc0 <USBD_DFU_Setup+0x80>
  switch (hdfu->dev_state)
 8002cda:	f894 341c 	ldrb.w	r3, [r4, #1052]	@ 0x41c
 8002cde:	2b03      	cmp	r3, #3
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8002ce0:	f204 4614 	addw	r6, r4, #1044	@ 0x414
  switch (hdfu->dev_state)
 8002ce4:	d004      	beq.n	8002cf0 <USBD_DFU_Setup+0x1b0>
 8002ce6:	2b06      	cmp	r3, #6
 8002ce8:	d024      	beq.n	8002d34 <USBD_DFU_Setup+0x1f4>
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 8002cea:	2206      	movs	r2, #6
 8002cec:	4631      	mov	r1, r6
 8002cee:	e7a4      	b.n	8002c3a <USBD_DFU_Setup+0xfa>
      if (hdfu->wlength != 0U)
 8002cf0:	f8d4 3404 	ldr.w	r3, [r4, #1028]	@ 0x404
 8002cf4:	b1c3      	cbz	r3, 8002d28 <USBD_DFU_Setup+0x1e8>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 8002cf6:	2304      	movs	r3, #4
        hdfu->dev_status[1] = 0U;
 8002cf8:	2200      	movs	r2, #0
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 8002cfa:	f8d4 1400 	ldr.w	r1, [r4, #1024]	@ 0x400
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 8002cfe:	f884 341c 	strb.w	r3, [r4, #1052]	@ 0x41c
        hdfu->dev_status[1] = 0U;
 8002d02:	f884 2415 	strb.w	r2, [r4, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 8002d06:	f8a4 2416 	strh.w	r2, [r4, #1046]	@ 0x416
        hdfu->dev_status[4] = hdfu->dev_state;
 8002d0a:	f884 3418 	strb.w	r3, [r4, #1048]	@ 0x418
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	f8d4 0408 	ldr.w	r0, [r4, #1032]	@ 0x408
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 8002d14:	b929      	cbnz	r1, 8002d22 <USBD_DFU_Setup+0x1e2>
 8002d16:	7822      	ldrb	r2, [r4, #0]
 8002d18:	2a41      	cmp	r2, #65	@ 0x41
 8002d1a:	d102      	bne.n	8002d22 <USBD_DFU_Setup+0x1e2>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8002d1c:	4632      	mov	r2, r6
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 8002d1e:	4798      	blx	r3
 8002d20:	e7e3      	b.n	8002cea <USBD_DFU_Setup+0x1aa>
 8002d22:	4632      	mov	r2, r6
 8002d24:	2101      	movs	r1, #1
 8002d26:	e7fa      	b.n	8002d1e <USBD_DFU_Setup+0x1de>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 8002d28:	2205      	movs	r2, #5
          hdfu->dev_state = DFU_STATE_IDLE;
 8002d2a:	f884 241c 	strb.w	r2, [r4, #1052]	@ 0x41c
          hdfu->dev_status[1] = 0U;
 8002d2e:	f884 3415 	strb.w	r3, [r4, #1045]	@ 0x415
 8002d32:	e009      	b.n	8002d48 <USBD_DFU_Setup+0x208>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 8002d34:	f894 341d 	ldrb.w	r3, [r4, #1053]	@ 0x41d
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d10a      	bne.n	8002d52 <USBD_DFU_Setup+0x212>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 8002d3c:	2207      	movs	r2, #7
        hdfu->dev_status[1] = 1U;             /* bwPollTimeout = 1ms */
 8002d3e:	f884 3415 	strb.w	r3, [r4, #1045]	@ 0x415
        hdfu->dev_state = DFU_STATE_MANIFEST;
 8002d42:	f884 241c 	strb.w	r2, [r4, #1052]	@ 0x41c
        hdfu->dev_status[2] = 0U;
 8002d46:	2300      	movs	r3, #0
          hdfu->dev_status[2] = 0U;
 8002d48:	f8a4 3416 	strh.w	r3, [r4, #1046]	@ 0x416
          hdfu->dev_status[4] = hdfu->dev_state;
 8002d4c:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
 8002d50:	e7cb      	b.n	8002cea <USBD_DFU_Setup+0x1aa>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1c9      	bne.n	8002cea <USBD_DFU_Setup+0x1aa>
 8002d56:	7882      	ldrb	r2, [r0, #2]
 8002d58:	0752      	lsls	r2, r2, #29
 8002d5a:	d5c6      	bpl.n	8002cea <USBD_DFU_Setup+0x1aa>
          hdfu->dev_state = DFU_STATE_IDLE;
 8002d5c:	2202      	movs	r2, #2
 8002d5e:	e7e4      	b.n	8002d2a <USBD_DFU_Setup+0x1ea>
  if (hdfu->dev_state == DFU_STATE_ERROR)
 8002d60:	f894 341c 	ldrb.w	r3, [r4, #1052]	@ 0x41c
 8002d64:	2b0a      	cmp	r3, #10
    hdfu->dev_state = DFU_STATE_IDLE;
 8002d66:	bf0b      	itete	eq
 8002d68:	2302      	moveq	r3, #2
    hdfu->dev_state = DFU_STATE_ERROR;
 8002d6a:	230a      	movne	r3, #10
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 8002d6c:	2200      	moveq	r2, #0
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 8002d6e:	220e      	movne	r2, #14
    hdfu->dev_state = DFU_STATE_IDLE;
 8002d70:	bf0c      	ite	eq
 8002d72:	f884 341c 	strbeq.w	r3, [r4, #1052]	@ 0x41c
    hdfu->dev_state = DFU_STATE_ERROR;
 8002d76:	f884 341c 	strbne.w	r3, [r4, #1052]	@ 0x41c
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 8002d7a:	f8c4 2414 	str.w	r2, [r4, #1044]	@ 0x414
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 8002d7e:	f8a4 3418 	strh.w	r3, [r4, #1048]	@ 0x418
 8002d82:	e71d      	b.n	8002bc0 <USBD_DFU_Setup+0x80>
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 8002d84:	2201      	movs	r2, #1
 8002d86:	f204 411c 	addw	r1, r4, #1052	@ 0x41c
 8002d8a:	e756      	b.n	8002c3a <USBD_DFU_Setup+0xfa>
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8002d8c:	f894 241c 	ldrb.w	r2, [r4, #1052]	@ 0x41c
 8002d90:	2a09      	cmp	r2, #9
 8002d92:	f63f af15 	bhi.w	8002bc0 <USBD_DFU_Setup+0x80>
 8002d96:	f46f 731b 	mvn.w	r3, #620	@ 0x26c
 8002d9a:	4113      	asrs	r3, r2
 8002d9c:	f013 0301 	ands.w	r3, r3, #1
 8002da0:	f47f af0e 	bne.w	8002bc0 <USBD_DFU_Setup+0x80>
    hdfu->dev_state = DFU_STATE_IDLE;
 8002da4:	2202      	movs	r2, #2
 8002da6:	f884 241c 	strb.w	r2, [r4, #1052]	@ 0x41c
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8002daa:	f8c4 3414 	str.w	r3, [r4, #1044]	@ 0x414
    hdfu->dev_status[4] = hdfu->dev_state;
 8002dae:	f8a4 2418 	strh.w	r2, [r4, #1048]	@ 0x418
    hdfu->wblock_num = 0U;
 8002db2:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
    hdfu->wlength = 0U;
 8002db6:	f8c4 3404 	str.w	r3, [r4, #1028]	@ 0x404
 8002dba:	e701      	b.n	8002bc0 <USBD_DFU_Setup+0x80>
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 8002dbc:	f8d0 02d0 	ldr.w	r0, [r0, #720]	@ 0x2d0
 8002dc0:	f7ff fe14 	bl	80029ec <USBD_DFU_GetDfuFuncDesc>
  if ((hdfu == NULL) || (pDfuFunc == NULL))
 8002dc4:	2800      	cmp	r0, #0
 8002dc6:	f43f aefb 	beq.w	8002bc0 <USBD_DFU_Setup+0x80>
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8002dca:	f894 241c 	ldrb.w	r2, [r4, #1052]	@ 0x41c
 8002dce:	2a09      	cmp	r2, #9
 8002dd0:	d810      	bhi.n	8002df4 <USBD_DFU_Setup+0x2b4>
 8002dd2:	f46f 731b 	mvn.w	r3, #620	@ 0x26c
 8002dd6:	4113      	asrs	r3, r2
 8002dd8:	f013 0301 	ands.w	r3, r3, #1
 8002ddc:	d10a      	bne.n	8002df4 <USBD_DFU_Setup+0x2b4>
    hdfu->dev_state = DFU_STATE_IDLE;
 8002dde:	2202      	movs	r2, #2
 8002de0:	f884 241c 	strb.w	r2, [r4, #1052]	@ 0x41c
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8002de4:	f8c4 3414 	str.w	r3, [r4, #1044]	@ 0x414
    hdfu->dev_status[4] = hdfu->dev_state;
 8002de8:	f8a4 2418 	strh.w	r2, [r4, #1048]	@ 0x418
    hdfu->wblock_num = 0U;
 8002dec:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
    hdfu->wlength = 0U;
 8002df0:	f8c4 3404 	str.w	r3, [r4, #1028]	@ 0x404
  if ((pDfuFunc->bmAttributes & DFU_DETACH_MASK) != 0U)
 8002df4:	7883      	ldrb	r3, [r0, #2]
 8002df6:	071b      	lsls	r3, r3, #28
 8002df8:	d506      	bpl.n	8002e08 <USBD_DFU_Setup+0x2c8>
    (void)USBD_Stop(pdev);
 8002dfa:	4628      	mov	r0, r5
 8002dfc:	f000 f8ed 	bl	8002fda <USBD_Stop>
    (void)USBD_Start(pdev);
 8002e00:	4628      	mov	r0, r5
 8002e02:	f000 f8e8 	bl	8002fd6 <USBD_Start>
 8002e06:	e6db      	b.n	8002bc0 <USBD_DFU_Setup+0x80>
    USBD_Delay((uint32_t)req->wValue);
 8002e08:	8870      	ldrh	r0, [r6, #2]
 8002e0a:	f7fd fd45 	bl	8000898 <HAL_Delay>
 8002e0e:	e6d7      	b.n	8002bc0 <USBD_DFU_Setup+0x80>
      switch (req->bRequest)
 8002e10:	784b      	ldrb	r3, [r1, #1]
 8002e12:	2b0b      	cmp	r3, #11
 8002e14:	d822      	bhi.n	8002e5c <USBD_DFU_Setup+0x31c>
 8002e16:	a201      	add	r2, pc, #4	@ (adr r2, 8002e1c <USBD_DFU_Setup+0x2dc>)
 8002e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e1c:	08002e4d 	.word	0x08002e4d
 8002e20:	08002bc1 	.word	0x08002bc1
 8002e24:	08002e5d 	.word	0x08002e5d
 8002e28:	08002e5d 	.word	0x08002e5d
 8002e2c:	08002e5d 	.word	0x08002e5d
 8002e30:	08002e5d 	.word	0x08002e5d
 8002e34:	08002e69 	.word	0x08002e69
 8002e38:	08002e5d 	.word	0x08002e5d
 8002e3c:	08002e5d 	.word	0x08002e5d
 8002e40:	08002e5d 	.word	0x08002e5d
 8002e44:	08002e8b 	.word	0x08002e8b
 8002e48:	08002e9b 	.word	0x08002e9b
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002e4c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8002e50:	2b03      	cmp	r3, #3
 8002e52:	d103      	bne.n	8002e5c <USBD_DFU_Setup+0x31c>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8002e54:	2202      	movs	r2, #2
 8002e56:	f10d 0106 	add.w	r1, sp, #6
 8002e5a:	e6ee      	b.n	8002c3a <USBD_DFU_Setup+0xfa>
            USBD_CtlError(pdev, req);
 8002e5c:	4631      	mov	r1, r6
 8002e5e:	4628      	mov	r0, r5
 8002e60:	f000 fc69 	bl	8003736 <USBD_CtlError>
    return (uint8_t)USBD_FAIL;
 8002e64:	2003      	movs	r0, #3
 8002e66:	e6ac      	b.n	8002bc2 <USBD_DFU_Setup+0x82>
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 8002e68:	884b      	ldrh	r3, [r1, #2]
 8002e6a:	0a1b      	lsrs	r3, r3, #8
 8002e6c:	2b21      	cmp	r3, #33	@ 0x21
 8002e6e:	f47f aea7 	bne.w	8002bc0 <USBD_DFU_Setup+0x80>
            pbuf = (uint8_t *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 8002e72:	f8d0 02d0 	ldr.w	r0, [r0, #720]	@ 0x2d0
 8002e76:	f7ff fdb9 	bl	80029ec <USBD_DFU_GetDfuFuncDesc>
            if (pbuf != NULL)
 8002e7a:	4601      	mov	r1, r0
 8002e7c:	2800      	cmp	r0, #0
 8002e7e:	d0ed      	beq.n	8002e5c <USBD_DFU_Setup+0x31c>
              len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 8002e80:	88f2      	ldrh	r2, [r6, #6]
              (void)USBD_CtlSendData(pdev, pbuf, len);
 8002e82:	2a09      	cmp	r2, #9
 8002e84:	bf28      	it	cs
 8002e86:	2209      	movcs	r2, #9
 8002e88:	e6d7      	b.n	8002c3a <USBD_DFU_Setup+0xfa>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002e8a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8002e8e:	2b03      	cmp	r3, #3
 8002e90:	d1e4      	bne.n	8002e5c <USBD_DFU_Setup+0x31c>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 8002e92:	2201      	movs	r2, #1
 8002e94:	f504 6182 	add.w	r1, r4, #1040	@ 0x410
 8002e98:	e6cf      	b.n	8002c3a <USBD_DFU_Setup+0xfa>
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 8002e9a:	788b      	ldrb	r3, [r1, #2]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1dd      	bne.n	8002e5c <USBD_DFU_Setup+0x31c>
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002ea0:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8002ea4:	2a03      	cmp	r2, #3
 8002ea6:	d1d9      	bne.n	8002e5c <USBD_DFU_Setup+0x31c>
              hdfu->alt_setting = (uint8_t)(req->wValue);
 8002ea8:	f8c4 3410 	str.w	r3, [r4, #1040]	@ 0x410
 8002eac:	e688      	b.n	8002bc0 <USBD_DFU_Setup+0x80>
 8002eae:	bf00      	nop

08002eb0 <USBD_DFU_DeInit>:
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8002eb0:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 8002eb4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
{
 8002eb8:	b538      	push	{r3, r4, r5, lr}
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8002eba:	f8d2 32c0 	ldr.w	r3, [r2, #704]	@ 0x2c0
{
 8002ebe:	4604      	mov	r4, r0
 8002ec0:	2002      	movs	r0, #2
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8002ec2:	b1eb      	cbz	r3, 8002f00 <USBD_DFU_DeInit+0x50>
  hdfu->wblock_num = 0U;
 8002ec4:	2500      	movs	r5, #0
  hdfu->dev_state = DFU_STATE_IDLE;
 8002ec6:	f883 041c 	strb.w	r0, [r3, #1052]	@ 0x41c
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8002eca:	f883 5414 	strb.w	r5, [r3, #1044]	@ 0x414
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8002ece:	f883 0418 	strb.w	r0, [r3, #1048]	@ 0x418
  hdfu->wblock_num = 0U;
 8002ed2:	f8c3 5400 	str.w	r5, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 8002ed6:	f8c3 5404 	str.w	r5, [r3, #1028]	@ 0x404
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8002eda:	f8d2 32c4 	ldr.w	r3, [r2, #708]	@ 0x2c4
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	4798      	blx	r3
  USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8002ee2:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8002ee6:	33b0      	adds	r3, #176	@ 0xb0
 8002ee8:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8002eec:	f000 fe8a 	bl	8003c04 <USBD_static_free>
  pdev->pClassDataCmsit[pdev->classId] = NULL;
 8002ef0:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8002ef4:	33b0      	adds	r3, #176	@ 0xb0
  return (uint8_t)USBD_OK;
 8002ef6:	4628      	mov	r0, r5
  pdev->pClassDataCmsit[pdev->classId] = NULL;
 8002ef8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
  pdev->pClassData = NULL;
 8002efc:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
}
 8002f00:	bd38      	pop	{r3, r4, r5, pc}
	...

08002f04 <USBD_DFU_Init>:
{
 8002f04:	b510      	push	{r4, lr}
 8002f06:	4604      	mov	r4, r0
  hdfu = (USBD_DFU_HandleTypeDef *)USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 8002f08:	f44f 6084 	mov.w	r0, #1056	@ 0x420
 8002f0c:	f000 fe76 	bl	8003bfc <USBD_static_malloc>
  if (hdfu == NULL)
 8002f10:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8002f14:	b920      	cbnz	r0, 8002f20 <USBD_DFU_Init+0x1c>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8002f16:	33b0      	adds	r3, #176	@ 0xb0
 8002f18:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
    return (uint8_t)USBD_EMEM;
 8002f1c:	2002      	movs	r0, #2
}
 8002f1e:	bd10      	pop	{r4, pc}
  pdev->pClassDataCmsit[pdev->classId] = (void *)hdfu;
 8002f20:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8002f24:	4a0e      	ldr	r2, [pc, #56]	@ (8002f60 <USBD_DFU_Init+0x5c>)
  pdev->pClassDataCmsit[pdev->classId] = (void *)hdfu;
 8002f26:	f8c3 02c0 	str.w	r0, [r3, #704]	@ 0x2c0
  hdfu->dev_state = DFU_STATE_IDLE;
 8002f2a:	2102      	movs	r1, #2
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8002f2c:	f8c4 02bc 	str.w	r0, [r4, #700]	@ 0x2bc
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8002f30:	f8c0 2408 	str.w	r2, [r0, #1032]	@ 0x408
  hdfu->wblock_num = 0U;
 8002f34:	2200      	movs	r2, #0
  hdfu->dev_state = DFU_STATE_IDLE;
 8002f36:	f8a0 141c 	strh.w	r1, [r0, #1052]	@ 0x41c
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8002f3a:	f8c0 2414 	str.w	r2, [r0, #1044]	@ 0x414
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8002f3e:	f8a0 1418 	strh.w	r1, [r0, #1048]	@ 0x418
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId])->Init() != USBD_OK)
 8002f42:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
  hdfu->wblock_num = 0U;
 8002f46:	f8c0 2400 	str.w	r2, [r0, #1024]	@ 0x400
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId])->Init() != USBD_OK)
 8002f4a:	685b      	ldr	r3, [r3, #4]
  hdfu->wlength = 0U;
 8002f4c:	f8c0 2404 	str.w	r2, [r0, #1028]	@ 0x404
  hdfu->alt_setting = 0U;
 8002f50:	f8c0 2410 	str.w	r2, [r0, #1040]	@ 0x410
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId])->Init() != USBD_OK)
 8002f54:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8002f56:	2800      	cmp	r0, #0
 8002f58:	bf14      	ite	ne
 8002f5a:	2003      	movne	r0, #3
 8002f5c:	2000      	moveq	r0, #0
 8002f5e:	e7de      	b.n	8002f1e <USBD_DFU_Init+0x1a>
 8002f60:	08005000 	.word	0x08005000

08002f64 <USBD_DFU_SOF>:
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
 8002f64:	2000      	movs	r0, #0
 8002f66:	4770      	bx	lr

08002f68 <USBD_DFU_RegisterMedia>:
  if (fops == NULL)
 8002f68:	b139      	cbz	r1, 8002f7a <USBD_DFU_RegisterMedia+0x12>
  pdev->pUserData[pdev->classId] = fops;
 8002f6a:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8002f6e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8002f72:	f8c0 12c4 	str.w	r1, [r0, #708]	@ 0x2c4
  return (uint8_t)USBD_OK;
 8002f76:	2000      	movs	r0, #0
 8002f78:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8002f7a:	2003      	movs	r0, #3
}
 8002f7c:	4770      	bx	lr

08002f7e <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8002f7e:	b178      	cbz	r0, 8002fa0 <USBD_Init+0x22>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8002f80:	2300      	movs	r3, #0
 8002f82:	f8c0 32b8 	str.w	r3, [r0, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8002f86:	f8c0 32c4 	str.w	r3, [r0, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8002f8a:	f8c0 32d0 	str.w	r3, [r0, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8002f8e:	b109      	cbz	r1, 8002f94 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8002f90:	f8c0 12b4 	str.w	r1, [r0, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002f94:	2301      	movs	r3, #1
 8002f96:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  pdev->id = id;
 8002f9a:	7002      	strb	r2, [r0, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8002f9c:	f000 bdee 	b.w	8003b7c <USBD_LL_Init>

  return ret;
}
 8002fa0:	2003      	movs	r0, #3
 8002fa2:	4770      	bx	lr

08002fa4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8002fa4:	b513      	push	{r0, r1, r4, lr}
  uint16_t len = 0U;
 8002fa6:	2300      	movs	r3, #0
{
 8002fa8:	4604      	mov	r4, r0
  uint16_t len = 0U;
 8002faa:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8002fae:	b181      	cbz	r1, 8002fd2 <USBD_RegisterClass+0x2e>
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8002fb0:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
  pdev->pClass[0] = pclass;
 8002fb2:	f8c0 12b8 	str.w	r1, [r0, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8002fb6:	b123      	cbz	r3, 8002fc2 <USBD_RegisterClass+0x1e>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8002fb8:	f10d 0006 	add.w	r0, sp, #6
 8002fbc:	4798      	blx	r3
 8002fbe:	f8c4 02d0 	str.w	r0, [r4, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8002fc2:	f8d4 32d8 	ldr.w	r3, [r4, #728]	@ 0x2d8
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	f8c4 32d8 	str.w	r3, [r4, #728]	@ 0x2d8

  return USBD_OK;
 8002fcc:	2000      	movs	r0, #0
}
 8002fce:	b002      	add	sp, #8
 8002fd0:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8002fd2:	2003      	movs	r0, #3
 8002fd4:	e7fb      	b.n	8002fce <USBD_RegisterClass+0x2a>

08002fd6 <USBD_Start>:
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8002fd6:	f000 be1c 	b.w	8003c12 <USBD_LL_Start>

08002fda <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8002fda:	b510      	push	{r4, lr}
 8002fdc:	4604      	mov	r4, r0
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 8002fde:	f000 fe21 	bl	8003c24 <USBD_LL_Stop>
  }

  /* Reset the class ID */
  pdev->classId = 0U;
#else
  if (pdev->pClass[0] != NULL)
 8002fe2:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 8002fe6:	b11b      	cbz	r3, 8002ff0 <USBD_Stop+0x16>
  {
    (void)pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	7921      	ldrb	r1, [r4, #4]
 8002fec:	4620      	mov	r0, r4
 8002fee:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return USBD_OK;
}
 8002ff0:	2000      	movs	r0, #0
 8002ff2:	bd10      	pop	{r4, pc}

08002ff4 <USBD_SetClassConfig>:
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8002ff4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8002ff8:	b10b      	cbz	r3, 8002ffe <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4718      	bx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	4770      	bx	lr

08003002 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003002:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8003004:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	4798      	blx	r3
  {
    ret = USBD_FAIL;
 800300c:	2800      	cmp	r0, #0
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 800300e:	bf18      	it	ne
 8003010:	2003      	movne	r0, #3
 8003012:	bd08      	pop	{r3, pc}

08003014 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003014:	b538      	push	{r3, r4, r5, lr}
 8003016:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003018:	f200 25aa 	addw	r5, r0, #682	@ 0x2aa
 800301c:	4628      	mov	r0, r5
 800301e:	f000 fb7f 	bl	8003720 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8003022:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8003024:	f894 12aa 	ldrb.w	r1, [r4, #682]	@ 0x2aa
  pdev->ep0_state = USBD_EP0_SETUP;
 8003028:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 800302c:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	@ 0x2b0
 8003030:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8003034:	f001 031f 	and.w	r3, r1, #31
 8003038:	2b01      	cmp	r3, #1
 800303a:	d008      	beq.n	800304e <USBD_LL_SetupStage+0x3a>
 800303c:	2b02      	cmp	r3, #2
 800303e:	d00c      	beq.n	800305a <USBD_LL_SetupStage+0x46>
 8003040:	b98b      	cbnz	r3, 8003066 <USBD_LL_SetupStage+0x52>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8003042:	4629      	mov	r1, r5
 8003044:	4620      	mov	r0, r4
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 8003046:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800304a:	f000 b941 	b.w	80032d0 <USBD_StdDevReq>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800304e:	4629      	mov	r1, r5
 8003050:	4620      	mov	r0, r4
}
 8003052:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8003056:	f000 ba99 	b.w	800358c <USBD_StdItfReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800305a:	4629      	mov	r1, r5
 800305c:	4620      	mov	r0, r4
}
 800305e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8003062:	f000 bac0 	b.w	80035e6 <USBD_StdEPReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8003066:	4620      	mov	r0, r4
 8003068:	f001 0180 	and.w	r1, r1, #128	@ 0x80
}
 800306c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8003070:	f000 bded 	b.w	8003c4e <USBD_LL_StallEP>

08003074 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8003074:	b570      	push	{r4, r5, r6, lr}
 8003076:	4604      	mov	r4, r0
 8003078:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
  uint8_t idx;

  if (epnum == 0U)
 800307a:	bb09      	cbnz	r1, 80030c0 <USBD_LL_DataOutStage+0x4c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800307c:	f8d0 3294 	ldr.w	r3, [r0, #660]	@ 0x294
 8003080:	2b03      	cmp	r3, #3
 8003082:	d10c      	bne.n	800309e <USBD_LL_DataOutStage+0x2a>
    {
      if (pep->rem_length > pep->maxpacket)
 8003084:	e9d0 3257 	ldrd	r3, r2, [r0, #348]	@ 0x15c
 8003088:	4293      	cmp	r3, r2
 800308a:	d90a      	bls.n	80030a2 <USBD_LL_DataOutStage+0x2e>
      {
        pep->rem_length -= pep->maxpacket;
 800308c:	1a9b      	subs	r3, r3, r2

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800308e:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 8003090:	f8c0 315c 	str.w	r3, [r0, #348]	@ 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8003094:	bf28      	it	cs
 8003096:	461a      	movcs	r2, r3
 8003098:	4631      	mov	r1, r6
 800309a:	f000 fb95 	bl	80037c8 <USBD_CtlContinueRx>
      }
    }
  }

  return USBD_OK;
}
 800309e:	2000      	movs	r0, #0
 80030a0:	bd70      	pop	{r4, r5, r6, pc}
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80030a2:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80030a6:	2b03      	cmp	r3, #3
 80030a8:	d106      	bne.n	80030b8 <USBD_LL_DataOutStage+0x44>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80030aa:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	b113      	cbz	r3, 80030b8 <USBD_LL_DataOutStage+0x44>
              pdev->classId = idx;
 80030b2:	f8c0 12d4 	str.w	r1, [r0, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80030b6:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 80030b8:	4620      	mov	r0, r4
 80030ba:	f000 fb8d 	bl	80037d8 <USBD_CtlSendStatus>
 80030be:	e7ee      	b.n	800309e <USBD_LL_DataOutStage+0x2a>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80030c0:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80030c4:	2b03      	cmp	r3, #3
 80030c6:	d1ea      	bne.n	800309e <USBD_LL_DataOutStage+0x2a>
        if (pdev->pClass[idx]->DataOut != NULL)
 80030c8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0e5      	beq.n	800309e <USBD_LL_DataOutStage+0x2a>
          pdev->classId = idx;
 80030d2:	2200      	movs	r2, #0
}
 80030d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          pdev->classId = idx;
 80030d8:	f8c0 22d4 	str.w	r2, [r0, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80030dc:	4718      	bx	r3

080030de <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80030de:	b570      	push	{r4, r5, r6, lr}
 80030e0:	4604      	mov	r4, r0
 80030e2:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80030e4:	460d      	mov	r5, r1
 80030e6:	2900      	cmp	r1, #0
 80030e8:	d13d      	bne.n	8003166 <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80030ea:	f8d0 3294 	ldr.w	r3, [r0, #660]	@ 0x294
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d10e      	bne.n	8003110 <USBD_LL_DataInStage+0x32>
    {
      if (pep->rem_length > pep->maxpacket)
 80030f2:	e9d0 3207 	ldrd	r3, r2, [r0, #28]
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d912      	bls.n	8003120 <USBD_LL_DataInStage+0x42>
      {
        pep->rem_length -= pep->maxpacket;
 80030fa:	1a9a      	subs	r2, r3, r2
 80030fc:	61c2      	str	r2, [r0, #28]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80030fe:	4631      	mov	r1, r6
 8003100:	f000 fb4d 	bl	800379e <USBD_CtlContinueSendData>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003104:	462b      	mov	r3, r5
 8003106:	462a      	mov	r2, r5
 8003108:	4629      	mov	r1, r5
 800310a:	4620      	mov	r0, r4
 800310c:	f000 fdc3 	bl	8003c96 <USBD_LL_PrepareReceive>
          (void)USBD_CtlReceiveStatus(pdev);
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8003110:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 8003114:	b113      	cbz	r3, 800311c <USBD_LL_DataInStage+0x3e>
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8003116:	2300      	movs	r3, #0
 8003118:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
      }
    }
  }

  return USBD_OK;
}
 800311c:	2000      	movs	r0, #0
 800311e:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->maxpacket == pep->rem_length) &&
 8003120:	d10c      	bne.n	800313c <USBD_LL_DataInStage+0x5e>
            (pep->total_length >= pep->maxpacket) &&
 8003122:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8003124:	4293      	cmp	r3, r2
 8003126:	d809      	bhi.n	800313c <USBD_LL_DataInStage+0x5e>
            (pep->total_length >= pep->maxpacket) &&
 8003128:	f8d0 3298 	ldr.w	r3, [r0, #664]	@ 0x298
 800312c:	429a      	cmp	r2, r3
 800312e:	d205      	bcs.n	800313c <USBD_LL_DataInStage+0x5e>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8003130:	460a      	mov	r2, r1
 8003132:	f000 fb34 	bl	800379e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8003136:	f8c4 5298 	str.w	r5, [r4, #664]	@ 0x298
 800313a:	e7e3      	b.n	8003104 <USBD_LL_DataInStage+0x26>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800313c:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8003140:	2b03      	cmp	r3, #3
 8003142:	d108      	bne.n	8003156 <USBD_LL_DataInStage+0x78>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8003144:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	b123      	cbz	r3, 8003156 <USBD_LL_DataInStage+0x78>
              pdev->classId = 0U;
 800314c:	2200      	movs	r2, #0
 800314e:	f8c4 22d4 	str.w	r2, [r4, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8003152:	4620      	mov	r0, r4
 8003154:	4798      	blx	r3
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8003156:	2180      	movs	r1, #128	@ 0x80
 8003158:	4620      	mov	r0, r4
 800315a:	f000 fd78 	bl	8003c4e <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800315e:	4620      	mov	r0, r4
 8003160:	f000 fb45 	bl	80037ee <USBD_CtlReceiveStatus>
 8003164:	e7d4      	b.n	8003110 <USBD_LL_DataInStage+0x32>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003166:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800316a:	2b03      	cmp	r3, #3
 800316c:	d1d6      	bne.n	800311c <USBD_LL_DataInStage+0x3e>
        if (pdev->pClass[idx]->DataIn != NULL)
 800316e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d0d1      	beq.n	800311c <USBD_LL_DataInStage+0x3e>
          pdev->classId = idx;
 8003178:	2200      	movs	r2, #0
}
 800317a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          pdev->classId = idx;
 800317e:	f8c0 22d4 	str.w	r2, [r0, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8003182:	4718      	bx	r3

08003184 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8003184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_StatusTypeDef ret = USBD_OK;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003186:	2301      	movs	r3, #1
 8003188:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800318c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
  pdev->ep0_state = USBD_EP0_IDLE;
 8003190:	2100      	movs	r1, #0
{
 8003192:	4604      	mov	r4, r0
  pdev->ep0_state = USBD_EP0_IDLE;
 8003194:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
  pdev->dev_config = 0U;
 8003198:	6041      	str	r1, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 800319a:	f8c0 12a4 	str.w	r1, [r0, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800319e:	f880 12a0 	strb.w	r1, [r0, #672]	@ 0x2a0
  if (pdev->pClass[0] != NULL)
 80031a2:	b9b3      	cbnz	r3, 80031d2 <USBD_LL_Reset+0x4e>
  USBD_StatusTypeDef ret = USBD_OK;
 80031a4:	2600      	movs	r6, #0
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80031a6:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80031a8:	2540      	movs	r5, #64	@ 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80031aa:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80031ac:	2701      	movs	r7, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80031ae:	2340      	movs	r3, #64	@ 0x40
 80031b0:	4620      	mov	r0, r4
 80031b2:	f000 fd40 	bl	8003c36 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80031b6:	f8a4 7164 	strh.w	r7, [r4, #356]	@ 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80031ba:	f8c4 5160 	str.w	r5, [r4, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80031be:	462b      	mov	r3, r5
 80031c0:	2200      	movs	r2, #0
 80031c2:	2180      	movs	r1, #128	@ 0x80
 80031c4:	4620      	mov	r0, r4
 80031c6:	f000 fd36 	bl	8003c36 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80031ca:	84a7      	strh	r7, [r4, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80031cc:	6225      	str	r5, [r4, #32]

  return ret;
}
 80031ce:	4630      	mov	r0, r6
 80031d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pdev->pClass[0]->DeInit != NULL)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d0e5      	beq.n	80031a4 <USBD_LL_Reset+0x20>
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80031d8:	4798      	blx	r3
 80031da:	2800      	cmp	r0, #0
 80031dc:	d0e2      	beq.n	80031a4 <USBD_LL_Reset+0x20>
        ret = USBD_FAIL;
 80031de:	2603      	movs	r6, #3
 80031e0:	e7e1      	b.n	80031a6 <USBD_LL_Reset+0x22>

080031e2 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80031e2:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80031e4:	2000      	movs	r0, #0
 80031e6:	4770      	bx	lr

080031e8 <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80031e8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80031ec:	2b04      	cmp	r3, #4
  {
    pdev->dev_old_state = pdev->dev_state;
 80031ee:	bf1e      	ittt	ne
 80031f0:	f890 329c 	ldrbne.w	r3, [r0, #668]	@ 0x29c
 80031f4:	b2db      	uxtbne	r3, r3
 80031f6:	f880 329d 	strbne.w	r3, [r0, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80031fa:	2304      	movs	r3, #4
 80031fc:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 8003200:	2000      	movs	r0, #0
 8003202:	4770      	bx	lr

08003204 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8003204:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003208:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 800320a:	bf02      	ittt	eq
 800320c:	f890 329d 	ldrbeq.w	r3, [r0, #669]	@ 0x29d
 8003210:	b2db      	uxtbeq	r3, r3
 8003212:	f880 329c 	strbeq.w	r3, [r0, #668]	@ 0x29c
  }

  return USBD_OK;
}
 8003216:	2000      	movs	r0, #0
 8003218:	4770      	bx	lr

0800321a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800321a:	b508      	push	{r3, lr}
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800321c:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8003220:	2a03      	cmp	r2, #3
 8003222:	d105      	bne.n	8003230 <USBD_LL_SOF+0x16>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8003224:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8003228:	b113      	cbz	r3, 8003230 <USBD_LL_SOF+0x16>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800322a:	69db      	ldr	r3, [r3, #28]
 800322c:	b103      	cbz	r3, 8003230 <USBD_LL_SOF+0x16>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800322e:	4798      	blx	r3
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 8003230:	2000      	movs	r0, #0
 8003232:	bd08      	pop	{r3, pc}

08003234 <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass[pdev->classId] == NULL)
 8003234:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 8003238:	32ae      	adds	r2, #174	@ 0xae
{
 800323a:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 800323c:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8003240:	b14a      	cbz	r2, 8003256 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003242:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003246:	2b03      	cmp	r3, #3
 8003248:	d101      	bne.n	800324e <USBD_LL_IsoINIncomplete+0x1a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800324a:	6a13      	ldr	r3, [r2, #32]
 800324c:	b90b      	cbnz	r3, 8003252 <USBD_LL_IsoINIncomplete+0x1e>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800324e:	2000      	movs	r0, #0
}
 8003250:	bd08      	pop	{r3, pc}
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8003252:	4798      	blx	r3
 8003254:	e7fb      	b.n	800324e <USBD_LL_IsoINIncomplete+0x1a>
    return USBD_FAIL;
 8003256:	2003      	movs	r0, #3
 8003258:	e7fa      	b.n	8003250 <USBD_LL_IsoINIncomplete+0x1c>

0800325a <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass[pdev->classId] == NULL)
 800325a:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 800325e:	32ae      	adds	r2, #174	@ 0xae
{
 8003260:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 8003262:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8003266:	b14a      	cbz	r2, 800327c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003268:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800326c:	2b03      	cmp	r3, #3
 800326e:	d101      	bne.n	8003274 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8003270:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8003272:	b90b      	cbnz	r3, 8003278 <USBD_LL_IsoOUTIncomplete+0x1e>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8003274:	2000      	movs	r0, #0
}
 8003276:	bd08      	pop	{r3, pc}
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8003278:	4798      	blx	r3
 800327a:	e7fb      	b.n	8003274 <USBD_LL_IsoOUTIncomplete+0x1a>
    return USBD_FAIL;
 800327c:	2003      	movs	r0, #3
 800327e:	e7fa      	b.n	8003276 <USBD_LL_IsoOUTIncomplete+0x1c>

08003280 <USBD_LL_DevConnected>:
  * @brief  USBD_LL_DevConnected
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
 8003280:	2000      	movs	r0, #0
 8003282:	4770      	bx	lr

08003284 <USBD_LL_DevDisconnected>:
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  USBD_StatusTypeDef   ret = USBD_OK;

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003284:	2201      	movs	r2, #1
{
 8003286:	b508      	push	{r3, lr}
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003288:	f880 229c 	strb.w	r2, [r0, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800328c:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
 8003290:	b90a      	cbnz	r2, 8003296 <USBD_LL_DevDisconnected+0x12>
  USBD_StatusTypeDef   ret = USBD_OK;
 8003292:	2000      	movs	r0, #0
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8003294:	bd08      	pop	{r3, pc}
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8003296:	6852      	ldr	r2, [r2, #4]
 8003298:	7901      	ldrb	r1, [r0, #4]
 800329a:	4790      	blx	r2
 800329c:	2800      	cmp	r0, #0
 800329e:	d0f8      	beq.n	8003292 <USBD_LL_DevDisconnected+0xe>
      ret = USBD_FAIL;
 80032a0:	2003      	movs	r0, #3
 80032a2:	e7f7      	b.n	8003294 <USBD_LL_DevDisconnected+0x10>

080032a4 <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 80032a4:	2000      	movs	r0, #0
 80032a6:	4770      	bx	lr

080032a8 <USBD_CoreFindEP>:
  *         return the class index relative to the selected endpoint
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
 80032a8:	2000      	movs	r0, #0
 80032aa:	4770      	bx	lr

080032ac <USBD_GetNextDesc>:
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 80032ac:	7802      	ldrb	r2, [r0, #0]
 80032ae:	880b      	ldrh	r3, [r1, #0]
 80032b0:	4413      	add	r3, r2
 80032b2:	800b      	strh	r3, [r1, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);

  return (pnext);
}
 80032b4:	4410      	add	r0, r2
 80032b6:	4770      	bx	lr

080032b8 <USBD_CtlError.constprop.0>:
  *         Handle USB low level Error
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
 80032b8:	b510      	push	{r4, lr}
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80032ba:	2180      	movs	r1, #128	@ 0x80
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
 80032bc:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80032be:	f000 fcc6 	bl	8003c4e <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80032c2:	4620      	mov	r0, r4
 80032c4:	2100      	movs	r1, #0
}
 80032c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 80032ca:	f000 bcc0 	b.w	8003c4e <USBD_LL_StallEP>
	...

080032d0 <USBD_StdDevReq>:
{
 80032d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80032d2:	780b      	ldrb	r3, [r1, #0]
 80032d4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80032d8:	2b20      	cmp	r3, #32
{
 80032da:	4604      	mov	r4, r0
 80032dc:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80032de:	d012      	beq.n	8003306 <USBD_StdDevReq+0x36>
 80032e0:	2b40      	cmp	r3, #64	@ 0x40
 80032e2:	d010      	beq.n	8003306 <USBD_StdDevReq+0x36>
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d163      	bne.n	80033b0 <USBD_StdDevReq+0xe0>
      switch (req->bRequest)
 80032e8:	784b      	ldrb	r3, [r1, #1]
 80032ea:	2b09      	cmp	r3, #9
 80032ec:	d860      	bhi.n	80033b0 <USBD_StdDevReq+0xe0>
 80032ee:	e8df f013 	tbh	[pc, r3, lsl #1]
 80032f2:	011d      	.short	0x011d
 80032f4:	005f013f 	.word	0x005f013f
 80032f8:	005f0131 	.word	0x005f0131
 80032fc:	0016009f 	.word	0x0016009f
 8003300:	0107005f 	.word	0x0107005f
 8003304:	00bb      	.short	0x00bb
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8003306:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800330a:	33ae      	adds	r3, #174	@ 0xae
 800330c:	4629      	mov	r1, r5
 800330e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	4620      	mov	r0, r4
}
 8003316:	b003      	add	sp, #12
 8003318:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800331c:	4718      	bx	r3
  uint16_t len = 0U;
 800331e:	2300      	movs	r3, #0
 8003320:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8003324:	884b      	ldrh	r3, [r1, #2]
 8003326:	0a1a      	lsrs	r2, r3, #8
 8003328:	3a01      	subs	r2, #1
 800332a:	2a06      	cmp	r2, #6
 800332c:	d840      	bhi.n	80033b0 <USBD_StdDevReq+0xe0>
 800332e:	e8df f002 	tbb	[pc, r2]
 8003332:	1c04      	.short	0x1c04
 8003334:	6a3f3f29 	.word	0x6a3f3f29
 8003338:	74          	.byte	0x74
 8003339:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800333a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800333e:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8003340:	7c20      	ldrb	r0, [r4, #16]
 8003342:	f10d 0106 	add.w	r1, sp, #6
 8003346:	4798      	blx	r3
  if (req->wLength != 0U)
 8003348:	88ea      	ldrh	r2, [r5, #6]
 800334a:	2a00      	cmp	r2, #0
 800334c:	f000 80bb 	beq.w	80034c6 <USBD_StdDevReq+0x1f6>
    if (len != 0U)
 8003350:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8003354:	b363      	cbz	r3, 80033b0 <USBD_StdDevReq+0xe0>
      len = MIN(len, req->wLength);
 8003356:	429a      	cmp	r2, r3
 8003358:	bf28      	it	cs
 800335a:	461a      	movcs	r2, r3
 800335c:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8003360:	4601      	mov	r1, r0
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8003362:	4620      	mov	r0, r4
 8003364:	f000 fa0e 	bl	8003784 <USBD_CtlSendData>
        break;
 8003368:	e025      	b.n	80033b6 <USBD_StdDevReq+0xe6>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800336a:	7c02      	ldrb	r2, [r0, #16]
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800336c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003370:	b932      	cbnz	r2, 8003380 <USBD_StdDevReq+0xb0>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8003372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8003374:	f10d 0006 	add.w	r0, sp, #6
 8003378:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800337a:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800337c:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800337e:	e7e3      	b.n	8003348 <USBD_StdDevReq+0x78>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8003380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003382:	e7f7      	b.n	8003374 <USBD_StdDevReq+0xa4>
      switch ((uint8_t)(req->wValue))
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b05      	cmp	r3, #5
 8003388:	d804      	bhi.n	8003394 <USBD_StdDevReq+0xc4>
 800338a:	e8df f003 	tbb	[pc, r3]
 800338e:	180c      	.short	0x180c
 8003390:	2824201c 	.word	0x2824201c
 8003394:	f500 772d 	add.w	r7, r0, #692	@ 0x2b4
          for (uint32_t idx = 0U; (idx < pdev->NumClasses); idx++)
 8003398:	2600      	movs	r6, #0
 800339a:	f8d4 32d8 	ldr.w	r3, [r4, #728]	@ 0x2d8
 800339e:	429e      	cmp	r6, r3
 80033a0:	d321      	bcc.n	80033e6 <USBD_StdDevReq+0x116>
 80033a2:	2000      	movs	r0, #0
 80033a4:	e7d0      	b.n	8003348 <USBD_StdDevReq+0x78>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80033a6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80033aa:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1c7      	bne.n	8003340 <USBD_StdDevReq+0x70>
      USBD_CtlError(pdev, req);
 80033b0:	4620      	mov	r0, r4
 80033b2:	f7ff ff81 	bl	80032b8 <USBD_CtlError.constprop.0>
  USBD_StatusTypeDef ret = USBD_OK;
 80033b6:	2500      	movs	r5, #0
}
 80033b8:	4628      	mov	r0, r5
 80033ba:	b003      	add	sp, #12
 80033bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80033be:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	e7f2      	b.n	80033ac <USBD_StdDevReq+0xdc>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80033c6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	e7ee      	b.n	80033ac <USBD_StdDevReq+0xdc>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80033ce:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	e7ea      	b.n	80033ac <USBD_StdDevReq+0xdc>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80033d6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80033da:	695b      	ldr	r3, [r3, #20]
 80033dc:	e7e6      	b.n	80033ac <USBD_StdDevReq+0xdc>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80033de:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	e7e2      	b.n	80033ac <USBD_StdDevReq+0xdc>
            if (pdev->pClass[idx]->GetUsrStrDescriptor != NULL)
 80033e6:	f857 3f04 	ldr.w	r3, [r7, #4]!
 80033ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ec:	b90b      	cbnz	r3, 80033f2 <USBD_StdDevReq+0x122>
          for (uint32_t idx = 0U; (idx < pdev->NumClasses); idx++)
 80033ee:	3601      	adds	r6, #1
 80033f0:	e7d3      	b.n	800339a <USBD_StdDevReq+0xca>
              pbuf = pdev->pClass[idx]->GetUsrStrDescriptor(pdev, LOBYTE(req->wValue), &len);
 80033f2:	78a9      	ldrb	r1, [r5, #2]
              pdev->classId = idx;
 80033f4:	f8c4 62d4 	str.w	r6, [r4, #724]	@ 0x2d4
              pbuf = pdev->pClass[idx]->GetUsrStrDescriptor(pdev, LOBYTE(req->wValue), &len);
 80033f8:	f10d 0206 	add.w	r2, sp, #6
 80033fc:	4620      	mov	r0, r4
 80033fe:	4798      	blx	r3
              if (pbuf == NULL) /* This means that no class recognized the string index */
 8003400:	2800      	cmp	r0, #0
 8003402:	d1a1      	bne.n	8003348 <USBD_StdDevReq+0x78>
 8003404:	e7f3      	b.n	80033ee <USBD_StdDevReq+0x11e>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003406:	7c03      	ldrb	r3, [r0, #16]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1d1      	bne.n	80033b0 <USBD_StdDevReq+0xe0>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800340c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8003410:	f10d 0006 	add.w	r0, sp, #6
 8003414:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003416:	4798      	blx	r3
  if (err != 0U)
 8003418:	e796      	b.n	8003348 <USBD_StdDevReq+0x78>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800341a:	7c03      	ldrb	r3, [r0, #16]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1c7      	bne.n	80033b0 <USBD_StdDevReq+0xe0>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8003420:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8003424:	f10d 0006 	add.w	r0, sp, #6
 8003428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800342a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800342c:	2307      	movs	r3, #7
 800342e:	e7a5      	b.n	800337c <USBD_StdDevReq+0xac>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8003430:	888b      	ldrh	r3, [r1, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1bc      	bne.n	80033b0 <USBD_StdDevReq+0xe0>
 8003436:	88cb      	ldrh	r3, [r1, #6]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1b9      	bne.n	80033b0 <USBD_StdDevReq+0xe0>
 800343c:	884d      	ldrh	r5, [r1, #2]
 800343e:	2d7f      	cmp	r5, #127	@ 0x7f
 8003440:	d8b6      	bhi.n	80033b0 <USBD_StdDevReq+0xe0>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003442:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003446:	2b03      	cmp	r3, #3
 8003448:	d0b2      	beq.n	80033b0 <USBD_StdDevReq+0xe0>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800344a:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 800344c:	f880 129e 	strb.w	r1, [r0, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8003450:	f000 fc0f 	bl	8003c72 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8003454:	4620      	mov	r0, r4
 8003456:	f000 f9bf 	bl	80037d8 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800345a:	b11d      	cbz	r5, 8003464 <USBD_StdDevReq+0x194>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800345c:	2302      	movs	r3, #2
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800345e:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8003462:	e7a8      	b.n	80033b6 <USBD_StdDevReq+0xe6>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8003464:	2301      	movs	r3, #1
 8003466:	e7fa      	b.n	800345e <USBD_StdDevReq+0x18e>
  cfgidx = (uint8_t)(req->wValue);
 8003468:	7889      	ldrb	r1, [r1, #2]
 800346a:	4d47      	ldr	r5, [pc, #284]	@ (8003588 <USBD_StdDevReq+0x2b8>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800346c:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800346e:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8003470:	d903      	bls.n	800347a <USBD_StdDevReq+0x1aa>
    USBD_CtlError(pdev, req);
 8003472:	f7ff ff21 	bl	80032b8 <USBD_CtlError.constprop.0>
    return USBD_FAIL;
 8003476:	2503      	movs	r5, #3
 8003478:	e79e      	b.n	80033b8 <USBD_StdDevReq+0xe8>
  switch (pdev->dev_state)
 800347a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800347e:	2b02      	cmp	r3, #2
 8003480:	b2de      	uxtb	r6, r3
 8003482:	d008      	beq.n	8003496 <USBD_StdDevReq+0x1c6>
 8003484:	2e03      	cmp	r6, #3
 8003486:	d017      	beq.n	80034b8 <USBD_StdDevReq+0x1e8>
      USBD_CtlError(pdev, req);
 8003488:	f7ff ff16 	bl	80032b8 <USBD_CtlError.constprop.0>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800348c:	7829      	ldrb	r1, [r5, #0]
 800348e:	4620      	mov	r0, r4
 8003490:	f7ff fdb7 	bl	8003002 <USBD_ClrClassConfig>
      break;
 8003494:	e7ef      	b.n	8003476 <USBD_StdDevReq+0x1a6>
      if (cfgidx != 0U)
 8003496:	b1b1      	cbz	r1, 80034c6 <USBD_StdDevReq+0x1f6>
        pdev->dev_config = cfgidx;
 8003498:	2101      	movs	r1, #1
 800349a:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800349c:	f7ff fdaa 	bl	8002ff4 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 80034a0:	4605      	mov	r5, r0
          USBD_CtlError(pdev, req);
 80034a2:	4620      	mov	r0, r4
        if (ret != USBD_OK)
 80034a4:	b125      	cbz	r5, 80034b0 <USBD_StdDevReq+0x1e0>
          USBD_CtlError(pdev, req);
 80034a6:	f7ff ff07 	bl	80032b8 <USBD_CtlError.constprop.0>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80034aa:	f884 629c 	strb.w	r6, [r4, #668]	@ 0x29c
 80034ae:	e783      	b.n	80033b8 <USBD_StdDevReq+0xe8>
          (void)USBD_CtlSendStatus(pdev);
 80034b0:	f000 f992 	bl	80037d8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e7d2      	b.n	800345e <USBD_StdDevReq+0x18e>
      if (cfgidx == 0U)
 80034b8:	b949      	cbnz	r1, 80034ce <USBD_StdDevReq+0x1fe>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80034ba:	2302      	movs	r3, #2
 80034bc:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80034c0:	6041      	str	r1, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80034c2:	f7ff fd9e 	bl	8003002 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80034c6:	4620      	mov	r0, r4
 80034c8:	f000 f986 	bl	80037d8 <USBD_CtlSendStatus>
 80034cc:	e773      	b.n	80033b6 <USBD_StdDevReq+0xe6>
      else if (cfgidx != pdev->dev_config)
 80034ce:	6841      	ldr	r1, [r0, #4]
 80034d0:	2901      	cmp	r1, #1
 80034d2:	d0f8      	beq.n	80034c6 <USBD_StdDevReq+0x1f6>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80034d4:	b2c9      	uxtb	r1, r1
 80034d6:	f7ff fd94 	bl	8003002 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80034da:	7829      	ldrb	r1, [r5, #0]
 80034dc:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80034de:	4620      	mov	r0, r4
 80034e0:	f7ff fd88 	bl	8002ff4 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 80034e4:	4605      	mov	r5, r0
 80034e6:	2800      	cmp	r0, #0
 80034e8:	d0ed      	beq.n	80034c6 <USBD_StdDevReq+0x1f6>
          USBD_CtlError(pdev, req);
 80034ea:	4620      	mov	r0, r4
 80034ec:	f7ff fee4 	bl	80032b8 <USBD_CtlError.constprop.0>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80034f0:	7921      	ldrb	r1, [r4, #4]
 80034f2:	4620      	mov	r0, r4
 80034f4:	f7ff fd85 	bl	8003002 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80034f8:	2302      	movs	r3, #2
 80034fa:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 80034fe:	e75b      	b.n	80033b8 <USBD_StdDevReq+0xe8>
  if (req->wLength != 1U)
 8003500:	88ca      	ldrh	r2, [r1, #6]
 8003502:	2a01      	cmp	r2, #1
 8003504:	f47f af54 	bne.w	80033b0 <USBD_StdDevReq+0xe0>
    switch (pdev->dev_state)
 8003508:	f890 129c 	ldrb.w	r1, [r0, #668]	@ 0x29c
 800350c:	2902      	cmp	r1, #2
 800350e:	b2cb      	uxtb	r3, r1
 8003510:	d807      	bhi.n	8003522 <USBD_StdDevReq+0x252>
 8003512:	2b00      	cmp	r3, #0
 8003514:	f43f af4c 	beq.w	80033b0 <USBD_StdDevReq+0xe0>
        pdev->dev_default_config = 0U;
 8003518:	4601      	mov	r1, r0
 800351a:	2300      	movs	r3, #0
 800351c:	f841 3f08 	str.w	r3, [r1, #8]!
 8003520:	e71f      	b.n	8003362 <USBD_StdDevReq+0x92>
    switch (pdev->dev_state)
 8003522:	2b03      	cmp	r3, #3
 8003524:	f47f af44 	bne.w	80033b0 <USBD_StdDevReq+0xe0>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8003528:	1d01      	adds	r1, r0, #4
 800352a:	e71a      	b.n	8003362 <USBD_StdDevReq+0x92>
  switch (pdev->dev_state)
 800352c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003530:	3b01      	subs	r3, #1
 8003532:	2b02      	cmp	r3, #2
 8003534:	f63f af3c 	bhi.w	80033b0 <USBD_StdDevReq+0xe0>
      if (req->wLength != 0x2U)
 8003538:	88ca      	ldrh	r2, [r1, #6]
 800353a:	2a02      	cmp	r2, #2
 800353c:	f47f af38 	bne.w	80033b0 <USBD_StdDevReq+0xe0>
      if (pdev->dev_remote_wakeup != 0U)
 8003540:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 8003544:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8003546:	2b00      	cmp	r3, #0
 8003548:	bf0c      	ite	eq
 800354a:	2301      	moveq	r3, #1
 800354c:	2303      	movne	r3, #3
 800354e:	f841 3f0c 	str.w	r3, [r1, #12]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8003552:	e706      	b.n	8003362 <USBD_StdDevReq+0x92>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003554:	884b      	ldrh	r3, [r1, #2]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d102      	bne.n	8003560 <USBD_StdDevReq+0x290>
        pdev->dev_remote_wakeup = 0U;
 800355a:	f8c4 32a4 	str.w	r3, [r4, #676]	@ 0x2a4
 800355e:	e7b2      	b.n	80034c6 <USBD_StdDevReq+0x1f6>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8003560:	2b02      	cmp	r3, #2
 8003562:	f47f af25 	bne.w	80033b0 <USBD_StdDevReq+0xe0>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8003566:	888b      	ldrh	r3, [r1, #4]
 8003568:	0a1b      	lsrs	r3, r3, #8
 800356a:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800356e:	e7aa      	b.n	80034c6 <USBD_StdDevReq+0x1f6>
  switch (pdev->dev_state)
 8003570:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003574:	3b01      	subs	r3, #1
 8003576:	2b02      	cmp	r3, #2
 8003578:	f63f af1a 	bhi.w	80033b0 <USBD_StdDevReq+0xe0>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800357c:	884b      	ldrh	r3, [r1, #2]
 800357e:	2b01      	cmp	r3, #1
 8003580:	f47f af19 	bne.w	80033b6 <USBD_StdDevReq+0xe6>
        pdev->dev_remote_wakeup = 0U;
 8003584:	2300      	movs	r3, #0
 8003586:	e7e8      	b.n	800355a <USBD_StdDevReq+0x28a>
 8003588:	20000247 	.word	0x20000247

0800358c <USBD_StdItfReq>:
{
 800358c:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800358e:	780b      	ldrb	r3, [r1, #0]
 8003590:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8003594:	065b      	lsls	r3, r3, #25
{
 8003596:	4604      	mov	r4, r0
 8003598:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800359a:	d501      	bpl.n	80035a0 <USBD_StdItfReq+0x14>
 800359c:	2a40      	cmp	r2, #64	@ 0x40
 800359e:	d11e      	bne.n	80035de <USBD_StdItfReq+0x52>
      switch (pdev->dev_state)
 80035a0:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 80035a4:	3b01      	subs	r3, #1
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d819      	bhi.n	80035de <USBD_StdItfReq+0x52>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80035aa:	7929      	ldrb	r1, [r5, #4]
 80035ac:	2901      	cmp	r1, #1
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80035ae:	4620      	mov	r0, r4
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80035b0:	d816      	bhi.n	80035e0 <USBD_StdItfReq+0x54>
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80035b2:	f7ff fe77 	bl	80032a4 <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80035b6:	b980      	cbnz	r0, 80035da <USBD_StdItfReq+0x4e>
              if (pdev->pClass[idx]->Setup != NULL)
 80035b8:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	b163      	cbz	r3, 80035da <USBD_StdItfReq+0x4e>
                pdev->classId = idx;
 80035c0:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80035c4:	4629      	mov	r1, r5
 80035c6:	4620      	mov	r0, r4
 80035c8:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80035ca:	88eb      	ldrh	r3, [r5, #6]
 80035cc:	b923      	cbnz	r3, 80035d8 <USBD_StdItfReq+0x4c>
 80035ce:	b918      	cbnz	r0, 80035d8 <USBD_StdItfReq+0x4c>
              (void)USBD_CtlSendStatus(pdev);
 80035d0:	4620      	mov	r0, r4
 80035d2:	f000 f901 	bl	80037d8 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 80035d6:	2000      	movs	r0, #0
}
 80035d8:	bd38      	pop	{r3, r4, r5, pc}
                ret = USBD_FAIL;
 80035da:	2003      	movs	r0, #3
 80035dc:	e7f5      	b.n	80035ca <USBD_StdItfReq+0x3e>
          USBD_CtlError(pdev, req);
 80035de:	4620      	mov	r0, r4
            USBD_CtlError(pdev, req);
 80035e0:	f7ff fe6a 	bl	80032b8 <USBD_CtlError.constprop.0>
 80035e4:	e7f7      	b.n	80035d6 <USBD_StdItfReq+0x4a>

080035e6 <USBD_StdEPReq>:
{
 80035e6:	b570      	push	{r4, r5, r6, lr}
 80035e8:	780b      	ldrb	r3, [r1, #0]
  ep_addr = LOBYTE(req->wIndex);
 80035ea:	888a      	ldrh	r2, [r1, #4]
 80035ec:	790e      	ldrb	r6, [r1, #4]
 80035ee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80035f2:	2b20      	cmp	r3, #32
{
 80035f4:	4604      	mov	r4, r0
 80035f6:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80035f8:	d053      	beq.n	80036a2 <USBD_StdEPReq+0xbc>
 80035fa:	2b40      	cmp	r3, #64	@ 0x40
 80035fc:	d051      	beq.n	80036a2 <USBD_StdEPReq+0xbc>
 80035fe:	bb63      	cbnz	r3, 800365a <USBD_StdEPReq+0x74>
      switch (req->bRequest)
 8003600:	784b      	ldrb	r3, [r1, #1]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d03b      	beq.n	800367e <USBD_StdEPReq+0x98>
 8003606:	2b03      	cmp	r3, #3
 8003608:	d020      	beq.n	800364c <USBD_StdEPReq+0x66>
 800360a:	bb33      	cbnz	r3, 800365a <USBD_StdEPReq+0x74>
          switch (pdev->dev_state)
 800360c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003610:	2b02      	cmp	r3, #2
 8003612:	b2d9      	uxtb	r1, r3
 8003614:	d061      	beq.n	80036da <USBD_StdEPReq+0xf4>
 8003616:	2903      	cmp	r1, #3
 8003618:	d11f      	bne.n	800365a <USBD_StdEPReq+0x74>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800361a:	f006 030f 	and.w	r3, r6, #15
              if ((ep_addr & 0x80U) == 0x80U)
 800361e:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8003622:	f04f 0214 	mov.w	r2, #20
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003626:	fb02 0303 	mla	r3, r2, r3, r0
              if ((ep_addr & 0x80U) == 0x80U)
 800362a:	d065      	beq.n	80036f8 <USBD_StdEPReq+0x112>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800362c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800362e:	b1a3      	cbz	r3, 800365a <USBD_StdEPReq+0x74>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003630:	f006 057f 	and.w	r5, r6, #127	@ 0x7f
 8003634:	3501      	adds	r5, #1
 8003636:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800363a:	eb00 0585 	add.w	r5, r0, r5, lsl #2
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800363e:	0673      	lsls	r3, r6, #25
 8003640:	d166      	bne.n	8003710 <USBD_StdEPReq+0x12a>
{
 8003642:	2300      	movs	r3, #0
                pep->status = 0x0000U;
 8003644:	602b      	str	r3, [r5, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8003646:	2202      	movs	r2, #2
 8003648:	4629      	mov	r1, r5
 800364a:	e051      	b.n	80036f0 <USBD_StdEPReq+0x10a>
          switch (pdev->dev_state)
 800364c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003650:	2b02      	cmp	r3, #2
 8003652:	b2da      	uxtb	r2, r3
 8003654:	d037      	beq.n	80036c6 <USBD_StdEPReq+0xe0>
 8003656:	2a03      	cmp	r2, #3
 8003658:	d003      	beq.n	8003662 <USBD_StdEPReq+0x7c>
              USBD_CtlError(pdev, req);
 800365a:	4620      	mov	r0, r4
 800365c:	f7ff fe2c 	bl	80032b8 <USBD_CtlError.constprop.0>
              break;
 8003660:	e00b      	b.n	800367a <USBD_StdEPReq+0x94>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003662:	884b      	ldrh	r3, [r1, #2]
 8003664:	b933      	cbnz	r3, 8003674 <USBD_StdEPReq+0x8e>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8003666:	0671      	lsls	r1, r6, #25
 8003668:	d004      	beq.n	8003674 <USBD_StdEPReq+0x8e>
 800366a:	88eb      	ldrh	r3, [r5, #6]
 800366c:	b913      	cbnz	r3, 8003674 <USBD_StdEPReq+0x8e>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800366e:	4631      	mov	r1, r6
 8003670:	f000 faed 	bl	8003c4e <USBD_LL_StallEP>
              (void)USBD_CtlSendStatus(pdev);
 8003674:	4620      	mov	r0, r4
 8003676:	f000 f8af 	bl	80037d8 <USBD_CtlSendStatus>
}
 800367a:	2000      	movs	r0, #0
 800367c:	bd70      	pop	{r4, r5, r6, pc}
          switch (pdev->dev_state)
 800367e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003682:	2b02      	cmp	r3, #2
 8003684:	b2da      	uxtb	r2, r3
 8003686:	d01e      	beq.n	80036c6 <USBD_StdEPReq+0xe0>
 8003688:	2a03      	cmp	r2, #3
 800368a:	d1e6      	bne.n	800365a <USBD_StdEPReq+0x74>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800368c:	884b      	ldrh	r3, [r1, #2]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1f3      	bne.n	800367a <USBD_StdEPReq+0x94>
                if ((ep_addr & 0x7FU) != 0x00U)
 8003692:	0673      	lsls	r3, r6, #25
 8003694:	d002      	beq.n	800369c <USBD_StdEPReq+0xb6>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8003696:	4631      	mov	r1, r6
 8003698:	f000 fae2 	bl	8003c60 <USBD_LL_ClearStallEP>
                (void)USBD_CtlSendStatus(pdev);
 800369c:	4620      	mov	r0, r4
 800369e:	f000 f89b 	bl	80037d8 <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80036a2:	4631      	mov	r1, r6
 80036a4:	4620      	mov	r0, r4
 80036a6:	f7ff fdff 	bl	80032a8 <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80036aa:	2800      	cmp	r0, #0
 80036ac:	d1e5      	bne.n	800367a <USBD_StdEPReq+0x94>
                  if (pdev->pClass[idx]->Setup != NULL)
 80036ae:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
                  pdev->classId = idx;
 80036b2:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0de      	beq.n	800367a <USBD_StdEPReq+0x94>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80036bc:	4629      	mov	r1, r5
 80036be:	4620      	mov	r0, r4
}
 80036c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80036c4:	4718      	bx	r3
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80036c6:	0672      	lsls	r2, r6, #25
 80036c8:	d0c7      	beq.n	800365a <USBD_StdEPReq+0x74>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80036ca:	4631      	mov	r1, r6
 80036cc:	f000 fabf 	bl	8003c4e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80036d0:	2180      	movs	r1, #128	@ 0x80
 80036d2:	4620      	mov	r0, r4
 80036d4:	f000 fabb 	bl	8003c4e <USBD_LL_StallEP>
 80036d8:	e7cf      	b.n	800367a <USBD_StdEPReq+0x94>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80036da:	0671      	lsls	r1, r6, #25
 80036dc:	d1bd      	bne.n	800365a <USBD_StdEPReq+0x74>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80036de:	0612      	lsls	r2, r2, #24
 80036e0:	bf4c      	ite	mi
 80036e2:	f100 0114 	addmi.w	r1, r0, #20
 80036e6:	f500 71aa 	addpl.w	r1, r0, #340	@ 0x154
              pep->status = 0x0000U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80036ee:	2202      	movs	r2, #2
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80036f0:	4620      	mov	r0, r4
 80036f2:	f000 f847 	bl	8003784 <USBD_CtlSendData>
              break;
 80036f6:	e7c0      	b.n	800367a <USBD_StdEPReq+0x94>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80036f8:	f8b3 3164 	ldrh.w	r3, [r3, #356]	@ 0x164
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d0ac      	beq.n	800365a <USBD_StdEPReq+0x74>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003700:	f006 057f 	and.w	r5, r6, #127	@ 0x7f
 8003704:	2314      	movs	r3, #20
 8003706:	fb03 0505 	mla	r5, r3, r5, r0
 800370a:	f505 75aa 	add.w	r5, r5, #340	@ 0x154
 800370e:	e796      	b.n	800363e <USBD_StdEPReq+0x58>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8003710:	4631      	mov	r1, r6
 8003712:	4620      	mov	r0, r4
 8003714:	f000 fa60 	bl	8003bd8 <USBD_LL_IsStallEP>
 8003718:	2800      	cmp	r0, #0
 800371a:	d092      	beq.n	8003642 <USBD_StdEPReq+0x5c>
 800371c:	2301      	movs	r3, #1
 800371e:	e791      	b.n	8003644 <USBD_StdEPReq+0x5e>

08003720 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8003720:	780b      	ldrb	r3, [r1, #0]
 8003722:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8003724:	784b      	ldrb	r3, [r1, #1]
 8003726:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pbuff);
 8003728:	884b      	ldrh	r3, [r1, #2]
 800372a:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pbuff);
 800372c:	888b      	ldrh	r3, [r1, #4]
 800372e:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pbuff);
 8003730:	88cb      	ldrh	r3, [r1, #6]
 8003732:	80c3      	strh	r3, [r0, #6]
}
 8003734:	4770      	bx	lr

08003736 <USBD_CtlError>:
{
 8003736:	b510      	push	{r4, lr}
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8003738:	2180      	movs	r1, #128	@ 0x80
{
 800373a:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800373c:	f000 fa87 	bl	8003c4e <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8003740:	4620      	mov	r0, r4
 8003742:	2100      	movs	r1, #0
}
 8003744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 8003748:	f000 ba81 	b.w	8003c4e <USBD_LL_StallEP>

0800374c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800374c:	b570      	push	{r4, r5, r6, lr}
 800374e:	460d      	mov	r5, r1
 8003750:	4616      	mov	r6, r2
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 8003752:	4604      	mov	r4, r0
 8003754:	b170      	cbz	r0, 8003774 <USBD_GetString+0x28>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8003756:	f7fc fd3f 	bl	80001d8 <strlen>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800375a:	b2c3      	uxtb	r3, r0
 800375c:	3301      	adds	r3, #1
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	8033      	strh	r3, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 8003762:	702b      	strb	r3, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8003764:	2303      	movs	r3, #3
 8003766:	706b      	strb	r3, [r5, #1]
  while (*pdesc != (uint8_t)'\0')
 8003768:	3c01      	subs	r4, #1
  idx++;
 800376a:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 800376c:	2100      	movs	r1, #0
  while (*pdesc != (uint8_t)'\0')
 800376e:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 8003772:	b902      	cbnz	r2, 8003776 <USBD_GetString+0x2a>
}
 8003774:	bd70      	pop	{r4, r5, r6, pc}
    unicode[idx] = *pdesc;
 8003776:	54ea      	strb	r2, [r5, r3]
    idx++;
 8003778:	1c5a      	adds	r2, r3, #1
    unicode[idx] = 0U;
 800377a:	b2d2      	uxtb	r2, r2
    idx++;
 800377c:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 800377e:	54a9      	strb	r1, [r5, r2]
    idx++;
 8003780:	b2db      	uxtb	r3, r3
 8003782:	e7f4      	b.n	800376e <USBD_GetString+0x22>

08003784 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8003784:	b510      	push	{r4, lr}
 8003786:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8003788:	2202      	movs	r2, #2
  pdev->ep_in[0].total_length = len;

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800378a:	e9c0 3306 	strd	r3, r3, [r0, #24]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800378e:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8003792:	460a      	mov	r2, r1
 8003794:	2100      	movs	r1, #0
 8003796:	f000 fa75 	bl	8003c84 <USBD_LL_Transmit>

  return USBD_OK;
}
 800379a:	2000      	movs	r0, #0
 800379c:	bd10      	pop	{r4, pc}

0800379e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800379e:	b508      	push	{r3, lr}
 80037a0:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80037a2:	460a      	mov	r2, r1
 80037a4:	2100      	movs	r1, #0
 80037a6:	f000 fa6d 	bl	8003c84 <USBD_LL_Transmit>

  return USBD_OK;
}
 80037aa:	2000      	movs	r0, #0
 80037ac:	bd08      	pop	{r3, pc}

080037ae <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80037ae:	b510      	push	{r4, lr}
 80037b0:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80037b2:	2203      	movs	r2, #3
  pdev->ep_out[0].total_length = len;

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80037b4:	e9c0 3356 	strd	r3, r3, [r0, #344]	@ 0x158
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80037b8:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80037bc:	460a      	mov	r2, r1
 80037be:	2100      	movs	r1, #0
 80037c0:	f000 fa69 	bl	8003c96 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80037c4:	2000      	movs	r0, #0
 80037c6:	bd10      	pop	{r4, pc}

080037c8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80037c8:	b508      	push	{r3, lr}
 80037ca:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80037cc:	460a      	mov	r2, r1
 80037ce:	2100      	movs	r1, #0
 80037d0:	f000 fa61 	bl	8003c96 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80037d4:	2000      	movs	r0, #0
 80037d6:	bd08      	pop	{r3, pc}

080037d8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80037d8:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80037da:	2204      	movs	r2, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80037dc:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80037de:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80037e2:	4619      	mov	r1, r3
 80037e4:	461a      	mov	r2, r3
 80037e6:	f000 fa4d 	bl	8003c84 <USBD_LL_Transmit>

  return USBD_OK;
}
 80037ea:	2000      	movs	r0, #0
 80037ec:	bd08      	pop	{r3, pc}

080037ee <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80037ee:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80037f0:	2205      	movs	r2, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80037f2:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80037f4:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80037f8:	4619      	mov	r1, r3
 80037fa:	461a      	mov	r2, r3
 80037fc:	f000 fa4b 	bl	8003c96 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003800:	2000      	movs	r0, #0
 8003802:	bd08      	pop	{r3, pc}

08003804 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8003804:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8003806:	490f      	ldr	r1, [pc, #60]	@ (8003844 <MX_USB_DEVICE_Init+0x40>)
 8003808:	480f      	ldr	r0, [pc, #60]	@ (8003848 <MX_USB_DEVICE_Init+0x44>)
 800380a:	2200      	movs	r2, #0
 800380c:	f7ff fbb7 	bl	8002f7e <USBD_Init>
 8003810:	b108      	cbz	r0, 8003816 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8003812:	f7fc febb 	bl	800058c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 8003816:	490d      	ldr	r1, [pc, #52]	@ (800384c <MX_USB_DEVICE_Init+0x48>)
 8003818:	480b      	ldr	r0, [pc, #44]	@ (8003848 <MX_USB_DEVICE_Init+0x44>)
 800381a:	f7ff fbc3 	bl	8002fa4 <USBD_RegisterClass>
 800381e:	b108      	cbz	r0, 8003824 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8003820:	f7fc feb4 	bl	800058c <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 8003824:	490a      	ldr	r1, [pc, #40]	@ (8003850 <MX_USB_DEVICE_Init+0x4c>)
 8003826:	4808      	ldr	r0, [pc, #32]	@ (8003848 <MX_USB_DEVICE_Init+0x44>)
 8003828:	f7ff fb9e 	bl	8002f68 <USBD_DFU_RegisterMedia>
 800382c:	b108      	cbz	r0, 8003832 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 800382e:	f7fc fead 	bl	800058c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8003832:	4805      	ldr	r0, [pc, #20]	@ (8003848 <MX_USB_DEVICE_Init+0x44>)
 8003834:	f7ff fbcf 	bl	8002fd6 <USBD_Start>
 8003838:	b118      	cbz	r0, 8003842 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800383a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800383e:	f7fc bea5 	b.w	800058c <Error_Handler>
}
 8003842:	bd08      	pop	{r3, pc}
 8003844:	200000a4 	.word	0x200000a4
 8003848:	20000248 	.word	0x20000248
 800384c:	20000034 	.word	0x20000034
 8003850:	200000c0 	.word	0x200000c0

08003854 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8003854:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8003856:	4801      	ldr	r0, [pc, #4]	@ (800385c <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8003858:	800b      	strh	r3, [r1, #0]
}
 800385a:	4770      	bx	lr
 800385c:	20000090 	.word	0x20000090

08003860 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8003860:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8003862:	4801      	ldr	r0, [pc, #4]	@ (8003868 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8003864:	800b      	strh	r3, [r1, #0]
}
 8003866:	4770      	bx	lr
 8003868:	2000008c 	.word	0x2000008c

0800386c <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 800386c:	2300      	movs	r3, #0
{
 800386e:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8003870:	1c4d      	adds	r5, r1, #1
 8003872:	461e      	mov	r6, r3
  for (idx = 0; idx < len; idx++)
 8003874:	b2dc      	uxtb	r4, r3
 8003876:	42a2      	cmp	r2, r4
 8003878:	d800      	bhi.n	800387c <IntToUnicode+0x10>
  }
}
 800387a:	bd70      	pop	{r4, r5, r6, pc}
      pbuf[2 * idx] = (value >> 28) + '0';
 800387c:	0f04      	lsrs	r4, r0, #28
    if (((value >> 28)) < 0xA)
 800387e:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 8003882:	bf34      	ite	cc
 8003884:	3430      	addcc	r4, #48	@ 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8003886:	3437      	addcs	r4, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8003888:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    value = value << 4;
 800388c:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 800388e:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for (idx = 0; idx < len; idx++)
 8003892:	3301      	adds	r3, #1
 8003894:	e7ee      	b.n	8003874 <IntToUnicode+0x8>
	...

08003898 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8003898:	231a      	movs	r3, #26
{
 800389a:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800389c:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800389e:	4b0a      	ldr	r3, [pc, #40]	@ (80038c8 <USBD_FS_SerialStrDescriptor+0x30>)
 80038a0:	f8d3 0a10 	ldr.w	r0, [r3, #2576]	@ 0xa10
  deviceserial0 += deviceserial2;
 80038a4:	f8d3 2a18 	ldr.w	r2, [r3, #2584]	@ 0xa18
  if (deviceserial0 != 0)
 80038a8:	1880      	adds	r0, r0, r2
 80038aa:	d00a      	beq.n	80038c2 <USBD_FS_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80038ac:	f8d3 4a14 	ldr.w	r4, [r3, #2580]	@ 0xa14
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80038b0:	4906      	ldr	r1, [pc, #24]	@ (80038cc <USBD_FS_SerialStrDescriptor+0x34>)
 80038b2:	2208      	movs	r2, #8
 80038b4:	f7ff ffda 	bl	800386c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80038b8:	2204      	movs	r2, #4
 80038ba:	3110      	adds	r1, #16
 80038bc:	4620      	mov	r0, r4
 80038be:	f7ff ffd5 	bl	800386c <IntToUnicode>
}
 80038c2:	4803      	ldr	r0, [pc, #12]	@ (80038d0 <USBD_FS_SerialStrDescriptor+0x38>)
 80038c4:	bd10      	pop	{r4, pc}
 80038c6:	bf00      	nop
 80038c8:	1fff7000 	.word	0x1fff7000
 80038cc:	20000072 	.word	0x20000072
 80038d0:	20000070 	.word	0x20000070

080038d4 <USBD_FS_ManufacturerStrDescriptor>:
{
 80038d4:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80038d6:	4c04      	ldr	r4, [pc, #16]	@ (80038e8 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 80038d8:	4804      	ldr	r0, [pc, #16]	@ (80038ec <USBD_FS_ManufacturerStrDescriptor+0x18>)
{
 80038da:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80038dc:	4621      	mov	r1, r4
 80038de:	f7ff ff35 	bl	800374c <USBD_GetString>
}
 80038e2:	4620      	mov	r0, r4
 80038e4:	bd10      	pop	{r4, pc}
 80038e6:	bf00      	nop
 80038e8:	20000524 	.word	0x20000524
 80038ec:	08003d28 	.word	0x08003d28

080038f0 <USBD_FS_ProductStrDescriptor>:
{
 80038f0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80038f2:	4c04      	ldr	r4, [pc, #16]	@ (8003904 <USBD_FS_ProductStrDescriptor+0x14>)
 80038f4:	4804      	ldr	r0, [pc, #16]	@ (8003908 <USBD_FS_ProductStrDescriptor+0x18>)
{
 80038f6:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80038f8:	4621      	mov	r1, r4
 80038fa:	f7ff ff27 	bl	800374c <USBD_GetString>
}
 80038fe:	4620      	mov	r0, r4
 8003900:	bd10      	pop	{r4, pc}
 8003902:	bf00      	nop
 8003904:	20000524 	.word	0x20000524
 8003908:	08003d3b 	.word	0x08003d3b

0800390c <USBD_FS_ConfigStrDescriptor>:
{
 800390c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800390e:	4c04      	ldr	r4, [pc, #16]	@ (8003920 <USBD_FS_ConfigStrDescriptor+0x14>)
 8003910:	4804      	ldr	r0, [pc, #16]	@ (8003924 <USBD_FS_ConfigStrDescriptor+0x18>)
{
 8003912:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003914:	4621      	mov	r1, r4
 8003916:	f7ff ff19 	bl	800374c <USBD_GetString>
}
 800391a:	4620      	mov	r0, r4
 800391c:	bd10      	pop	{r4, pc}
 800391e:	bf00      	nop
 8003920:	20000524 	.word	0x20000524
 8003924:	08003d5a 	.word	0x08003d5a

08003928 <USBD_FS_InterfaceStrDescriptor>:
{
 8003928:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800392a:	4c04      	ldr	r4, [pc, #16]	@ (800393c <USBD_FS_InterfaceStrDescriptor+0x14>)
 800392c:	4804      	ldr	r0, [pc, #16]	@ (8003940 <USBD_FS_InterfaceStrDescriptor+0x18>)
{
 800392e:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003930:	4621      	mov	r1, r4
 8003932:	f7ff ff0b 	bl	800374c <USBD_GetString>
}
 8003936:	4620      	mov	r0, r4
 8003938:	bd10      	pop	{r4, pc}
 800393a:	bf00      	nop
 800393c:	20000524 	.word	0x20000524
 8003940:	08003d65 	.word	0x08003d65

08003944 <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8003944:	b510      	push	{r4, lr}
 8003946:	4603      	mov	r3, r0
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  uint32_t i = 0;
  uint8_t *psrc = src;
  
  for(i = 0; i < Len; i++)
 8003948:	441a      	add	r2, r3
{
 800394a:	4608      	mov	r0, r1
 800394c:	3901      	subs	r1, #1
  for(i = 0; i < Len; i++)
 800394e:	4293      	cmp	r3, r2
 8003950:	d100      	bne.n	8003954 <MEM_If_Read_FS+0x10>
    dest[i] = *psrc++;
  }
  /* Return a valid address to avoid HardFault */
  return (uint8_t*)(dest); 
  /* USER CODE END 4 */
}
 8003952:	bd10      	pop	{r4, pc}
    dest[i] = *psrc++;
 8003954:	f813 4b01 	ldrb.w	r4, [r3], #1
 8003958:	f801 4f01 	strb.w	r4, [r1, #1]!
  for(i = 0; i < Len; i++)
 800395c:	e7f7      	b.n	800394e <MEM_If_Read_FS+0xa>

0800395e <MEM_If_GetStatus_FS>:
  /* USER CODE BEGIN 5 */
 switch(Cmd)
  {
  case DFU_MEDIA_PROGRAM:
    buffer[1] = (uint8_t)FLASH_PROGRAM_TIME;
    buffer[2] = (uint8_t)(FLASH_PROGRAM_TIME << 8);
 800395e:	2000      	movs	r0, #0
    buffer[1] = (uint8_t)FLASH_PROGRAM_TIME;
 8003960:	2332      	movs	r3, #50	@ 0x32
 8003962:	7053      	strb	r3, [r2, #1]
    buffer[2] = (uint8_t)(FLASH_PROGRAM_TIME << 8);
 8003964:	7090      	strb	r0, [r2, #2]
    buffer[3] = 0;  
 8003966:	70d0      	strb	r0, [r2, #3]
    buffer[3] = 0;  
    break;
  }
  return 0; 
  /* USER CODE END 5 */
}
 8003968:	4770      	bx	lr

0800396a <MEM_If_Write_FS>:
{
 800396a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800396c:	4617      	mov	r7, r2
 800396e:	1f06      	subs	r6, r0, #4
 8003970:	460d      	mov	r5, r1
  for(i = 0; i < Len; i+=4)
 8003972:	f1c0 0404 	rsb	r4, r0, #4
 8003976:	19a3      	adds	r3, r4, r6
 8003978:	429f      	cmp	r7, r3
 800397a:	d801      	bhi.n	8003980 <MEM_If_Write_FS+0x16>
  return 0;
 800397c:	2000      	movs	r0, #0
}
 800397e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)(dest+i), *(uint32_t*)(src+i)) == HAL_OK)
 8003980:	6872      	ldr	r2, [r6, #4]
 8003982:	2300      	movs	r3, #0
 8003984:	4629      	mov	r1, r5
 8003986:	2002      	movs	r0, #2
 8003988:	f7fd f8c4 	bl	8000b14 <HAL_FLASH_Program>
 800398c:	b938      	cbnz	r0, 800399e <MEM_If_Write_FS+0x34>
      if(*(uint32_t *)(src + i) != *(uint32_t*)(dest+i))
 800398e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003992:	f856 2f04 	ldr.w	r2, [r6, #4]!
 8003996:	429a      	cmp	r2, r3
 8003998:	d0ed      	beq.n	8003976 <MEM_If_Write_FS+0xc>
        return 2;
 800399a:	2002      	movs	r0, #2
 800399c:	e7ef      	b.n	800397e <MEM_If_Write_FS+0x14>
      return 1;
 800399e:	2001      	movs	r0, #1
 80039a0:	e7ed      	b.n	800397e <MEM_If_Write_FS+0x14>

080039a2 <MEM_If_Erase_FS>:
{
 80039a2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  */
static uint32_t GetSector(uint32_t Address)
{
  uint32_t sector = 0;
  
  if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 80039a4:	f100 4278 	add.w	r2, r0, #4160749568	@ 0xf8000000
  uint32_t startsector = 0, sectorerror = 0;
 80039a8:	2300      	movs	r3, #0
  if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 80039aa:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
  uint32_t startsector = 0, sectorerror = 0;
 80039ae:	9300      	str	r3, [sp, #0]
  if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 80039b0:	d321      	bcc.n	80039f6 <MEM_If_Erase_FS+0x54>
  {
    sector = FLASH_SECTOR_0;  
  }
  else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
 80039b2:	f5a2 4380 	sub.w	r3, r2, #16384	@ 0x4000
 80039b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039ba:	d32e      	bcc.n	8003a1a <MEM_If_Erase_FS+0x78>
  {
    sector = FLASH_SECTOR_1;  
  }
  else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
 80039bc:	f5a2 4300 	sub.w	r3, r2, #32768	@ 0x8000
 80039c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039c4:	d32b      	bcc.n	8003a1e <MEM_If_Erase_FS+0x7c>
  {
    sector = FLASH_SECTOR_2;  
  }
  else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
 80039c6:	f5a2 4240 	sub.w	r2, r2, #49152	@ 0xc000
 80039ca:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 80039ce:	d328      	bcc.n	8003a22 <MEM_If_Erase_FS+0x80>
  {
    sector = FLASH_SECTOR_3;  
  }
  else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
 80039d0:	f100 4077 	add.w	r0, r0, #4143972352	@ 0xf7000000
 80039d4:	f500 037f 	add.w	r3, r0, #16711680	@ 0xff0000
 80039d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039dc:	d323      	bcc.n	8003a26 <MEM_If_Erase_FS+0x84>
  {
    sector = FLASH_SECTOR_4;  
  }
  else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
 80039de:	f500 037e 	add.w	r3, r0, #16646144	@ 0xfe0000
 80039e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039e6:	d320      	bcc.n	8003a2a <MEM_If_Erase_FS+0x88>
  {
    sector = FLASH_SECTOR_5;  
  }
  else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
 80039e8:	f500 007c 	add.w	r0, r0, #16515072	@ 0xfc0000
  {
    sector = FLASH_SECTOR_6;  
 80039ec:	f5b0 3f00 	cmp.w	r0, #131072	@ 0x20000
 80039f0:	bf2c      	ite	cs
 80039f2:	2307      	movcs	r3, #7
 80039f4:	2306      	movcc	r3, #6
  eraseinitstruct.Banks = GetBank(Add);
 80039f6:	2201      	movs	r2, #1
 80039f8:	2100      	movs	r1, #0
 80039fa:	e9cd 1201 	strd	r1, r2, [sp, #4]
  eraseinitstruct.NbSectors = 1;
 80039fe:	e9cd 3203 	strd	r3, r2, [sp, #12]
  status = HAL_FLASHEx_Erase(&eraseinitstruct, &sectorerror);
 8003a02:	4669      	mov	r1, sp
  eraseinitstruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8003a04:	2302      	movs	r3, #2
  status = HAL_FLASHEx_Erase(&eraseinitstruct, &sectorerror);
 8003a06:	a801      	add	r0, sp, #4
  eraseinitstruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8003a08:	9305      	str	r3, [sp, #20]
  status = HAL_FLASHEx_Erase(&eraseinitstruct, &sectorerror);
 8003a0a:	f7fd f925 	bl	8000c58 <HAL_FLASHEx_Erase>
}
 8003a0e:	3800      	subs	r0, #0
 8003a10:	bf18      	it	ne
 8003a12:	2001      	movne	r0, #1
 8003a14:	b007      	add	sp, #28
 8003a16:	f85d fb04 	ldr.w	pc, [sp], #4
    sector = FLASH_SECTOR_1;  
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e7eb      	b.n	80039f6 <MEM_If_Erase_FS+0x54>
    sector = FLASH_SECTOR_2;  
 8003a1e:	2302      	movs	r3, #2
 8003a20:	e7e9      	b.n	80039f6 <MEM_If_Erase_FS+0x54>
    sector = FLASH_SECTOR_3;  
 8003a22:	2303      	movs	r3, #3
 8003a24:	e7e7      	b.n	80039f6 <MEM_If_Erase_FS+0x54>
    sector = FLASH_SECTOR_4;  
 8003a26:	2304      	movs	r3, #4
 8003a28:	e7e5      	b.n	80039f6 <MEM_If_Erase_FS+0x54>
    sector = FLASH_SECTOR_5;  
 8003a2a:	2305      	movs	r3, #5
 8003a2c:	e7e3      	b.n	80039f6 <MEM_If_Erase_FS+0x54>

08003a2e <MEM_If_DeInit_FS>:
{
 8003a2e:	b508      	push	{r3, lr}
  HAL_FLASH_Lock();
 8003a30:	f7fd f83e 	bl	8000ab0 <HAL_FLASH_Lock>
}
 8003a34:	2000      	movs	r0, #0
 8003a36:	bd08      	pop	{r3, pc}

08003a38 <MEM_If_Init_FS>:
{
 8003a38:	b508      	push	{r3, lr}
  HAL_FLASH_Unlock();
 8003a3a:	f7fd f827 	bl	8000a8c <HAL_FLASH_Unlock>
}
 8003a3e:	2000      	movs	r0, #0
 8003a40:	bd08      	pop	{r3, pc}
	...

08003a44 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003a44:	b530      	push	{r4, r5, lr}
 8003a46:	4604      	mov	r4, r0
 8003a48:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a4a:	2214      	movs	r2, #20
 8003a4c:	2100      	movs	r1, #0
 8003a4e:	a803      	add	r0, sp, #12
 8003a50:	f000 f92a 	bl	8003ca8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8003a54:	6823      	ldr	r3, [r4, #0]
 8003a56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a5a:	d12e      	bne.n	8003aba <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a5c:	4c18      	ldr	r4, [pc, #96]	@ (8003ac0 <HAL_PCD_MspInit+0x7c>)
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a5e:	4819      	ldr	r0, [pc, #100]	@ (8003ac4 <HAL_PCD_MspInit+0x80>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a60:	2500      	movs	r5, #0
 8003a62:	9501      	str	r5, [sp, #4]
 8003a64:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003a66:	f043 0301 	orr.w	r3, r3, #1
 8003a6a:	6323      	str	r3, [r4, #48]	@ 0x30
 8003a6c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a74:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a78:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003a80:	2103      	movs	r1, #3
 8003a82:	230a      	movs	r3, #10
 8003a84:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a88:	a903      	add	r1, sp, #12
 8003a8a:	f7fd f935 	bl	8000cf8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003a8e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003a90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a94:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a96:	9502      	str	r5, [sp, #8]
 8003a98:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003a9a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a9e:	6463      	str	r3, [r4, #68]	@ 0x44
 8003aa0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003aa2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003aa6:	9302      	str	r3, [sp, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8003aa8:	2043      	movs	r0, #67	@ 0x43
 8003aaa:	462a      	mov	r2, r5
 8003aac:	4629      	mov	r1, r5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003aae:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8003ab0:	f7fc ff18 	bl	80008e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8003ab4:	2043      	movs	r0, #67	@ 0x43
 8003ab6:	f7fc ff47 	bl	8000948 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8003aba:	b009      	add	sp, #36	@ 0x24
 8003abc:	bd30      	pop	{r4, r5, pc}
 8003abe:	bf00      	nop
 8003ac0:	40023800 	.word	0x40023800
 8003ac4:	40020000 	.word	0x40020000

08003ac8 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8003ac8:	f200 419c 	addw	r1, r0, #1180	@ 0x49c
 8003acc:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8003ad0:	f7ff baa0 	b.w	8003014 <USBD_LL_SetupStage>

08003ad4 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003ad4:	2324      	movs	r3, #36	@ 0x24
 8003ad6:	fb03 0301 	mla	r3, r3, r1, r0
 8003ada:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8003ade:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 8003ae2:	f7ff bac7 	b.w	8003074 <USBD_LL_DataOutStage>

08003ae6 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8003ae6:	2324      	movs	r3, #36	@ 0x24
 8003ae8:	fb03 0301 	mla	r3, r3, r1, r0
 8003aec:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8003af0:	6a1a      	ldr	r2, [r3, #32]
 8003af2:	f7ff baf4 	b.w	80030de <USBD_LL_DataInStage>

08003af6 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8003af6:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8003afa:	f7ff bb8e 	b.w	800321a <USBD_LL_SOF>

08003afe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003afe:	b510      	push	{r4, lr}
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8003b00:	79c3      	ldrb	r3, [r0, #7]
 8003b02:	2b02      	cmp	r3, #2
{
 8003b04:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8003b06:	d001      	beq.n	8003b0c <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8003b08:	f7fc fd40 	bl	800058c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8003b0c:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 8003b10:	2101      	movs	r1, #1
 8003b12:	f7ff fb66 	bl	80031e2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003b16:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
}
 8003b1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003b1e:	f7ff bb31 	b.w	8003184 <USBD_LL_Reset>
	...

08003b24 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003b24:	b510      	push	{r4, lr}
 8003b26:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8003b28:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8003b2c:	f7ff fb5c 	bl	80031e8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8003b30:	6822      	ldr	r2, [r4, #0]
 8003b32:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 8003b36:	f043 0301 	orr.w	r3, r3, #1
 8003b3a:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8003b3e:	7ae3      	ldrb	r3, [r4, #11]
 8003b40:	b123      	cbz	r3, 8003b4c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003b42:	4a03      	ldr	r2, [pc, #12]	@ (8003b50 <HAL_PCD_SuspendCallback+0x2c>)
 8003b44:	6913      	ldr	r3, [r2, #16]
 8003b46:	f043 0306 	orr.w	r3, r3, #6
 8003b4a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8003b4c:	bd10      	pop	{r4, pc}
 8003b4e:	bf00      	nop
 8003b50:	e000ed00 	.word	0xe000ed00

08003b54 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8003b54:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8003b58:	f7ff bb54 	b.w	8003204 <USBD_LL_Resume>

08003b5c <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8003b5c:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8003b60:	f7ff bb7b 	b.w	800325a <USBD_LL_IsoOUTIncomplete>

08003b64 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8003b64:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8003b68:	f7ff bb64 	b.w	8003234 <USBD_LL_IsoINIncomplete>

08003b6c <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8003b6c:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8003b70:	f7ff bb86 	b.w	8003280 <USBD_LL_DevConnected>

08003b74 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8003b74:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8003b78:	f7ff bb84 	b.w	8003284 <USBD_LL_DevDisconnected>

08003b7c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8003b7c:	b508      	push	{r3, lr}
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8003b7e:	7802      	ldrb	r2, [r0, #0]
{
 8003b80:	4603      	mov	r3, r0
  if (pdev->id == DEVICE_FS) {
 8003b82:	bb22      	cbnz	r2, 8003bce <USBD_LL_Init+0x52>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8003b84:	4813      	ldr	r0, [pc, #76]	@ (8003bd4 <USBD_LL_Init+0x58>)
 8003b86:	f8c0 34e0 	str.w	r3, [r0, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8003b8a:	f8c3 02c8 	str.w	r0, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003b8e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003b92:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8003b94:	2304      	movs	r3, #4
 8003b96:	7103      	strb	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003b98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003b9c:	80c3      	strh	r3, [r0, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	7243      	strb	r3, [r0, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8003ba2:	8142      	strh	r2, [r0, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003ba4:	7302      	strb	r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8003ba6:	81c2      	strh	r2, [r0, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003ba8:	f7fd f986 	bl	8000eb8 <HAL_PCD_Init>
 8003bac:	b108      	cbz	r0, 8003bb2 <USBD_LL_Init+0x36>
  {
    Error_Handler( );
 8003bae:	f7fc fced 	bl	800058c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8003bb2:	2180      	movs	r1, #128	@ 0x80
 8003bb4:	4807      	ldr	r0, [pc, #28]	@ (8003bd4 <USBD_LL_Init+0x58>)
 8003bb6:	f7fd fe9a 	bl	80018ee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8003bba:	2240      	movs	r2, #64	@ 0x40
 8003bbc:	2100      	movs	r1, #0
 8003bbe:	4805      	ldr	r0, [pc, #20]	@ (8003bd4 <USBD_LL_Init+0x58>)
 8003bc0:	f7fd fe76 	bl	80018b0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8003bc4:	4803      	ldr	r0, [pc, #12]	@ (8003bd4 <USBD_LL_Init+0x58>)
 8003bc6:	2280      	movs	r2, #128	@ 0x80
 8003bc8:	2101      	movs	r1, #1
 8003bca:	f7fd fe71 	bl	80018b0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
}
 8003bce:	2000      	movs	r0, #0
 8003bd0:	bd08      	pop	{r3, pc}
 8003bd2:	bf00      	nop
 8003bd4:	20000b48 	.word	0x20000b48

08003bd8 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;

  if((ep_addr & 0x80) == 0x80)
 8003bd8:	f011 0f80 	tst.w	r1, #128	@ 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003bdc:	f8d0 32c8 	ldr.w	r3, [r0, #712]	@ 0x2c8
  if((ep_addr & 0x80) == 0x80)
 8003be0:	f04f 0224 	mov.w	r2, #36	@ 0x24
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8003be4:	bf1b      	ittet	ne
 8003be6:	f001 017f 	andne.w	r1, r1, #127	@ 0x7f
 8003bea:	fb02 3301 	mlane	r3, r2, r1, r3
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8003bee:	fb02 3301 	mlaeq	r3, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8003bf2:	7d98      	ldrbne	r0, [r3, #22]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8003bf4:	bf08      	it	eq
 8003bf6:	f893 0256 	ldrbeq.w	r0, [r3, #598]	@ 0x256
  }
}
 8003bfa:	4770      	bx	lr

08003bfc <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8003bfc:	4800      	ldr	r0, [pc, #0]	@ (8003c00 <USBD_static_malloc+0x4>)
 8003bfe:	4770      	bx	lr
 8003c00:	20000724 	.word	0x20000724

08003c04 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 8003c04:	4770      	bx	lr

08003c06 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8003c06:	b118      	cbz	r0, 8003c10 <USBD_Get_USB_Status+0xa>
 8003c08:	2802      	cmp	r0, #2
 8003c0a:	bf0c      	ite	eq
 8003c0c:	2001      	moveq	r0, #1
 8003c0e:	2003      	movne	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8003c10:	4770      	bx	lr

08003c12 <USBD_LL_Start>:
{
 8003c12:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8003c14:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8003c18:	f7fd f9bd 	bl	8000f96 <HAL_PCD_Start>
}
 8003c1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003c20:	f7ff bff1 	b.w	8003c06 <USBD_Get_USB_Status>

08003c24 <USBD_LL_Stop>:
{
 8003c24:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Stop(pdev->pData);
 8003c26:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8003c2a:	f7fd f9d3 	bl	8000fd4 <HAL_PCD_Stop>
}
 8003c2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003c32:	f7ff bfe8 	b.w	8003c06 <USBD_Get_USB_Status>

08003c36 <USBD_LL_OpenEP>:
{
 8003c36:	b510      	push	{r4, lr}
 8003c38:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8003c3a:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
{
 8003c3e:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8003c40:	4623      	mov	r3, r4
 8003c42:	f7fd f9fe 	bl	8001042 <HAL_PCD_EP_Open>
}
 8003c46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003c4a:	f7ff bfdc 	b.w	8003c06 <USBD_Get_USB_Status>

08003c4e <USBD_LL_StallEP>:
{
 8003c4e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003c50:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8003c54:	f7fd fa65 	bl	8001122 <HAL_PCD_EP_SetStall>
}
 8003c58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003c5c:	f7ff bfd3 	b.w	8003c06 <USBD_Get_USB_Status>

08003c60 <USBD_LL_ClearStallEP>:
{
 8003c60:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8003c62:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8003c66:	f7fd fa93 	bl	8001190 <HAL_PCD_EP_ClrStall>
}
 8003c6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003c6e:	f7ff bfca 	b.w	8003c06 <USBD_Get_USB_Status>

08003c72 <USBD_LL_SetUSBAddress>:
{
 8003c72:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003c74:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8003c78:	f7fd f9d0 	bl	800101c <HAL_PCD_SetAddress>
}
 8003c7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003c80:	f7ff bfc1 	b.w	8003c06 <USBD_Get_USB_Status>

08003c84 <USBD_LL_Transmit>:
{
 8003c84:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003c86:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8003c8a:	f7fd fa2f 	bl	80010ec <HAL_PCD_EP_Transmit>
}
 8003c8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003c92:	f7ff bfb8 	b.w	8003c06 <USBD_Get_USB_Status>

08003c96 <USBD_LL_PrepareReceive>:
{
 8003c96:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003c98:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8003c9c:	f7fd fa08 	bl	80010b0 <HAL_PCD_EP_Receive>
}
 8003ca0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003ca4:	f7ff bfaf 	b.w	8003c06 <USBD_Get_USB_Status>

08003ca8 <memset>:
 8003ca8:	4402      	add	r2, r0
 8003caa:	4603      	mov	r3, r0
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d100      	bne.n	8003cb2 <memset+0xa>
 8003cb0:	4770      	bx	lr
 8003cb2:	f803 1b01 	strb.w	r1, [r3], #1
 8003cb6:	e7f9      	b.n	8003cac <memset+0x4>

08003cb8 <__libc_init_array>:
 8003cb8:	b570      	push	{r4, r5, r6, lr}
 8003cba:	4d0d      	ldr	r5, [pc, #52]	@ (8003cf0 <__libc_init_array+0x38>)
 8003cbc:	4c0d      	ldr	r4, [pc, #52]	@ (8003cf4 <__libc_init_array+0x3c>)
 8003cbe:	1b64      	subs	r4, r4, r5
 8003cc0:	10a4      	asrs	r4, r4, #2
 8003cc2:	2600      	movs	r6, #0
 8003cc4:	42a6      	cmp	r6, r4
 8003cc6:	d109      	bne.n	8003cdc <__libc_init_array+0x24>
 8003cc8:	4d0b      	ldr	r5, [pc, #44]	@ (8003cf8 <__libc_init_array+0x40>)
 8003cca:	4c0c      	ldr	r4, [pc, #48]	@ (8003cfc <__libc_init_array+0x44>)
 8003ccc:	f000 f818 	bl	8003d00 <_init>
 8003cd0:	1b64      	subs	r4, r4, r5
 8003cd2:	10a4      	asrs	r4, r4, #2
 8003cd4:	2600      	movs	r6, #0
 8003cd6:	42a6      	cmp	r6, r4
 8003cd8:	d105      	bne.n	8003ce6 <__libc_init_array+0x2e>
 8003cda:	bd70      	pop	{r4, r5, r6, pc}
 8003cdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ce0:	4798      	blx	r3
 8003ce2:	3601      	adds	r6, #1
 8003ce4:	e7ee      	b.n	8003cc4 <__libc_init_array+0xc>
 8003ce6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cea:	4798      	blx	r3
 8003cec:	3601      	adds	r6, #1
 8003cee:	e7f2      	b.n	8003cd6 <__libc_init_array+0x1e>
 8003cf0:	08003db4 	.word	0x08003db4
 8003cf4:	08003db4 	.word	0x08003db4
 8003cf8:	08003db4 	.word	0x08003db4
 8003cfc:	08003db8 	.word	0x08003db8

08003d00 <_init>:
 8003d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d02:	bf00      	nop
 8003d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d06:	bc08      	pop	{r3}
 8003d08:	469e      	mov	lr, r3
 8003d0a:	4770      	bx	lr

08003d0c <_fini>:
 8003d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d0e:	bf00      	nop
 8003d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d12:	bc08      	pop	{r3}
 8003d14:	469e      	mov	lr, r3
 8003d16:	4770      	bx	lr
