
stm32f411-boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b4c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08003ce4  08003ce4  00004ce4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d78  08003d78  000050dc  2**0
                  CONTENTS
  4 .ARM          00000008  08003d78  08003d78  00004d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d80  08003d80  000050dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d80  08003d80  00004d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003d84  08003d84  00004d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000dc  20000000  08003d88  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f4c  200000dc  08003e64  000050dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001028  08003e64  00006028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000050dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000128ff  00000000  00000000  0000510c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004123  00000000  00000000  00017a0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  0001bb30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b9f  00000000  00000000  0001c808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001938c  00000000  00000000  0001d3a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015eba  00000000  00000000  00036733  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008da48  00000000  00000000  0004c5ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000da035  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ecc  00000000  00000000  000da078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00005afd  00000000  00000000  000dbf44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  000e1a41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000dc 	.word	0x200000dc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003ccc 	.word	0x08003ccc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000e0 	.word	0x200000e0
 80001d4:	08003ccc 	.word	0x08003ccc

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b96a 	b.w	80004d4 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	460c      	mov	r4, r1
 8000220:	2b00      	cmp	r3, #0
 8000222:	d14e      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000224:	4694      	mov	ip, r2
 8000226:	458c      	cmp	ip, r1
 8000228:	4686      	mov	lr, r0
 800022a:	fab2 f282 	clz	r2, r2
 800022e:	d962      	bls.n	80002f6 <__udivmoddi4+0xde>
 8000230:	b14a      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000232:	f1c2 0320 	rsb	r3, r2, #32
 8000236:	4091      	lsls	r1, r2
 8000238:	fa20 f303 	lsr.w	r3, r0, r3
 800023c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000240:	4319      	orrs	r1, r3
 8000242:	fa00 fe02 	lsl.w	lr, r0, r2
 8000246:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024a:	fa1f f68c 	uxth.w	r6, ip
 800024e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000252:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000256:	fb07 1114 	mls	r1, r7, r4, r1
 800025a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800025e:	fb04 f106 	mul.w	r1, r4, r6
 8000262:	4299      	cmp	r1, r3
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x64>
 8000266:	eb1c 0303 	adds.w	r3, ip, r3
 800026a:	f104 30ff 	add.w	r0, r4, #4294967295
 800026e:	f080 8112 	bcs.w	8000496 <__udivmoddi4+0x27e>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 810f 	bls.w	8000496 <__udivmoddi4+0x27e>
 8000278:	3c02      	subs	r4, #2
 800027a:	4463      	add	r3, ip
 800027c:	1a59      	subs	r1, r3, r1
 800027e:	fa1f f38e 	uxth.w	r3, lr
 8000282:	fbb1 f0f7 	udiv	r0, r1, r7
 8000286:	fb07 1110 	mls	r1, r7, r0, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb00 f606 	mul.w	r6, r0, r6
 8000292:	429e      	cmp	r6, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x94>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f100 31ff 	add.w	r1, r0, #4294967295
 800029e:	f080 80fc 	bcs.w	800049a <__udivmoddi4+0x282>
 80002a2:	429e      	cmp	r6, r3
 80002a4:	f240 80f9 	bls.w	800049a <__udivmoddi4+0x282>
 80002a8:	4463      	add	r3, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	1b9b      	subs	r3, r3, r6
 80002ae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa6>
 80002b6:	40d3      	lsrs	r3, r2
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xba>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb4>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa6>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x150>
 80002da:	42a3      	cmp	r3, r4
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xcc>
 80002de:	4290      	cmp	r0, r2
 80002e0:	f0c0 80f0 	bcc.w	80004c4 <__udivmoddi4+0x2ac>
 80002e4:	1a86      	subs	r6, r0, r2
 80002e6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	2d00      	cmp	r5, #0
 80002ee:	d0e6      	beq.n	80002be <__udivmoddi4+0xa6>
 80002f0:	e9c5 6300 	strd	r6, r3, [r5]
 80002f4:	e7e3      	b.n	80002be <__udivmoddi4+0xa6>
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	f040 8090 	bne.w	800041c <__udivmoddi4+0x204>
 80002fc:	eba1 040c 	sub.w	r4, r1, ip
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	fa1f f78c 	uxth.w	r7, ip
 8000308:	2101      	movs	r1, #1
 800030a:	fbb4 f6f8 	udiv	r6, r4, r8
 800030e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000312:	fb08 4416 	mls	r4, r8, r6, r4
 8000316:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031a:	fb07 f006 	mul.w	r0, r7, r6
 800031e:	4298      	cmp	r0, r3
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x11c>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f106 34ff 	add.w	r4, r6, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x11a>
 800032c:	4298      	cmp	r0, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2b4>
 8000332:	4626      	mov	r6, r4
 8000334:	1a1c      	subs	r4, r3, r0
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb4 f0f8 	udiv	r0, r4, r8
 800033e:	fb08 4410 	mls	r4, r8, r0, r4
 8000342:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000346:	fb00 f707 	mul.w	r7, r0, r7
 800034a:	429f      	cmp	r7, r3
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x148>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 34ff 	add.w	r4, r0, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x146>
 8000358:	429f      	cmp	r7, r3
 800035a:	f200 80b0 	bhi.w	80004be <__udivmoddi4+0x2a6>
 800035e:	4620      	mov	r0, r4
 8000360:	1bdb      	subs	r3, r3, r7
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x9c>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa20 fc06 	lsr.w	ip, r0, r6
 8000378:	fa04 f301 	lsl.w	r3, r4, r1
 800037c:	ea43 030c 	orr.w	r3, r3, ip
 8000380:	40f4      	lsrs	r4, r6
 8000382:	fa00 f801 	lsl.w	r8, r0, r1
 8000386:	0c38      	lsrs	r0, r7, #16
 8000388:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800038c:	fbb4 fef0 	udiv	lr, r4, r0
 8000390:	fa1f fc87 	uxth.w	ip, r7
 8000394:	fb00 441e 	mls	r4, r0, lr, r4
 8000398:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800039c:	fb0e f90c 	mul.w	r9, lr, ip
 80003a0:	45a1      	cmp	r9, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d90a      	bls.n	80003be <__udivmoddi4+0x1a6>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ae:	f080 8084 	bcs.w	80004ba <__udivmoddi4+0x2a2>
 80003b2:	45a1      	cmp	r9, r4
 80003b4:	f240 8081 	bls.w	80004ba <__udivmoddi4+0x2a2>
 80003b8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003bc:	443c      	add	r4, r7
 80003be:	eba4 0409 	sub.w	r4, r4, r9
 80003c2:	fa1f f983 	uxth.w	r9, r3
 80003c6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ca:	fb00 4413 	mls	r4, r0, r3, r4
 80003ce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d907      	bls.n	80003ea <__udivmoddi4+0x1d2>
 80003da:	193c      	adds	r4, r7, r4
 80003dc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e0:	d267      	bcs.n	80004b2 <__udivmoddi4+0x29a>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d965      	bls.n	80004b2 <__udivmoddi4+0x29a>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ee:	fba0 9302 	umull	r9, r3, r0, r2
 80003f2:	eba4 040c 	sub.w	r4, r4, ip
 80003f6:	429c      	cmp	r4, r3
 80003f8:	46ce      	mov	lr, r9
 80003fa:	469c      	mov	ip, r3
 80003fc:	d351      	bcc.n	80004a2 <__udivmoddi4+0x28a>
 80003fe:	d04e      	beq.n	800049e <__udivmoddi4+0x286>
 8000400:	b155      	cbz	r5, 8000418 <__udivmoddi4+0x200>
 8000402:	ebb8 030e 	subs.w	r3, r8, lr
 8000406:	eb64 040c 	sbc.w	r4, r4, ip
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	40cb      	lsrs	r3, r1
 8000410:	431e      	orrs	r6, r3
 8000412:	40cc      	lsrs	r4, r1
 8000414:	e9c5 6400 	strd	r6, r4, [r5]
 8000418:	2100      	movs	r1, #0
 800041a:	e750      	b.n	80002be <__udivmoddi4+0xa6>
 800041c:	f1c2 0320 	rsb	r3, r2, #32
 8000420:	fa20 f103 	lsr.w	r1, r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa24 f303 	lsr.w	r3, r4, r3
 800042c:	4094      	lsls	r4, r2
 800042e:	430c      	orrs	r4, r1
 8000430:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000434:	fa00 fe02 	lsl.w	lr, r0, r2
 8000438:	fa1f f78c 	uxth.w	r7, ip
 800043c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000440:	fb08 3110 	mls	r1, r8, r0, r3
 8000444:	0c23      	lsrs	r3, r4, #16
 8000446:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044a:	fb00 f107 	mul.w	r1, r0, r7
 800044e:	4299      	cmp	r1, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x24c>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 36ff 	add.w	r6, r0, #4294967295
 800045a:	d22c      	bcs.n	80004b6 <__udivmoddi4+0x29e>
 800045c:	4299      	cmp	r1, r3
 800045e:	d92a      	bls.n	80004b6 <__udivmoddi4+0x29e>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1a5b      	subs	r3, r3, r1
 8000466:	b2a4      	uxth	r4, r4
 8000468:	fbb3 f1f8 	udiv	r1, r3, r8
 800046c:	fb08 3311 	mls	r3, r8, r1, r3
 8000470:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000474:	fb01 f307 	mul.w	r3, r1, r7
 8000478:	42a3      	cmp	r3, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x276>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f101 36ff 	add.w	r6, r1, #4294967295
 8000484:	d213      	bcs.n	80004ae <__udivmoddi4+0x296>
 8000486:	42a3      	cmp	r3, r4
 8000488:	d911      	bls.n	80004ae <__udivmoddi4+0x296>
 800048a:	3902      	subs	r1, #2
 800048c:	4464      	add	r4, ip
 800048e:	1ae4      	subs	r4, r4, r3
 8000490:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000494:	e739      	b.n	800030a <__udivmoddi4+0xf2>
 8000496:	4604      	mov	r4, r0
 8000498:	e6f0      	b.n	800027c <__udivmoddi4+0x64>
 800049a:	4608      	mov	r0, r1
 800049c:	e706      	b.n	80002ac <__udivmoddi4+0x94>
 800049e:	45c8      	cmp	r8, r9
 80004a0:	d2ae      	bcs.n	8000400 <__udivmoddi4+0x1e8>
 80004a2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004a6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004aa:	3801      	subs	r0, #1
 80004ac:	e7a8      	b.n	8000400 <__udivmoddi4+0x1e8>
 80004ae:	4631      	mov	r1, r6
 80004b0:	e7ed      	b.n	800048e <__udivmoddi4+0x276>
 80004b2:	4603      	mov	r3, r0
 80004b4:	e799      	b.n	80003ea <__udivmoddi4+0x1d2>
 80004b6:	4630      	mov	r0, r6
 80004b8:	e7d4      	b.n	8000464 <__udivmoddi4+0x24c>
 80004ba:	46d6      	mov	lr, sl
 80004bc:	e77f      	b.n	80003be <__udivmoddi4+0x1a6>
 80004be:	4463      	add	r3, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e74d      	b.n	8000360 <__udivmoddi4+0x148>
 80004c4:	4606      	mov	r6, r0
 80004c6:	4623      	mov	r3, r4
 80004c8:	4608      	mov	r0, r1
 80004ca:	e70f      	b.n	80002ec <__udivmoddi4+0xd4>
 80004cc:	3e02      	subs	r6, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	e730      	b.n	8000334 <__udivmoddi4+0x11c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004dc:	2214      	movs	r2, #20
 80004de:	2100      	movs	r1, #0
 80004e0:	a803      	add	r0, sp, #12
 80004e2:	f003 fbc7 	bl	8003c74 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e6:	2400      	movs	r4, #0
 80004e8:	4b1c      	ldr	r3, [pc, #112]	@ (800055c <MX_GPIO_Init+0x84>)
 80004ea:	9400      	str	r4, [sp, #0]
 80004ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80004ee:	4e1c      	ldr	r6, [pc, #112]	@ (8000560 <MX_GPIO_Init+0x88>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004f0:	f042 0204 	orr.w	r2, r2, #4
 80004f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80004f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80004f8:	f002 0204 	and.w	r2, r2, #4
 80004fc:	9200      	str	r2, [sp, #0]
 80004fe:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000500:	9401      	str	r4, [sp, #4]
 8000502:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000504:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000508:	631a      	str	r2, [r3, #48]	@ 0x30
 800050a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800050c:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000510:	9201      	str	r2, [sp, #4]
 8000512:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000514:	9402      	str	r4, [sp, #8]
 8000516:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000518:	f042 0201 	orr.w	r2, r2, #1
 800051c:	631a      	str	r2, [r3, #48]	@ 0x30
 800051e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000520:	f003 0301 	and.w	r3, r3, #1
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000524:	4622      	mov	r2, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000526:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000528:	4630      	mov	r0, r6
 800052a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052e:	2501      	movs	r5, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000530:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000532:	f000 fc99 	bl	8000e68 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000536:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800053a:	a903      	add	r1, sp, #12
 800053c:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053e:	e9cd 3503 	strd	r3, r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000542:	e9cd 4405 	strd	r4, r4, [sp, #20]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000546:	f000 fbc3 	bl	8000cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054a:	4806      	ldr	r0, [pc, #24]	@ (8000564 <MX_GPIO_Init+0x8c>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800054c:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054e:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000550:	e9cd 5403 	strd	r5, r4, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000554:	f000 fbbc 	bl	8000cd0 <HAL_GPIO_Init>

}
 8000558:	b008      	add	sp, #32
 800055a:	bd70      	pop	{r4, r5, r6, pc}
 800055c:	40023800 	.word	0x40023800
 8000560:	40020800 	.word	0x40020800
 8000564:	40020000 	.word	0x40020000

08000568 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000568:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800056a:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800056c:	4c04      	ldr	r4, [pc, #16]	@ (8000580 <Error_Handler+0x18>)
 800056e:	4620      	mov	r0, r4
 8000570:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000574:	f000 fc7d 	bl	8000e72 <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 8000578:	2064      	movs	r0, #100	@ 0x64
 800057a:	f000 f979 	bl	8000870 <HAL_Delay>
  while (1)
 800057e:	e7f6      	b.n	800056e <Error_Handler+0x6>
 8000580:	40020800 	.word	0x40020800

08000584 <SystemClock_Config>:
{
 8000584:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	2400      	movs	r4, #0
{
 8000588:	b094      	sub	sp, #80	@ 0x50
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058a:	4621      	mov	r1, r4
 800058c:	2214      	movs	r2, #20
 800058e:	a803      	add	r0, sp, #12
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000590:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
 8000594:	940c      	str	r4, [sp, #48]	@ 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000596:	f003 fb6d 	bl	8003c74 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 800059a:	4b1f      	ldr	r3, [pc, #124]	@ (8000618 <SystemClock_Config+0x94>)
 800059c:	9401      	str	r4, [sp, #4]
 800059e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80005a0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80005a4:	641a      	str	r2, [r3, #64]	@ 0x40
 80005a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005ac:	9301      	str	r3, [sp, #4]
 80005ae:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b0:	4b1a      	ldr	r3, [pc, #104]	@ (800061c <SystemClock_Config+0x98>)
 80005b2:	9402      	str	r4, [sp, #8]
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005c2:	9302      	str	r3, [sp, #8]
 80005c4:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c6:	2209      	movs	r2, #9
 80005c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005cc:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLM = 15;
 80005d0:	260f      	movs	r6, #15
 80005d2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005d6:	e9cd 360f 	strd	r3, r6, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005da:	2190      	movs	r1, #144	@ 0x90
 80005dc:	2304      	movs	r3, #4
 80005de:	e9cd 1311 	strd	r1, r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e2:	2401      	movs	r4, #1
 80005e4:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80005e6:	2305      	movs	r3, #5
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e8:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ea:	e9cd 450d 	strd	r4, r5, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80005ee:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f0:	f001 f968 	bl	80018c4 <HAL_RCC_OscConfig>
 80005f4:	b108      	cbz	r0, 80005fa <SystemClock_Config+0x76>
    Error_Handler();
 80005f6:	f7ff ffb7 	bl	8000568 <Error_Handler>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fe:	e9cd 3006 	strd	r3, r0, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000602:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000604:	4621      	mov	r1, r4
 8000606:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000608:	e9cd 6503 	strd	r6, r5, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800060c:	f001 fb36 	bl	8001c7c <HAL_RCC_ClockConfig>
 8000610:	2800      	cmp	r0, #0
 8000612:	d1f0      	bne.n	80005f6 <SystemClock_Config+0x72>
}
 8000614:	b014      	add	sp, #80	@ 0x50
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	40023800 	.word	0x40023800
 800061c:	40007000 	.word	0x40007000

08000620 <main>:
{
 8000620:	b508      	push	{r3, lr}
  HAL_Init();
 8000622:	f000 f8f9 	bl	8000818 <HAL_Init>
  SystemClock_Config();
 8000626:	f7ff ffad 	bl	8000584 <SystemClock_Config>
  MX_GPIO_Init();
 800062a:	f7ff ff55 	bl	80004d8 <MX_GPIO_Init>
  MX_RTC_Init();
 800062e:	f000 f833 	bl	8000698 <MX_RTC_Init>
  MX_USB_DEVICE_Init();
 8000632:	f003 f8cd 	bl	80037d0 <MX_USB_DEVICE_Init>
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000636:	4d13      	ldr	r5, [pc, #76]	@ (8000684 <main+0x64>)
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET)
 8000638:	4e13      	ldr	r6, [pc, #76]	@ (8000688 <main+0x68>)
      if(((*(__IO uint32_t*)USBD_DFU_APP_DEFAULT_ADD) & 0x2200000C) == 0x20000000)
 800063a:	4c14      	ldr	r4, [pc, #80]	@ (800068c <main+0x6c>)
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800063c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000640:	4628      	mov	r0, r5
 8000642:	f000 fc16 	bl	8000e72 <HAL_GPIO_TogglePin>
    HAL_Delay(50);
 8000646:	2032      	movs	r0, #50	@ 0x32
 8000648:	f000 f912 	bl	8000870 <HAL_Delay>
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET)
 800064c:	2101      	movs	r1, #1
 800064e:	4630      	mov	r0, r6
 8000650:	f000 fc04 	bl	8000e5c <HAL_GPIO_ReadPin>
 8000654:	2800      	cmp	r0, #0
 8000656:	d1f1      	bne.n	800063c <main+0x1c>
      if(((*(__IO uint32_t*)USBD_DFU_APP_DEFAULT_ADD) & 0x2200000C) == 0x20000000)
 8000658:	6823      	ldr	r3, [r4, #0]
 800065a:	f023 435d 	bic.w	r3, r3, #3707764736	@ 0xdd000000
 800065e:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8000662:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000666:	f023 03f3 	bic.w	r3, r3, #243	@ 0xf3
 800066a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800066e:	d1e5      	bne.n	800063c <main+0x1c>
        JumpAddress = *(__IO uint32_t*) (USBD_DFU_APP_DEFAULT_ADD + 4);
 8000670:	4a07      	ldr	r2, [pc, #28]	@ (8000690 <main+0x70>)
 8000672:	6863      	ldr	r3, [r4, #4]
 8000674:	6013      	str	r3, [r2, #0]
        JumpToApplication = (pFunction) JumpAddress;
 8000676:	4a07      	ldr	r2, [pc, #28]	@ (8000694 <main+0x74>)
 8000678:	6013      	str	r3, [r2, #0]
        __set_MSP((*(__IO uint32_t*) USBD_DFU_APP_DEFAULT_ADD ));
 800067a:	6822      	ldr	r2, [r4, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800067c:	f382 8808 	msr	MSP, r2
        JumpToApplication();
 8000680:	4798      	blx	r3
 8000682:	e7db      	b.n	800063c <main+0x1c>
 8000684:	40020800 	.word	0x40020800
 8000688:	40020000 	.word	0x40020000
 800068c:	08005000 	.word	0x08005000
 8000690:	200000f8 	.word	0x200000f8
 8000694:	200000fc 	.word	0x200000fc

08000698 <MX_RTC_Init>:

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000698:	480a      	ldr	r0, [pc, #40]	@ (80006c4 <MX_RTC_Init+0x2c>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800069a:	4a0b      	ldr	r2, [pc, #44]	@ (80006c8 <MX_RTC_Init+0x30>)
{
 800069c:	b508      	push	{r3, lr}
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800069e:	2300      	movs	r3, #0
 80006a0:	e9c0 2300 	strd	r2, r3, [r0]
  hrtc.Init.AsynchPrediv = 127;
  hrtc.Init.SynchPrediv = 255;
 80006a4:	217f      	movs	r1, #127	@ 0x7f
 80006a6:	22ff      	movs	r2, #255	@ 0xff
 80006a8:	e9c0 1202 	strd	r1, r2, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006ac:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006b0:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006b2:	f001 fc72 	bl	8001f9a <HAL_RTC_Init>
 80006b6:	b118      	cbz	r0, 80006c0 <MX_RTC_Init+0x28>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80006b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80006bc:	f7ff bf54 	b.w	8000568 <Error_Handler>
}
 80006c0:	bd08      	pop	{r3, pc}
 80006c2:	bf00      	nop
 80006c4:	20000100 	.word	0x20000100
 80006c8:	40002800 	.word	0x40002800

080006cc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80006cc:	b510      	push	{r4, lr}
 80006ce:	4604      	mov	r4, r0
 80006d0:	b086      	sub	sp, #24

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006d2:	2218      	movs	r2, #24
 80006d4:	2100      	movs	r1, #0
 80006d6:	4668      	mov	r0, sp
 80006d8:	f003 facc 	bl	8003c74 <memset>
  if(rtcHandle->Instance==RTC)
 80006dc:	6822      	ldr	r2, [r4, #0]
 80006de:	4b0a      	ldr	r3, [pc, #40]	@ (8000708 <HAL_RTC_MspInit+0x3c>)
 80006e0:	429a      	cmp	r2, r3
 80006e2:	d10e      	bne.n	8000702 <HAL_RTC_MspInit+0x36>
//  __HAL_RCC_BACKUPRESET_FORCE();
  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80006e4:	2302      	movs	r3, #2
 80006e6:	9300      	str	r3, [sp, #0]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006e8:	4668      	mov	r0, sp
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80006ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80006ee:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006f0:	f001 fb64 	bl	8001dbc <HAL_RCCEx_PeriphCLKConfig>
 80006f4:	b108      	cbz	r0, 80006fa <HAL_RTC_MspInit+0x2e>
    {
      Error_Handler();
 80006f6:	f7ff ff37 	bl	8000568 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80006fa:	4b04      	ldr	r3, [pc, #16]	@ (800070c <HAL_RTC_MspInit+0x40>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	f8c3 2e3c 	str.w	r2, [r3, #3644]	@ 0xe3c
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000702:	b006      	add	sp, #24
 8000704:	bd10      	pop	{r4, pc}
 8000706:	bf00      	nop
 8000708:	40002800 	.word	0x40002800
 800070c:	42470000 	.word	0x42470000

08000710 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000710:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000712:	4b0c      	ldr	r3, [pc, #48]	@ (8000744 <HAL_MspInit+0x34>)
 8000714:	2100      	movs	r1, #0
 8000716:	9100      	str	r1, [sp, #0]
 8000718:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800071a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800071e:	645a      	str	r2, [r3, #68]	@ 0x44
 8000720:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000722:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000726:	9200      	str	r2, [sp, #0]
 8000728:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800072a:	9101      	str	r1, [sp, #4]
 800072c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800072e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000732:	641a      	str	r2, [r3, #64]	@ 0x40
 8000734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000736:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800073a:	9301      	str	r3, [sp, #4]
 800073c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800073e:	b002      	add	sp, #8
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	40023800 	.word	0x40023800

08000748 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000748:	e7fe      	b.n	8000748 <NMI_Handler>

0800074a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800074a:	e7fe      	b.n	800074a <HardFault_Handler>

0800074c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800074c:	e7fe      	b.n	800074c <MemManage_Handler>

0800074e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800074e:	e7fe      	b.n	800074e <BusFault_Handler>

08000750 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000750:	e7fe      	b.n	8000750 <UsageFault_Handler>

08000752 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000752:	4770      	bx	lr

08000754 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8000754:	4770      	bx	lr

08000756 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000756:	4770      	bx	lr

08000758 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000758:	f000 b878 	b.w	800084c <HAL_IncTick>

0800075c <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800075c:	4801      	ldr	r0, [pc, #4]	@ (8000764 <OTG_FS_IRQHandler+0x8>)
 800075e:	f000 bd43 	b.w	80011e8 <HAL_PCD_IRQHandler>
 8000762:	bf00      	nop
 8000764:	20000b44 	.word	0x20000b44

08000768 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000768:	4a03      	ldr	r2, [pc, #12]	@ (8000778 <SystemInit+0x10>)
 800076a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800076e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000772:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000776:	4770      	bx	lr
 8000778:	e000ed00 	.word	0xe000ed00

0800077c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800077c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000780:	f7ff fff2 	bl	8000768 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000784:	480c      	ldr	r0, [pc, #48]	@ (80007b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000786:	490d      	ldr	r1, [pc, #52]	@ (80007bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000788:	4a0d      	ldr	r2, [pc, #52]	@ (80007c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800078a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800078c:	e002      	b.n	8000794 <LoopCopyDataInit>

0800078e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800078e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000790:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000792:	3304      	adds	r3, #4

08000794 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000794:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000796:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000798:	d3f9      	bcc.n	800078e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800079a:	4a0a      	ldr	r2, [pc, #40]	@ (80007c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800079c:	4c0a      	ldr	r4, [pc, #40]	@ (80007c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800079e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007a0:	e001      	b.n	80007a6 <LoopFillZerobss>

080007a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007a4:	3204      	adds	r2, #4

080007a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007a8:	d3fb      	bcc.n	80007a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007aa:	f003 fa6b 	bl	8003c84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007ae:	f7ff ff37 	bl	8000620 <main>
  bx  lr    
 80007b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80007b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007bc:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 80007c0:	08003d88 	.word	0x08003d88
  ldr r2, =_sbss
 80007c4:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 80007c8:	20001028 	.word	0x20001028

080007cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007cc:	e7fe      	b.n	80007cc <ADC_IRQHandler>
	...

080007d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007d0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007d2:	4b0e      	ldr	r3, [pc, #56]	@ (800080c <HAL_InitTick+0x3c>)
 80007d4:	781a      	ldrb	r2, [r3, #0]
 80007d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007da:	fbb3 f3f2 	udiv	r3, r3, r2
 80007de:	4a0c      	ldr	r2, [pc, #48]	@ (8000810 <HAL_InitTick+0x40>)
{
 80007e0:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007e2:	6810      	ldr	r0, [r2, #0]
 80007e4:	fbb0 f0f3 	udiv	r0, r0, r3
 80007e8:	f000 f8a8 	bl	800093c <HAL_SYSTICK_Config>
 80007ec:	4604      	mov	r4, r0
 80007ee:	b958      	cbnz	r0, 8000808 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007f0:	2d0f      	cmp	r5, #15
 80007f2:	d809      	bhi.n	8000808 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007f4:	4602      	mov	r2, r0
 80007f6:	4629      	mov	r1, r5
 80007f8:	f04f 30ff 	mov.w	r0, #4294967295
 80007fc:	f000 f85e 	bl	80008bc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000800:	4b04      	ldr	r3, [pc, #16]	@ (8000814 <HAL_InitTick+0x44>)
 8000802:	4620      	mov	r0, r4
 8000804:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000806:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000808:	2001      	movs	r0, #1
 800080a:	e7fc      	b.n	8000806 <HAL_InitTick+0x36>
 800080c:	20000004 	.word	0x20000004
 8000810:	20000000 	.word	0x20000000
 8000814:	20000008 	.word	0x20000008

08000818 <HAL_Init>:
{
 8000818:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800081a:	4b0b      	ldr	r3, [pc, #44]	@ (8000848 <HAL_Init+0x30>)
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000822:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000824:	681a      	ldr	r2, [r3, #0]
 8000826:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800082a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000832:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000834:	2003      	movs	r0, #3
 8000836:	f000 f82f 	bl	8000898 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800083a:	200f      	movs	r0, #15
 800083c:	f7ff ffc8 	bl	80007d0 <HAL_InitTick>
  HAL_MspInit();
 8000840:	f7ff ff66 	bl	8000710 <HAL_MspInit>
}
 8000844:	2000      	movs	r0, #0
 8000846:	bd08      	pop	{r3, pc}
 8000848:	40023c00 	.word	0x40023c00

0800084c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800084c:	4a03      	ldr	r2, [pc, #12]	@ (800085c <HAL_IncTick+0x10>)
 800084e:	4b04      	ldr	r3, [pc, #16]	@ (8000860 <HAL_IncTick+0x14>)
 8000850:	6811      	ldr	r1, [r2, #0]
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	440b      	add	r3, r1
 8000856:	6013      	str	r3, [r2, #0]
}
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	20000120 	.word	0x20000120
 8000860:	20000004 	.word	0x20000004

08000864 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000864:	4b01      	ldr	r3, [pc, #4]	@ (800086c <HAL_GetTick+0x8>)
 8000866:	6818      	ldr	r0, [r3, #0]
}
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	20000120 	.word	0x20000120

08000870 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000870:	b538      	push	{r3, r4, r5, lr}
 8000872:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000874:	f7ff fff6 	bl	8000864 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000878:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800087a:	bf1c      	itt	ne
 800087c:	4b05      	ldrne	r3, [pc, #20]	@ (8000894 <HAL_Delay+0x24>)
 800087e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000880:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000882:	bf18      	it	ne
 8000884:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000886:	f7ff ffed 	bl	8000864 <HAL_GetTick>
 800088a:	1b43      	subs	r3, r0, r5
 800088c:	42a3      	cmp	r3, r4
 800088e:	d3fa      	bcc.n	8000886 <HAL_Delay+0x16>
  {
  }
}
 8000890:	bd38      	pop	{r3, r4, r5, pc}
 8000892:	bf00      	nop
 8000894:	20000004 	.word	0x20000004

08000898 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000898:	4907      	ldr	r1, [pc, #28]	@ (80008b8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800089a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800089c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008a0:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008a2:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008a8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80008b4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80008b6:	4770      	bx	lr
 80008b8:	e000ed00 	.word	0xe000ed00

080008bc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008bc:	4b16      	ldr	r3, [pc, #88]	@ (8000918 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008be:	b530      	push	{r4, r5, lr}
 80008c0:	68dc      	ldr	r4, [r3, #12]
 80008c2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008c6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ca:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008cc:	2b04      	cmp	r3, #4
 80008ce:	bf28      	it	cs
 80008d0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008d2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d4:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008d8:	bf8c      	ite	hi
 80008da:	3c03      	subhi	r4, #3
 80008dc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008de:	fa05 f303 	lsl.w	r3, r5, r3
 80008e2:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008e6:	40a5      	lsls	r5, r4
 80008e8:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008ec:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 80008ee:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f0:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f4:	bfac      	ite	ge
 80008f6:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008fa:	4a08      	ldrlt	r2, [pc, #32]	@ (800091c <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008fc:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000900:	bfb8      	it	lt
 8000902:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000906:	b2db      	uxtb	r3, r3
 8000908:	bfaa      	itet	ge
 800090a:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800090e:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000910:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000914:	bd30      	pop	{r4, r5, pc}
 8000916:	bf00      	nop
 8000918:	e000ed00 	.word	0xe000ed00
 800091c:	e000ed14 	.word	0xe000ed14

08000920 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000920:	2800      	cmp	r0, #0
 8000922:	db07      	blt.n	8000934 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000924:	4a04      	ldr	r2, [pc, #16]	@ (8000938 <HAL_NVIC_EnableIRQ+0x18>)
 8000926:	0941      	lsrs	r1, r0, #5
 8000928:	2301      	movs	r3, #1
 800092a:	f000 001f 	and.w	r0, r0, #31
 800092e:	4083      	lsls	r3, r0
 8000930:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	e000e100 	.word	0xe000e100

0800093c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800093c:	3801      	subs	r0, #1
 800093e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000942:	d20b      	bcs.n	800095c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000944:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000948:	4a05      	ldr	r2, [pc, #20]	@ (8000960 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800094a:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800094c:	21f0      	movs	r1, #240	@ 0xf0
 800094e:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000952:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000954:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000956:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000958:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800095a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800095c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800095e:	4770      	bx	lr
 8000960:	e000ed00 	.word	0xe000ed00

08000964 <FLASH_Program_DoubleWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000964:	4909      	ldr	r1, [pc, #36]	@ (800098c <FLASH_Program_DoubleWord+0x28>)
{
 8000966:	b510      	push	{r4, lr}
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000968:	690c      	ldr	r4, [r1, #16]
 800096a:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
 800096e:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8000970:	690c      	ldr	r4, [r1, #16]
 8000972:	f444 7440 	orr.w	r4, r4, #768	@ 0x300
 8000976:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000978:	690c      	ldr	r4, [r1, #16]
 800097a:	f044 0401 	orr.w	r4, r4, #1
 800097e:	610c      	str	r4, [r1, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8000980:	6002      	str	r2, [r0, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8000982:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8000986:	6043      	str	r3, [r0, #4]
}
 8000988:	bd10      	pop	{r4, pc}
 800098a:	bf00      	nop
 800098c:	40023c00 	.word	0x40023c00

08000990 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000990:	4b07      	ldr	r3, [pc, #28]	@ (80009b0 <FLASH_Program_Word+0x20>)
 8000992:	691a      	ldr	r2, [r3, #16]
 8000994:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8000998:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800099a:	691a      	ldr	r2, [r3, #16]
 800099c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80009a0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80009a2:	691a      	ldr	r2, [r3, #16]
 80009a4:	f042 0201 	orr.w	r2, r2, #1
 80009a8:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 80009aa:	6001      	str	r1, [r0, #0]
}
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	40023c00 	.word	0x40023c00

080009b4 <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80009b4:	4b07      	ldr	r3, [pc, #28]	@ (80009d4 <FLASH_Program_HalfWord+0x20>)
 80009b6:	691a      	ldr	r2, [r3, #16]
 80009b8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80009bc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80009be:	691a      	ldr	r2, [r3, #16]
 80009c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80009c4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80009c6:	691a      	ldr	r2, [r3, #16]
 80009c8:	f042 0201 	orr.w	r2, r2, #1
 80009cc:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 80009ce:	8001      	strh	r1, [r0, #0]
}
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	40023c00 	.word	0x40023c00

080009d8 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80009d8:	4b20      	ldr	r3, [pc, #128]	@ (8000a5c <FLASH_SetErrorCode+0x84>)
 80009da:	68da      	ldr	r2, [r3, #12]
 80009dc:	06d0      	lsls	r0, r2, #27
 80009de:	d506      	bpl.n	80009ee <FLASH_SetErrorCode+0x16>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80009e0:	491f      	ldr	r1, [pc, #124]	@ (8000a60 <FLASH_SetErrorCode+0x88>)
 80009e2:	69ca      	ldr	r2, [r1, #28]
 80009e4:	f042 0210 	orr.w	r2, r2, #16
 80009e8:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80009ea:	2210      	movs	r2, #16
 80009ec:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80009ee:	68da      	ldr	r2, [r3, #12]
 80009f0:	0691      	lsls	r1, r2, #26
 80009f2:	d506      	bpl.n	8000a02 <FLASH_SetErrorCode+0x2a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80009f4:	491a      	ldr	r1, [pc, #104]	@ (8000a60 <FLASH_SetErrorCode+0x88>)
 80009f6:	69ca      	ldr	r2, [r1, #28]
 80009f8:	f042 0208 	orr.w	r2, r2, #8
 80009fc:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80009fe:	2220      	movs	r2, #32
 8000a00:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8000a02:	4b16      	ldr	r3, [pc, #88]	@ (8000a5c <FLASH_SetErrorCode+0x84>)
 8000a04:	68da      	ldr	r2, [r3, #12]
 8000a06:	0652      	lsls	r2, r2, #25
 8000a08:	d506      	bpl.n	8000a18 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8000a0a:	4915      	ldr	r1, [pc, #84]	@ (8000a60 <FLASH_SetErrorCode+0x88>)
 8000a0c:	69ca      	ldr	r2, [r1, #28]
 8000a0e:	f042 0204 	orr.w	r2, r2, #4
 8000a12:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8000a14:	2240      	movs	r2, #64	@ 0x40
 8000a16:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8000a18:	68da      	ldr	r2, [r3, #12]
 8000a1a:	0610      	lsls	r0, r2, #24
 8000a1c:	d506      	bpl.n	8000a2c <FLASH_SetErrorCode+0x54>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8000a1e:	4910      	ldr	r1, [pc, #64]	@ (8000a60 <FLASH_SetErrorCode+0x88>)
 8000a20:	69ca      	ldr	r2, [r1, #28]
 8000a22:	f042 0202 	orr.w	r2, r2, #2
 8000a26:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8000a28:	2280      	movs	r2, #128	@ 0x80
 8000a2a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8000a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a5c <FLASH_SetErrorCode+0x84>)
 8000a2e:	68da      	ldr	r2, [r3, #12]
 8000a30:	05d1      	lsls	r1, r2, #23
 8000a32:	d507      	bpl.n	8000a44 <FLASH_SetErrorCode+0x6c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8000a34:	490a      	ldr	r1, [pc, #40]	@ (8000a60 <FLASH_SetErrorCode+0x88>)
 8000a36:	69ca      	ldr	r2, [r1, #28]
 8000a38:	f042 0201 	orr.w	r2, r2, #1
 8000a3c:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8000a3e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a42:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8000a44:	68da      	ldr	r2, [r3, #12]
 8000a46:	0792      	lsls	r2, r2, #30
 8000a48:	d506      	bpl.n	8000a58 <FLASH_SetErrorCode+0x80>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8000a4a:	4905      	ldr	r1, [pc, #20]	@ (8000a60 <FLASH_SetErrorCode+0x88>)
 8000a4c:	69ca      	ldr	r2, [r1, #28]
 8000a4e:	f042 0220 	orr.w	r2, r2, #32
 8000a52:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8000a54:	2202      	movs	r2, #2
 8000a56:	60da      	str	r2, [r3, #12]
  }
}
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	40023c00 	.word	0x40023c00
 8000a60:	20000124 	.word	0x20000124

08000a64 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000a64:	4b06      	ldr	r3, [pc, #24]	@ (8000a80 <HAL_FLASH_Unlock+0x1c>)
 8000a66:	691a      	ldr	r2, [r3, #16]
 8000a68:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000a6a:	bfbf      	itttt	lt
 8000a6c:	4a05      	ldrlt	r2, [pc, #20]	@ (8000a84 <HAL_FLASH_Unlock+0x20>)
 8000a6e:	605a      	strlt	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000a70:	f102 3288 	addlt.w	r2, r2, #2290649224	@ 0x88888888
 8000a74:	605a      	strlt	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000a76:	bfba      	itte	lt
 8000a78:	6918      	ldrlt	r0, [r3, #16]
 8000a7a:	0fc0      	lsrlt	r0, r0, #31
  HAL_StatusTypeDef status = HAL_OK;
 8000a7c:	2000      	movge	r0, #0
}
 8000a7e:	4770      	bx	lr
 8000a80:	40023c00 	.word	0x40023c00
 8000a84:	45670123 	.word	0x45670123

08000a88 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 8000a88:	4a03      	ldr	r2, [pc, #12]	@ (8000a98 <HAL_FLASH_Lock+0x10>)
 8000a8a:	6913      	ldr	r3, [r2, #16]
 8000a8c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a90:	6113      	str	r3, [r2, #16]
}
 8000a92:	2000      	movs	r0, #0
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	40023c00 	.word	0x40023c00

08000a9c <FLASH_WaitForLastOperation>:
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000a9c:	4b11      	ldr	r3, [pc, #68]	@ (8000ae4 <FLASH_WaitForLastOperation+0x48>)
{ 
 8000a9e:	b570      	push	{r4, r5, r6, lr}
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000aa0:	2200      	movs	r2, #0
{ 
 8000aa2:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000aa4:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 8000aa6:	f7ff fedd 	bl	8000864 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000aaa:	4d0f      	ldr	r5, [pc, #60]	@ (8000ae8 <FLASH_WaitForLastOperation+0x4c>)
  tickstart = HAL_GetTick();
 8000aac:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000aae:	68eb      	ldr	r3, [r5, #12]
 8000ab0:	03da      	lsls	r2, r3, #15
 8000ab2:	d40c      	bmi.n	8000ace <FLASH_WaitForLastOperation+0x32>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8000ab4:	68eb      	ldr	r3, [r5, #12]
 8000ab6:	07db      	lsls	r3, r3, #31
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000ab8:	bf44      	itt	mi
 8000aba:	2301      	movmi	r3, #1
 8000abc:	60eb      	strmi	r3, [r5, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8000abe:	68e8      	ldr	r0, [r5, #12]
 8000ac0:	f410 70f9 	ands.w	r0, r0, #498	@ 0x1f2
 8000ac4:	d007      	beq.n	8000ad6 <FLASH_WaitForLastOperation+0x3a>
    FLASH_SetErrorCode();
 8000ac6:	f7ff ff87 	bl	80009d8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000aca:	2001      	movs	r0, #1
 8000acc:	e003      	b.n	8000ad6 <FLASH_WaitForLastOperation+0x3a>
    if(Timeout != HAL_MAX_DELAY)
 8000ace:	1c61      	adds	r1, r4, #1
 8000ad0:	d0ed      	beq.n	8000aae <FLASH_WaitForLastOperation+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000ad2:	b90c      	cbnz	r4, 8000ad8 <FLASH_WaitForLastOperation+0x3c>
        return HAL_TIMEOUT;
 8000ad4:	2003      	movs	r0, #3
}  
 8000ad6:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000ad8:	f7ff fec4 	bl	8000864 <HAL_GetTick>
 8000adc:	1b80      	subs	r0, r0, r6
 8000ade:	42a0      	cmp	r0, r4
 8000ae0:	d9e5      	bls.n	8000aae <FLASH_WaitForLastOperation+0x12>
 8000ae2:	e7f7      	b.n	8000ad4 <FLASH_WaitForLastOperation+0x38>
 8000ae4:	20000124 	.word	0x20000124
 8000ae8:	40023c00 	.word	0x40023c00

08000aec <HAL_FLASH_Program>:
{
 8000aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8000af0:	4e1f      	ldr	r6, [pc, #124]	@ (8000b70 <HAL_FLASH_Program+0x84>)
{
 8000af2:	4698      	mov	r8, r3
  __HAL_LOCK(&pFlash);
 8000af4:	7e33      	ldrb	r3, [r6, #24]
 8000af6:	2b01      	cmp	r3, #1
{
 8000af8:	4607      	mov	r7, r0
 8000afa:	460d      	mov	r5, r1
 8000afc:	4614      	mov	r4, r2
  __HAL_LOCK(&pFlash);
 8000afe:	d035      	beq.n	8000b6c <HAL_FLASH_Program+0x80>
 8000b00:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000b02:	f24c 3050 	movw	r0, #50000	@ 0xc350
  __HAL_LOCK(&pFlash);
 8000b06:	7633      	strb	r3, [r6, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000b08:	f7ff ffc8 	bl	8000a9c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000b0c:	b9b0      	cbnz	r0, 8000b3c <HAL_FLASH_Program+0x50>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8000b0e:	b9cf      	cbnz	r7, 8000b44 <HAL_FLASH_Program+0x58>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000b10:	4b18      	ldr	r3, [pc, #96]	@ (8000b74 <HAL_FLASH_Program+0x88>)
 8000b12:	691a      	ldr	r2, [r3, #16]
 8000b14:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8000b18:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8000b1a:	691a      	ldr	r2, [r3, #16]
 8000b1c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000b1e:	691a      	ldr	r2, [r3, #16]
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8000b20:	b2e4      	uxtb	r4, r4
  FLASH->CR |= FLASH_CR_PG;
 8000b22:	f042 0201 	orr.w	r2, r2, #1
 8000b26:	611a      	str	r2, [r3, #16]
  *(__IO uint8_t*)Address = Data;
 8000b28:	702c      	strb	r4, [r5, #0]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000b2a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000b2e:	f7ff ffb5 	bl	8000a9c <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);  
 8000b32:	4a10      	ldr	r2, [pc, #64]	@ (8000b74 <HAL_FLASH_Program+0x88>)
 8000b34:	6913      	ldr	r3, [r2, #16]
 8000b36:	f023 0301 	bic.w	r3, r3, #1
 8000b3a:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	7633      	strb	r3, [r6, #24]
}
 8000b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000b44:	2f01      	cmp	r7, #1
 8000b46:	d104      	bne.n	8000b52 <HAL_FLASH_Program+0x66>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8000b48:	b2a1      	uxth	r1, r4
 8000b4a:	4628      	mov	r0, r5
 8000b4c:	f7ff ff32 	bl	80009b4 <FLASH_Program_HalfWord>
 8000b50:	e7eb      	b.n	8000b2a <HAL_FLASH_Program+0x3e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000b52:	2f02      	cmp	r7, #2
 8000b54:	d104      	bne.n	8000b60 <HAL_FLASH_Program+0x74>
      FLASH_Program_Word(Address, (uint32_t) Data);
 8000b56:	4621      	mov	r1, r4
 8000b58:	4628      	mov	r0, r5
 8000b5a:	f7ff ff19 	bl	8000990 <FLASH_Program_Word>
 8000b5e:	e7e4      	b.n	8000b2a <HAL_FLASH_Program+0x3e>
      FLASH_Program_DoubleWord(Address, Data);
 8000b60:	4622      	mov	r2, r4
 8000b62:	4643      	mov	r3, r8
 8000b64:	4628      	mov	r0, r5
 8000b66:	f7ff fefd 	bl	8000964 <FLASH_Program_DoubleWord>
 8000b6a:	e7de      	b.n	8000b2a <HAL_FLASH_Program+0x3e>
  __HAL_LOCK(&pFlash);
 8000b6c:	2002      	movs	r0, #2
 8000b6e:	e7e7      	b.n	8000b40 <HAL_FLASH_Program+0x54>
 8000b70:	20000124 	.word	0x20000124
 8000b74:	40023c00 	.word	0x40023c00

08000b78 <FLASH_MassErase.constprop.0>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000b78:	4b07      	ldr	r3, [pc, #28]	@ (8000b98 <FLASH_MassErase.constprop.0+0x20>)
 8000b7a:	691a      	ldr	r2, [r3, #16]
 8000b7c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8000b80:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 8000b82:	691a      	ldr	r2, [r3, #16]
 8000b84:	f042 0204 	orr.w	r2, r2, #4
 8000b88:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8000b8a:	691a      	ldr	r2, [r3, #16]
 8000b8c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8000b90:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000b94:	611a      	str	r2, [r3, #16]
}
 8000b96:	4770      	bx	lr
 8000b98:	40023c00 	.word	0x40023c00

08000b9c <FLASH_Erase_Sector>:
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000b9c:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd4 <FLASH_Erase_Sector+0x38>)
 8000b9e:	691a      	ldr	r2, [r3, #16]
 8000ba0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8000ba4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 8000ba6:	691a      	ldr	r2, [r3, #16]
 8000ba8:	2902      	cmp	r1, #2
 8000baa:	bf94      	ite	ls
 8000bac:	0209      	lslls	r1, r1, #8
{
 8000bae:	f44f 7140 	movhi.w	r1, #768	@ 0x300
  FLASH->CR |= tmp_psize;
 8000bb2:	430a      	orrs	r2, r1
 8000bb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8000bb6:	691a      	ldr	r2, [r3, #16]
 8000bb8:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 8000bbc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8000bbe:	691a      	ldr	r2, [r3, #16]
 8000bc0:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8000bc4:	f040 0002 	orr.w	r0, r0, #2
 8000bc8:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8000bca:	691a      	ldr	r2, [r3, #16]
 8000bcc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000bd0:	611a      	str	r2, [r3, #16]
}
 8000bd2:	4770      	bx	lr
 8000bd4:	40023c00 	.word	0x40023c00

08000bd8 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8000bd8:	4b14      	ldr	r3, [pc, #80]	@ (8000c2c <FLASH_FlushCaches+0x54>)
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	0591      	lsls	r1, r2, #22
 8000bde:	d50f      	bpl.n	8000c00 <FLASH_FlushCaches+0x28>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000be6:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000bf6:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000bfe:	601a      	str	r2, [r3, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8000c00:	4b0a      	ldr	r3, [pc, #40]	@ (8000c2c <FLASH_FlushCaches+0x54>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	0552      	lsls	r2, r2, #21
 8000c06:	d50f      	bpl.n	8000c28 <FLASH_FlushCaches+0x50>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000c0e:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000c1e:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000c26:	601a      	str	r2, [r3, #0]
  }
}
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	40023c00 	.word	0x40023c00

08000c30 <HAL_FLASHEx_Erase>:
{
 8000c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8000c34:	f8df 8094 	ldr.w	r8, [pc, #148]	@ 8000ccc <HAL_FLASHEx_Erase+0x9c>
 8000c38:	f898 3018 	ldrb.w	r3, [r8, #24]
 8000c3c:	2b01      	cmp	r3, #1
{
 8000c3e:	4605      	mov	r5, r0
 8000c40:	460f      	mov	r7, r1
  __HAL_LOCK(&pFlash);
 8000c42:	d03f      	beq.n	8000cc4 <HAL_FLASHEx_Erase+0x94>
 8000c44:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000c46:	f24c 3050 	movw	r0, #50000	@ 0xc350
  __HAL_LOCK(&pFlash);
 8000c4a:	f888 3018 	strb.w	r3, [r8, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000c4e:	f7ff ff25 	bl	8000a9c <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8000c52:	4604      	mov	r4, r0
 8000c54:	b9a0      	cbnz	r0, 8000c80 <HAL_FLASHEx_Erase+0x50>
    *SectorError = 0xFFFFFFFFU;
 8000c56:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5a:	603b      	str	r3, [r7, #0]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000c5c:	682b      	ldr	r3, [r5, #0]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d114      	bne.n	8000c8c <HAL_FLASHEx_Erase+0x5c>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8000c62:	7c28      	ldrb	r0, [r5, #16]
 8000c64:	f7ff ff88 	bl	8000b78 <FLASH_MassErase.constprop.0>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000c68:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000c6c:	f7ff ff16 	bl	8000a9c <FLASH_WaitForLastOperation>
      FLASH->CR &= (~FLASH_MER_BIT);
 8000c70:	4a15      	ldr	r2, [pc, #84]	@ (8000cc8 <HAL_FLASHEx_Erase+0x98>)
 8000c72:	6913      	ldr	r3, [r2, #16]
 8000c74:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000c78:	4604      	mov	r4, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 8000c7a:	6113      	str	r3, [r2, #16]
    FLASH_FlushCaches();
 8000c7c:	f7ff ffac 	bl	8000bd8 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8000c80:	2300      	movs	r3, #0
 8000c82:	f888 3018 	strb.w	r3, [r8, #24]
}
 8000c86:	4620      	mov	r0, r4
 8000c88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000c8c:	68ae      	ldr	r6, [r5, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8000c8e:	f8df 9038 	ldr.w	r9, [pc, #56]	@ 8000cc8 <HAL_FLASHEx_Erase+0x98>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000c92:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8000c96:	4413      	add	r3, r2
 8000c98:	42b3      	cmp	r3, r6
 8000c9a:	d9ef      	bls.n	8000c7c <HAL_FLASHEx_Erase+0x4c>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8000c9c:	7c29      	ldrb	r1, [r5, #16]
 8000c9e:	4630      	mov	r0, r6
 8000ca0:	f7ff ff7c 	bl	8000b9c <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000ca4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000ca8:	f7ff fef8 	bl	8000a9c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8000cac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8000cb0:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8000cb4:	f8c9 3010 	str.w	r3, [r9, #16]
        if (status != HAL_OK)
 8000cb8:	b110      	cbz	r0, 8000cc0 <HAL_FLASHEx_Erase+0x90>
          *SectorError = index;
 8000cba:	603e      	str	r6, [r7, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000cbc:	4604      	mov	r4, r0
          break;
 8000cbe:	e7dd      	b.n	8000c7c <HAL_FLASHEx_Erase+0x4c>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000cc0:	3601      	adds	r6, #1
 8000cc2:	e7e6      	b.n	8000c92 <HAL_FLASHEx_Erase+0x62>
  __HAL_LOCK(&pFlash);
 8000cc4:	2402      	movs	r4, #2
 8000cc6:	e7de      	b.n	8000c86 <HAL_FLASHEx_Erase+0x56>
 8000cc8:	40023c00 	.word	0x40023c00
 8000ccc:	20000124 	.word	0x20000124

08000cd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd4:	f8df 9180 	ldr.w	r9, [pc, #384]	@ 8000e58 <HAL_GPIO_Init+0x188>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cd8:	4a5d      	ldr	r2, [pc, #372]	@ (8000e50 <HAL_GPIO_Init+0x180>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cda:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cdc:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8000cde:	2401      	movs	r4, #1
 8000ce0:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ce2:	ea04 0605 	and.w	r6, r4, r5
    if(iocurrent == ioposition)
 8000ce6:	43ac      	bics	r4, r5
 8000ce8:	f040 80a3 	bne.w	8000e32 <HAL_GPIO_Init+0x162>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cec:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cee:	2703      	movs	r7, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cf0:	f005 0403 	and.w	r4, r5, #3
 8000cf4:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cf8:	fa07 fc08 	lsl.w	ip, r7, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cfc:	1e67      	subs	r7, r4, #1
 8000cfe:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d00:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d04:	d834      	bhi.n	8000d70 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8000d06:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d08:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d0c:	68cf      	ldr	r7, [r1, #12]
 8000d0e:	fa07 f708 	lsl.w	r7, r7, r8
 8000d12:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8000d16:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000d18:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d1a:	ea27 0e06 	bic.w	lr, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d1e:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8000d22:	409f      	lsls	r7, r3
 8000d24:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000d28:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8000d2a:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d2c:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d30:	688f      	ldr	r7, [r1, #8]
 8000d32:	fa07 f708 	lsl.w	r7, r7, r8
 8000d36:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d3a:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8000d3c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d3e:	d119      	bne.n	8000d74 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8000d40:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000d44:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d48:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000d4c:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d50:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000d54:	f04f 0e0f 	mov.w	lr, #15
 8000d58:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000d5c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d60:	690f      	ldr	r7, [r1, #16]
 8000d62:	fa07 f70b 	lsl.w	r7, r7, fp
 8000d66:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000d6a:	f8ca 7020 	str.w	r7, [sl, #32]
 8000d6e:	e001      	b.n	8000d74 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d70:	2c03      	cmp	r4, #3
 8000d72:	d1da      	bne.n	8000d2a <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8000d74:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d76:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d7a:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d7e:	433c      	orrs	r4, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d80:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8000d84:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d86:	d054      	beq.n	8000e32 <HAL_GPIO_Init+0x162>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d88:	2400      	movs	r4, #0
 8000d8a:	9401      	str	r4, [sp, #4]
 8000d8c:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 8000d90:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8000d94:	f8c9 4044 	str.w	r4, [r9, #68]	@ 0x44
 8000d98:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 8000d9c:	f023 0703 	bic.w	r7, r3, #3
 8000da0:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8000da4:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 8000da8:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 8000dac:	9401      	str	r4, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dae:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db2:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000db4:	f8d7 e008 	ldr.w	lr, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000db8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000dbc:	240f      	movs	r4, #15
 8000dbe:	fa04 f40c 	lsl.w	r4, r4, ip
 8000dc2:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dc6:	4c23      	ldr	r4, [pc, #140]	@ (8000e54 <HAL_GPIO_Init+0x184>)
 8000dc8:	42a0      	cmp	r0, r4
 8000dca:	d039      	beq.n	8000e40 <HAL_GPIO_Init+0x170>
 8000dcc:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000dd0:	42a0      	cmp	r0, r4
 8000dd2:	d037      	beq.n	8000e44 <HAL_GPIO_Init+0x174>
 8000dd4:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000dd8:	42a0      	cmp	r0, r4
 8000dda:	d035      	beq.n	8000e48 <HAL_GPIO_Init+0x178>
 8000ddc:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000de0:	42a0      	cmp	r0, r4
 8000de2:	d033      	beq.n	8000e4c <HAL_GPIO_Init+0x17c>
 8000de4:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000de8:	42a0      	cmp	r0, r4
 8000dea:	bf14      	ite	ne
 8000dec:	2407      	movne	r4, #7
 8000dee:	2404      	moveq	r4, #4
 8000df0:	fa04 f40c 	lsl.w	r4, r4, ip
 8000df4:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000df8:	60bc      	str	r4, [r7, #8]
        temp = EXTI->RTSR;
 8000dfa:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000dfc:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000dfe:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000e02:	bf0c      	ite	eq
 8000e04:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8000e06:	4334      	orrne	r4, r6
        }
        EXTI->RTSR = temp;
 8000e08:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8000e0a:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e0c:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        temp &= ~((uint32_t)iocurrent);
 8000e10:	bf0c      	ite	eq
 8000e12:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8000e14:	4334      	orrne	r4, r6
        }
        EXTI->FTSR = temp;
 8000e16:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 8000e18:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e1a:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000e1e:	bf0c      	ite	eq
 8000e20:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8000e22:	4334      	orrne	r4, r6
        }
        EXTI->EMR = temp;
 8000e24:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e26:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e28:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8000e2a:	bf54      	ite	pl
 8000e2c:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8000e2e:	4334      	orrmi	r4, r6
        }
        EXTI->IMR = temp;
 8000e30:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e32:	3301      	adds	r3, #1
 8000e34:	2b10      	cmp	r3, #16
 8000e36:	f47f af51 	bne.w	8000cdc <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8000e3a:	b003      	add	sp, #12
 8000e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e40:	2400      	movs	r4, #0
 8000e42:	e7d5      	b.n	8000df0 <HAL_GPIO_Init+0x120>
 8000e44:	2401      	movs	r4, #1
 8000e46:	e7d3      	b.n	8000df0 <HAL_GPIO_Init+0x120>
 8000e48:	2402      	movs	r4, #2
 8000e4a:	e7d1      	b.n	8000df0 <HAL_GPIO_Init+0x120>
 8000e4c:	2403      	movs	r4, #3
 8000e4e:	e7cf      	b.n	8000df0 <HAL_GPIO_Init+0x120>
 8000e50:	40013c00 	.word	0x40013c00
 8000e54:	40020000 	.word	0x40020000
 8000e58:	40023800 	.word	0x40023800

08000e5c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e5c:	6903      	ldr	r3, [r0, #16]
 8000e5e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000e60:	bf14      	ite	ne
 8000e62:	2001      	movne	r0, #1
 8000e64:	2000      	moveq	r0, #0
 8000e66:	4770      	bx	lr

08000e68 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e68:	b10a      	cbz	r2, 8000e6e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e6a:	6181      	str	r1, [r0, #24]
  }
}
 8000e6c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e6e:	0409      	lsls	r1, r1, #16
 8000e70:	e7fb      	b.n	8000e6a <HAL_GPIO_WritePin+0x2>

08000e72 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e72:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e74:	ea01 0203 	and.w	r2, r1, r3
 8000e78:	ea21 0103 	bic.w	r1, r1, r3
 8000e7c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000e80:	6181      	str	r1, [r0, #24]
}
 8000e82:	4770      	bx	lr

08000e84 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e86:	4604      	mov	r4, r0
 8000e88:	b310      	cbz	r0, 8000ed0 <HAL_PCD_Init+0x4c>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e8a:	f890 3495 	ldrb.w	r3, [r0, #1173]	@ 0x495
  USBx = hpcd->Instance;
 8000e8e:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e90:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8000e94:	b91b      	cbnz	r3, 8000e9e <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e96:	f880 2494 	strb.w	r2, [r0, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e9a:	f002 fdb9 	bl	8003a10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e9e:	2303      	movs	r3, #3

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8000ea0:	f1b5 4fa0 	cmp.w	r5, #1342177280	@ 0x50000000
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ea4:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  {
    hpcd->Init.dma_enable = 0U;
 8000ea8:	bf04      	itt	eq
 8000eaa:	2300      	moveq	r3, #0
 8000eac:	71a3      	strbeq	r3, [r4, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000eae:	6820      	ldr	r0, [r4, #0]
 8000eb0:	f001 f998 	bl	80021e4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000eb4:	7c23      	ldrb	r3, [r4, #16]
 8000eb6:	f88d 3000 	strb.w	r3, [sp]
 8000eba:	1d25      	adds	r5, r4, #4
 8000ebc:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8000ec0:	6820      	ldr	r0, [r4, #0]
 8000ec2:	f001 f8d5 	bl	8002070 <USB_CoreInit>
 8000ec6:	4601      	mov	r1, r0
 8000ec8:	b130      	cbz	r0, 8000ed8 <HAL_PCD_Init+0x54>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8000ed0:	2501      	movs	r5, #1
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8000ed2:	4628      	mov	r0, r5
 8000ed4:	b003      	add	sp, #12
 8000ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000ed8:	6820      	ldr	r0, [r4, #0]
 8000eda:	f001 f989 	bl	80021f0 <USB_SetCurrentMode>
 8000ede:	2800      	cmp	r0, #0
 8000ee0:	d1f3      	bne.n	8000eca <HAL_PCD_Init+0x46>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ee2:	7926      	ldrb	r6, [r4, #4]
 8000ee4:	f104 0314 	add.w	r3, r4, #20
    hpcd->IN_ep[i].is_in = 1U;
 8000ee8:	2701      	movs	r7, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000eea:	4602      	mov	r2, r0
 8000eec:	b2c1      	uxtb	r1, r0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000eee:	428e      	cmp	r6, r1
 8000ef0:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8000ef4:	d81b      	bhi.n	8000f2e <HAL_PCD_Init+0xaa>
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	f504 7315 	add.w	r3, r4, #596	@ 0x254
    hpcd->OUT_ep[i].is_in = 0U;
 8000efc:	460a      	mov	r2, r1
 8000efe:	b2c8      	uxtb	r0, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f00:	4286      	cmp	r6, r0
 8000f02:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8000f06:	d820      	bhi.n	8000f4a <HAL_PCD_Init+0xc6>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f08:	7c23      	ldrb	r3, [r4, #16]
 8000f0a:	f88d 3000 	strb.w	r3, [sp]
 8000f0e:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8000f12:	6820      	ldr	r0, [r4, #0]
 8000f14:	f001 f9e8 	bl	80022e8 <USB_DevInit>
 8000f18:	4605      	mov	r5, r0
 8000f1a:	2800      	cmp	r0, #0
 8000f1c:	d1d5      	bne.n	8000eca <HAL_PCD_Init+0x46>
  hpcd->State = HAL_PCD_STATE_READY;
 8000f1e:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8000f20:	7460      	strb	r0, [r4, #17]
  (void)USB_DevDisconnect(hpcd->Instance);
 8000f22:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 8000f24:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  (void)USB_DevDisconnect(hpcd->Instance);
 8000f28:	f001 fcae 	bl	8002888 <USB_DevDisconnect>
  return HAL_OK;
 8000f2c:	e7d1      	b.n	8000ed2 <HAL_PCD_Init+0x4e>
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000f2e:	f823 0c0a 	strh.w	r0, [r3, #-10]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f32:	e943 2207 	strd	r2, r2, [r3, #-28]
    hpcd->IN_ep[i].is_in = 1U;
 8000f36:	f803 7c23 	strb.w	r7, [r3, #-35]
    hpcd->IN_ep[i].num = i;
 8000f3a:	f803 1c24 	strb.w	r1, [r3, #-36]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f3e:	f803 2c20 	strb.w	r2, [r3, #-32]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f42:	f843 2c14 	str.w	r2, [r3, #-20]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f46:	3001      	adds	r0, #1
 8000f48:	e7d0      	b.n	8000eec <HAL_PCD_Init+0x68>
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f4a:	e943 2207 	strd	r2, r2, [r3, #-28]
    hpcd->OUT_ep[i].is_in = 0U;
 8000f4e:	f803 2c23 	strb.w	r2, [r3, #-35]
    hpcd->OUT_ep[i].num = i;
 8000f52:	f803 0c24 	strb.w	r0, [r3, #-36]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f56:	f803 2c20 	strb.w	r2, [r3, #-32]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f5a:	f843 2c14 	str.w	r2, [r3, #-20]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f5e:	3101      	adds	r1, #1
 8000f60:	e7cd      	b.n	8000efe <HAL_PCD_Init+0x7a>

08000f62 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000f62:	b510      	push	{r4, lr}
 8000f64:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000f66:	6800      	ldr	r0, [r0, #0]

  __HAL_LOCK(hpcd);
 8000f68:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d015      	beq.n	8000f9c <HAL_PCD_Start+0x3a>
 8000f70:	2301      	movs	r3, #1
 8000f72:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8000f76:	68c3      	ldr	r3, [r0, #12]
 8000f78:	065b      	lsls	r3, r3, #25
 8000f7a:	d506      	bpl.n	8000f8a <HAL_PCD_Start+0x28>
 8000f7c:	7b63      	ldrb	r3, [r4, #13]
 8000f7e:	2b01      	cmp	r3, #1
      (hpcd->Init.battery_charging_enable == 1U))
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8000f80:	bf02      	ittt	eq
 8000f82:	6b83      	ldreq	r3, [r0, #56]	@ 0x38
 8000f84:	f443 3380 	orreq.w	r3, r3, #65536	@ 0x10000
 8000f88:	6383      	streq	r3, [r0, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8000f8a:	f001 f925 	bl	80021d8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000f8e:	6820      	ldr	r0, [r4, #0]
 8000f90:	f001 fc6c 	bl	800286c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000f94:	2000      	movs	r0, #0
 8000f96:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494

  return HAL_OK;
}
 8000f9a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000f9c:	2002      	movs	r0, #2
 8000f9e:	e7fc      	b.n	8000f9a <HAL_PCD_Start+0x38>

08000fa0 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8000fa0:	b538      	push	{r3, r4, r5, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  __HAL_LOCK(hpcd);
 8000fa2:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
 8000fa6:	2b01      	cmp	r3, #1
{
 8000fa8:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000faa:	d01b      	beq.n	8000fe4 <HAL_PCD_Stop+0x44>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000fac:	6805      	ldr	r5, [r0, #0]
  __HAL_LOCK(hpcd);
 8000fae:	2301      	movs	r3, #1
 8000fb0:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
  __HAL_PCD_DISABLE(hpcd);
 8000fb4:	4628      	mov	r0, r5
 8000fb6:	f001 f915 	bl	80021e4 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8000fba:	6820      	ldr	r0, [r4, #0]
 8000fbc:	f001 fc64 	bl	8002888 <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8000fc0:	6820      	ldr	r0, [r4, #0]
 8000fc2:	2110      	movs	r1, #16
 8000fc4:	f001 f944 	bl	8002250 <USB_FlushTxFifo>

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8000fc8:	68eb      	ldr	r3, [r5, #12]
 8000fca:	065b      	lsls	r3, r3, #25
 8000fcc:	d506      	bpl.n	8000fdc <HAL_PCD_Stop+0x3c>
 8000fce:	7b63      	ldrb	r3, [r4, #13]
 8000fd0:	2b01      	cmp	r3, #1
      (hpcd->Init.battery_charging_enable == 1U))
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8000fd2:	bf02      	ittt	eq
 8000fd4:	6bab      	ldreq	r3, [r5, #56]	@ 0x38
 8000fd6:	f423 3380 	biceq.w	r3, r3, #65536	@ 0x10000
 8000fda:	63ab      	streq	r3, [r5, #56]	@ 0x38
  }

  __HAL_UNLOCK(hpcd);
 8000fdc:	2000      	movs	r0, #0
 8000fde:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494

  return HAL_OK;
}
 8000fe2:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000fe4:	2002      	movs	r0, #2
 8000fe6:	e7fc      	b.n	8000fe2 <HAL_PCD_Stop+0x42>

08000fe8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000fe8:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000fea:	f890 2494 	ldrb.w	r2, [r0, #1172]	@ 0x494
 8000fee:	2a01      	cmp	r2, #1
{
 8000ff0:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000ff2:	d00a      	beq.n	800100a <HAL_PCD_SetAddress+0x22>
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	f880 2494 	strb.w	r2, [r0, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8000ffa:	7441      	strb	r1, [r0, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000ffc:	6800      	ldr	r0, [r0, #0]
 8000ffe:	f001 fc25 	bl	800284c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001002:	2000      	movs	r0, #0
 8001004:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494

  return HAL_OK;
}
 8001008:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800100a:	2002      	movs	r0, #2
 800100c:	e7fc      	b.n	8001008 <HAL_PCD_SetAddress+0x20>

0800100e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800100e:	b570      	push	{r4, r5, r6, lr}
 8001010:	f001 060f 	and.w	r6, r1, #15
 8001014:	eb06 04c6 	add.w	r4, r6, r6, lsl #3
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001018:	f011 0f80 	tst.w	r1, #128	@ 0x80
{
 800101c:	4605      	mov	r5, r0
 800101e:	ea4f 0484 	mov.w	r4, r4, lsl #2
 8001022:	f04f 0024 	mov.w	r0, #36	@ 0x24
  if ((ep_addr & 0x80U) == 0x80U)
 8001026:	d01e      	beq.n	8001066 <HAL_PCD_EP_Open+0x58>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
 8001028:	fb00 5006 	mla	r0, r0, r6, r5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800102c:	f104 0114 	add.w	r1, r4, #20
    ep->is_in = 1U;
 8001030:	2401      	movs	r4, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001032:	4429      	add	r1, r5
    ep->is_in = 1U;
 8001034:	7544      	strb	r4, [r0, #21]
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
  }

  ep->num = ep_addr & EP_ADDR_MSK;
  ep->maxpacket = ep_mps;
 8001036:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;

  if (ep->is_in != 0U)
 8001038:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800103a:	700e      	strb	r6, [r1, #0]
  ep->type = ep_type;
 800103c:	710b      	strb	r3, [r1, #4]
  if (ep->is_in != 0U)
 800103e:	b102      	cbz	r2, 8001042 <HAL_PCD_EP_Open+0x34>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001040:	834e      	strh	r6, [r1, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001042:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0U;
 8001044:	bf04      	itt	eq
 8001046:	2300      	moveq	r3, #0
 8001048:	714b      	strbeq	r3, [r1, #5]
  }

  __HAL_LOCK(hpcd);
 800104a:	f895 3494 	ldrb.w	r3, [r5, #1172]	@ 0x494
 800104e:	2b01      	cmp	r3, #1
 8001050:	d012      	beq.n	8001078 <HAL_PCD_EP_Open+0x6a>
 8001052:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001054:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 8001056:	f885 3494 	strb.w	r3, [r5, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800105a:	f001 fa0a 	bl	8002472 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800105e:	2000      	movs	r0, #0
 8001060:	f885 0494 	strb.w	r0, [r5, #1172]	@ 0x494

  return ret;
}
 8001064:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8001066:	fb00 5006 	mla	r0, r0, r6, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800106a:	f504 7115 	add.w	r1, r4, #596	@ 0x254
    ep->is_in = 0U;
 800106e:	2400      	movs	r4, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001070:	4429      	add	r1, r5
    ep->is_in = 0U;
 8001072:	f880 4255 	strb.w	r4, [r0, #597]	@ 0x255
 8001076:	e7de      	b.n	8001036 <HAL_PCD_EP_Open+0x28>
  __HAL_LOCK(hpcd);
 8001078:	2002      	movs	r0, #2
 800107a:	e7f3      	b.n	8001064 <HAL_PCD_EP_Open+0x56>

0800107c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800107c:	b570      	push	{r4, r5, r6, lr}
 800107e:	f001 050f 	and.w	r5, r1, #15
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001082:	2424      	movs	r4, #36	@ 0x24
 8001084:	fb04 0105 	mla	r1, r4, r5, r0

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001088:	fb04 0405 	mla	r4, r4, r5, r0
  ep->xfer_len = len;
 800108c:	e9c4 2398 	strd	r2, r3, [r4, #608]	@ 0x260
  ep->xfer_count = 0U;
 8001090:	2300      	movs	r3, #0
 8001092:	f8c4 3268 	str.w	r3, [r4, #616]	@ 0x268
  ep->is_in = 0U;
 8001096:	f884 3255 	strb.w	r3, [r4, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 800109a:	f884 5254 	strb.w	r5, [r4, #596]	@ 0x254
{
 800109e:	4616      	mov	r6, r2

  if (hpcd->Init.dma_enable == 1U)
 80010a0:	7982      	ldrb	r2, [r0, #6]
  {
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80010a2:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 80010a4:	2a01      	cmp	r2, #1
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80010a6:	f501 7115 	add.w	r1, r1, #596	@ 0x254
    ep->dma_addr = (uint32_t)pBuf;
 80010aa:	bf08      	it	eq
 80010ac:	f8c4 6270 	streq.w	r6, [r4, #624]	@ 0x270
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80010b0:	f001 fa74 	bl	800259c <USB_EPStartXfer>

  return HAL_OK;
}
 80010b4:	2000      	movs	r0, #0
 80010b6:	bd70      	pop	{r4, r5, r6, pc}

080010b8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80010b8:	b570      	push	{r4, r5, r6, lr}
 80010ba:	f001 050f 	and.w	r5, r1, #15
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80010be:	2424      	movs	r4, #36	@ 0x24
 80010c0:	fb04 0105 	mla	r1, r4, r5, r0

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80010c4:	fb04 0405 	mla	r4, r4, r5, r0
  ep->xfer_len = len;
 80010c8:	e9c4 2308 	strd	r2, r3, [r4, #32]
  ep->xfer_count = 0U;
 80010cc:	2300      	movs	r3, #0
 80010ce:	62a3      	str	r3, [r4, #40]	@ 0x28
  ep->is_in = 1U;
 80010d0:	2301      	movs	r3, #1
 80010d2:	7563      	strb	r3, [r4, #21]
  ep->num = ep_addr & EP_ADDR_MSK;
 80010d4:	7525      	strb	r5, [r4, #20]
{
 80010d6:	4616      	mov	r6, r2

  if (hpcd->Init.dma_enable == 1U)
 80010d8:	7982      	ldrb	r2, [r0, #6]
  {
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80010da:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 80010dc:	429a      	cmp	r2, r3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80010de:	f101 0114 	add.w	r1, r1, #20
    ep->dma_addr = (uint32_t)pBuf;
 80010e2:	bf08      	it	eq
 80010e4:	6326      	streq	r6, [r4, #48]	@ 0x30
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80010e6:	f001 fa59 	bl	800259c <USB_EPStartXfer>

  return HAL_OK;
}
 80010ea:	2000      	movs	r0, #0
 80010ec:	bd70      	pop	{r4, r5, r6, pc}

080010ee <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80010ee:	b538      	push	{r3, r4, r5, lr}
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80010f0:	7903      	ldrb	r3, [r0, #4]
 80010f2:	f001 050f 	and.w	r5, r1, #15
 80010f6:	42ab      	cmp	r3, r5
{
 80010f8:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80010fa:	d32b      	bcc.n	8001154 <HAL_PCD_EP_SetStall+0x66>
  {
    return HAL_ERROR;
  }

  if ((0x80U & ep_addr) == 0x80U)
 80010fc:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8001100:	f04f 0024 	mov.w	r0, #36	@ 0x24
 8001104:	d01d      	beq.n	8001142 <HAL_PCD_EP_SetStall+0x54>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001106:	fb00 4105 	mla	r1, r0, r5, r4
    ep->is_in = 1U;
 800110a:	fb00 4005 	mla	r0, r0, r5, r4
 800110e:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001110:	3114      	adds	r1, #20
    ep->is_in = 1U;
 8001112:	7543      	strb	r3, [r0, #21]
  {
    ep = &hpcd->OUT_ep[ep_addr];
    ep->is_in = 0U;
  }

  ep->is_stall = 1U;
 8001114:	2301      	movs	r3, #1
 8001116:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001118:	700d      	strb	r5, [r1, #0]

  __HAL_LOCK(hpcd);
 800111a:	f894 2494 	ldrb.w	r2, [r4, #1172]	@ 0x494
 800111e:	429a      	cmp	r2, r3
 8001120:	d01a      	beq.n	8001158 <HAL_PCD_EP_SetStall+0x6a>

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001122:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001124:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001128:	f001 fb3c 	bl	80027a4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800112c:	b92d      	cbnz	r5, 800113a <HAL_PCD_EP_SetStall+0x4c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800112e:	79a1      	ldrb	r1, [r4, #6]
 8001130:	6820      	ldr	r0, [r4, #0]
 8001132:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8001136:	f001 fbf7 	bl	8002928 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800113a:	2000      	movs	r0, #0
 800113c:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494

  return HAL_OK;
}
 8001140:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8001142:	fb00 4301 	mla	r3, r0, r1, r4
    ep->is_in = 0U;
 8001146:	461a      	mov	r2, r3
    ep = &hpcd->OUT_ep[ep_addr];
 8001148:	f503 7115 	add.w	r1, r3, #596	@ 0x254
    ep->is_in = 0U;
 800114c:	2300      	movs	r3, #0
 800114e:	f882 3255 	strb.w	r3, [r2, #597]	@ 0x255
 8001152:	e7df      	b.n	8001114 <HAL_PCD_EP_SetStall+0x26>
    return HAL_ERROR;
 8001154:	2001      	movs	r0, #1
 8001156:	e7f3      	b.n	8001140 <HAL_PCD_EP_SetStall+0x52>
  __HAL_LOCK(hpcd);
 8001158:	2002      	movs	r0, #2
 800115a:	e7f1      	b.n	8001140 <HAL_PCD_EP_SetStall+0x52>

0800115c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800115c:	b538      	push	{r3, r4, r5, lr}
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800115e:	7903      	ldrb	r3, [r0, #4]
 8001160:	f001 020f 	and.w	r2, r1, #15
 8001164:	4293      	cmp	r3, r2
{
 8001166:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001168:	d329      	bcc.n	80011be <HAL_PCD_EP_ClrStall+0x62>
  {
    return HAL_ERROR;
  }

  if ((0x80U & ep_addr) == 0x80U)
 800116a:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 800116e:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8001172:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001176:	f04f 0024 	mov.w	r0, #36	@ 0x24
 800117a:	d017      	beq.n	80011ac <HAL_PCD_EP_ClrStall+0x50>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
 800117c:	fb00 4002 	mla	r0, r0, r2, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001180:	f103 0114 	add.w	r1, r3, #20
    ep->is_in = 1U;
 8001184:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001186:	4421      	add	r1, r4
    ep->is_in = 1U;
 8001188:	7543      	strb	r3, [r0, #21]
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
  }

  ep->is_stall = 0U;
 800118a:	2500      	movs	r5, #0
 800118c:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800118e:	700a      	strb	r2, [r1, #0]

  __HAL_LOCK(hpcd);
 8001190:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8001194:	2b01      	cmp	r3, #1
 8001196:	d014      	beq.n	80011c2 <HAL_PCD_EP_ClrStall+0x66>
 8001198:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800119a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800119c:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80011a0:	f001 fb2b 	bl	80027fa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80011a4:	f884 5494 	strb.w	r5, [r4, #1172]	@ 0x494

  return HAL_OK;
 80011a8:	4628      	mov	r0, r5
}
 80011aa:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 80011ac:	fb00 4002 	mla	r0, r0, r2, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011b0:	f503 7115 	add.w	r1, r3, #596	@ 0x254
    ep->is_in = 0U;
 80011b4:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011b6:	4421      	add	r1, r4
    ep->is_in = 0U;
 80011b8:	f880 3255 	strb.w	r3, [r0, #597]	@ 0x255
 80011bc:	e7e5      	b.n	800118a <HAL_PCD_EP_ClrStall+0x2e>
    return HAL_ERROR;
 80011be:	2001      	movs	r0, #1
 80011c0:	e7f3      	b.n	80011aa <HAL_PCD_EP_ClrStall+0x4e>
  __HAL_LOCK(hpcd);
 80011c2:	2002      	movs	r0, #2
 80011c4:	e7f1      	b.n	80011aa <HAL_PCD_EP_ClrStall+0x4e>

080011c6 <HAL_PCD_EP_Abort>:
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80011c6:	f001 030f 	and.w	r3, r1, #15
 80011ca:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80011ce:	060a      	lsls	r2, r1, #24
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80011d0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80011d4:	bf4c      	ite	mi
 80011d6:	f103 0114 	addmi.w	r1, r3, #20
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011da:	f503 7115 	addpl.w	r1, r3, #596	@ 0x254
 80011de:	4401      	add	r1, r0
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80011e0:	6800      	ldr	r0, [r0, #0]
 80011e2:	f001 b985 	b.w	80024f0 <USB_EPStopXfer>
	...

080011e8 <HAL_PCD_IRQHandler>:
{
 80011e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011ec:	6806      	ldr	r6, [r0, #0]
{
 80011ee:	b089      	sub	sp, #36	@ 0x24
 80011f0:	4604      	mov	r4, r0
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80011f2:	4630      	mov	r0, r6
 80011f4:	f001 fb84 	bl	8002900 <USB_GetMode>
 80011f8:	9003      	str	r0, [sp, #12]
 80011fa:	2800      	cmp	r0, #0
 80011fc:	f040 8157 	bne.w	80014ae <HAL_PCD_IRQHandler+0x2c6>
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001200:	6820      	ldr	r0, [r4, #0]
 8001202:	f001 fb4f 	bl	80028a4 <USB_ReadInterrupts>
 8001206:	2800      	cmp	r0, #0
 8001208:	f000 8151 	beq.w	80014ae <HAL_PCD_IRQHandler+0x2c6>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800120c:	f8d6 3808 	ldr.w	r3, [r6, #2056]	@ 0x808
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001210:	6820      	ldr	r0, [r4, #0]
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001212:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8001216:	f8c4 34d4 	str.w	r3, [r4, #1236]	@ 0x4d4
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800121a:	f001 fb43 	bl	80028a4 <USB_ReadInterrupts>
 800121e:	0787      	lsls	r7, r0, #30
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001220:	bf48      	it	mi
 8001222:	6822      	ldrmi	r2, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001224:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001226:	bf42      	ittt	mi
 8001228:	6953      	ldrmi	r3, [r2, #20]
 800122a:	f003 0302 	andmi.w	r3, r3, #2
 800122e:	6153      	strmi	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001230:	f001 fb38 	bl	80028a4 <USB_ReadInterrupts>
 8001234:	06c0      	lsls	r0, r0, #27
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001236:	f506 6500 	add.w	r5, r6, #2048	@ 0x800
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800123a:	d52c      	bpl.n	8001296 <HAL_PCD_IRQHandler+0xae>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800123c:	6822      	ldr	r2, [r4, #0]
 800123e:	6993      	ldr	r3, [r2, #24]
 8001240:	f023 0310 	bic.w	r3, r3, #16
 8001244:	6193      	str	r3, [r2, #24]
      RegVal = USBx->GRXSTSP;
 8001246:	f8d6 8020 	ldr.w	r8, [r6, #32]
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800124a:	f3c8 4343 	ubfx	r3, r8, #17, #4
 800124e:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001250:	f008 070f 	and.w	r7, r8, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001254:	f040 812e 	bne.w	80014b4 <HAL_PCD_IRQHandler+0x2cc>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001258:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800125c:	ea18 0f03 	tst.w	r8, r3
 8001260:	d014      	beq.n	800128c <HAL_PCD_IRQHandler+0xa4>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001262:	2324      	movs	r3, #36	@ 0x24
 8001264:	fb03 4707 	mla	r7, r3, r7, r4
 8001268:	f3c8 190a 	ubfx	r9, r8, #4, #11
 800126c:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 8001270:	464a      	mov	r2, r9
 8001272:	4630      	mov	r0, r6
 8001274:	f001 fa76 	bl	8002764 <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001278:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 800127c:	444b      	add	r3, r9
 800127e:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001282:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 8001286:	444b      	add	r3, r9
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001288:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800128c:	6822      	ldr	r2, [r4, #0]
 800128e:	6993      	ldr	r3, [r2, #24]
 8001290:	f043 0310 	orr.w	r3, r3, #16
 8001294:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001296:	6820      	ldr	r0, [r4, #0]
 8001298:	f001 fb04 	bl	80028a4 <USB_ReadInterrupts>
 800129c:	0301      	lsls	r1, r0, #12
 800129e:	f100 811b 	bmi.w	80014d8 <HAL_PCD_IRQHandler+0x2f0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80012a2:	6820      	ldr	r0, [r4, #0]
 80012a4:	f001 fafe 	bl	80028a4 <USB_ReadInterrupts>
 80012a8:	0342      	lsls	r2, r0, #13
 80012aa:	d50d      	bpl.n	80012c8 <HAL_PCD_IRQHandler+0xe0>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80012ac:	6820      	ldr	r0, [r4, #0]
 80012ae:	f001 fb05 	bl	80028bc <USB_ReadDevAllInEpInterrupt>
 80012b2:	4627      	mov	r7, r4
 80012b4:	9004      	str	r0, [sp, #16]
      while (ep_intr != 0U)
 80012b6:	f506 6b10 	add.w	fp, r6, #2304	@ 0x900
      epnum = 0U;
 80012ba:	f04f 0a00 	mov.w	sl, #0
      while (ep_intr != 0U)
 80012be:	9b04      	ldr	r3, [sp, #16]
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80012c0:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f040 81d5 	bne.w	8001672 <HAL_PCD_IRQHandler+0x48a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80012c8:	6820      	ldr	r0, [r4, #0]
 80012ca:	f001 faeb 	bl	80028a4 <USB_ReadInterrupts>
 80012ce:	2800      	cmp	r0, #0
 80012d0:	da13      	bge.n	80012fa <HAL_PCD_IRQHandler+0x112>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80012d2:	686b      	ldr	r3, [r5, #4]
 80012d4:	f023 0301 	bic.w	r3, r3, #1
 80012d8:	606b      	str	r3, [r5, #4]
      if (hpcd->LPM_State == LPM_L1)
 80012da:	f894 34cc 	ldrb.w	r3, [r4, #1228]	@ 0x4cc
 80012de:	2b01      	cmp	r3, #1
 80012e0:	f040 826d 	bne.w	80017be <HAL_PCD_IRQHandler+0x5d6>
        hpcd->LPM_State = LPM_L0;
 80012e4:	2100      	movs	r1, #0
 80012e6:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80012ea:	4620      	mov	r0, r4
 80012ec:	f000 fae9 	bl	80018c2 <HAL_PCDEx_LPM_Callback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80012f0:	6822      	ldr	r2, [r4, #0]
 80012f2:	6953      	ldr	r3, [r2, #20]
 80012f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80012f8:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80012fa:	6820      	ldr	r0, [r4, #0]
 80012fc:	f001 fad2 	bl	80028a4 <USB_ReadInterrupts>
 8001300:	0501      	lsls	r1, r0, #20
 8001302:	d50a      	bpl.n	800131a <HAL_PCD_IRQHandler+0x132>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001304:	68ab      	ldr	r3, [r5, #8]
 8001306:	07da      	lsls	r2, r3, #31
 8001308:	d502      	bpl.n	8001310 <HAL_PCD_IRQHandler+0x128>
        HAL_PCD_SuspendCallback(hpcd);
 800130a:	4620      	mov	r0, r4
 800130c:	f002 fbf0 	bl	8003af0 <HAL_PCD_SuspendCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001310:	6822      	ldr	r2, [r4, #0]
 8001312:	6953      	ldr	r3, [r2, #20]
 8001314:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001318:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800131a:	6820      	ldr	r0, [r4, #0]
 800131c:	f001 fac2 	bl	80028a4 <USB_ReadInterrupts>
 8001320:	04c3      	lsls	r3, r0, #19
 8001322:	d533      	bpl.n	800138c <HAL_PCD_IRQHandler+0x1a4>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001324:	686b      	ldr	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001326:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001328:	f023 0301 	bic.w	r3, r3, #1
 800132c:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800132e:	2110      	movs	r1, #16
 8001330:	f000 ff8e 	bl	8002250 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001334:	7920      	ldrb	r0, [r4, #4]
 8001336:	f506 6310 	add.w	r3, r6, #2304	@ 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800133a:	f64f 317f 	movw	r1, #64383	@ 0xfb7f
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800133e:	9a03      	ldr	r2, [sp, #12]
 8001340:	4290      	cmp	r0, r2
 8001342:	f200 8240 	bhi.w	80017c6 <HAL_PCD_IRQHandler+0x5de>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001346:	69eb      	ldr	r3, [r5, #28]
 8001348:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800134c:	61eb      	str	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800134e:	7be3      	ldrb	r3, [r4, #15]
 8001350:	2b00      	cmp	r3, #0
 8001352:	f000 8255 	beq.w	8001800 <HAL_PCD_IRQHandler+0x618>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001356:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
 800135a:	f043 030b 	orr.w	r3, r3, #11
 800135e:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001362:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8001364:	f043 030b 	orr.w	r3, r3, #11
 8001368:	646b      	str	r3, [r5, #68]	@ 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800136a:	f8d6 3800 	ldr.w	r3, [r6, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800136e:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001370:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001374:	f8c6 3800 	str.w	r3, [r6, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001378:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 800137c:	79a1      	ldrb	r1, [r4, #6]
 800137e:	f001 fad3 	bl	8002928 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001382:	6822      	ldr	r2, [r4, #0]
 8001384:	6953      	ldr	r3, [r2, #20]
 8001386:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800138a:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800138c:	6820      	ldr	r0, [r4, #0]
 800138e:	f001 fa89 	bl	80028a4 <USB_ReadInterrupts>
 8001392:	0487      	lsls	r7, r0, #18
 8001394:	d516      	bpl.n	80013c4 <HAL_PCD_IRQHandler+0x1dc>
      (void)USB_ActivateSetup(hpcd->Instance);
 8001396:	6820      	ldr	r0, [r4, #0]
 8001398:	f001 fab6 	bl	8002908 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800139c:	6820      	ldr	r0, [r4, #0]
 800139e:	f001 f85d 	bl	800245c <USB_GetDevSpeed>
 80013a2:	71e0      	strb	r0, [r4, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80013a4:	6827      	ldr	r7, [r4, #0]
 80013a6:	f000 fd03 	bl	8001db0 <HAL_RCC_GetHCLKFreq>
 80013aa:	79e2      	ldrb	r2, [r4, #7]
 80013ac:	4601      	mov	r1, r0
 80013ae:	4638      	mov	r0, r7
 80013b0:	f000 fea2 	bl	80020f8 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 80013b4:	4620      	mov	r0, r4
 80013b6:	f002 fb88 	bl	8003aca <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80013ba:	6822      	ldr	r2, [r4, #0]
 80013bc:	6953      	ldr	r3, [r2, #20]
 80013be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013c2:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80013c4:	6820      	ldr	r0, [r4, #0]
 80013c6:	f001 fa6d 	bl	80028a4 <USB_ReadInterrupts>
 80013ca:	0700      	lsls	r0, r0, #28
 80013cc:	d507      	bpl.n	80013de <HAL_PCD_IRQHandler+0x1f6>
      HAL_PCD_SOFCallback(hpcd);
 80013ce:	4620      	mov	r0, r4
 80013d0:	f002 fb77 	bl	8003ac2 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80013d4:	6822      	ldr	r2, [r4, #0]
 80013d6:	6953      	ldr	r3, [r2, #20]
 80013d8:	f003 0308 	and.w	r3, r3, #8
 80013dc:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80013de:	6820      	ldr	r0, [r4, #0]
 80013e0:	f001 fa60 	bl	80028a4 <USB_ReadInterrupts>
 80013e4:	0601      	lsls	r1, r0, #24
 80013e6:	f100 8216 	bmi.w	8001816 <HAL_PCD_IRQHandler+0x62e>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80013ea:	6820      	ldr	r0, [r4, #0]
 80013ec:	f001 fa5a 	bl	80028a4 <USB_ReadInterrupts>
 80013f0:	02c2      	lsls	r2, r0, #11
 80013f2:	d50c      	bpl.n	800140e <HAL_PCD_IRQHandler+0x226>
 80013f4:	46a0      	mov	r8, r4
 80013f6:	f506 6912 	add.w	r9, r6, #2336	@ 0x920
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80013fa:	2701      	movs	r7, #1
 80013fc:	7923      	ldrb	r3, [r4, #4]
 80013fe:	42bb      	cmp	r3, r7
 8001400:	f200 8222 	bhi.w	8001848 <HAL_PCD_IRQHandler+0x660>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001404:	6822      	ldr	r2, [r4, #0]
 8001406:	6953      	ldr	r3, [r2, #20]
 8001408:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800140c:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800140e:	6820      	ldr	r0, [r4, #0]
 8001410:	f001 fa48 	bl	80028a4 <USB_ReadInterrupts>
 8001414:	0283      	lsls	r3, r0, #10
 8001416:	d52d      	bpl.n	8001474 <HAL_PCD_IRQHandler+0x28c>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001418:	f894 e004 	ldrb.w	lr, [r4, #4]
 800141c:	4623      	mov	r3, r4
 800141e:	f506 6032 	add.w	r0, r6, #2848	@ 0xb20
 8001422:	2101      	movs	r1, #1
 8001424:	458e      	cmp	lr, r1
 8001426:	d920      	bls.n	800146a <HAL_PCD_IRQHandler+0x282>
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001428:	f893 c27c 	ldrb.w	ip, [r3, #636]	@ 0x27c
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800142c:	6802      	ldr	r2, [r0, #0]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800142e:	f1bc 0f01 	cmp.w	ip, #1
 8001432:	f040 821f 	bne.w	8001874 <HAL_PCD_IRQHandler+0x68c>
 8001436:	2a00      	cmp	r2, #0
 8001438:	f280 821c 	bge.w	8001874 <HAL_PCD_IRQHandler+0x68c>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800143c:	f8d4 74d4 	ldr.w	r7, [r4, #1236]	@ 0x4d4
 8001440:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
 8001444:	f007 0701 	and.w	r7, r7, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001448:	42ba      	cmp	r2, r7
 800144a:	f040 8213 	bne.w	8001874 <HAL_PCD_IRQHandler+0x68c>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800144e:	f883 c27b 	strb.w	ip, [r3, #635]	@ 0x27b
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001452:	69b2      	ldr	r2, [r6, #24]
 8001454:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001458:	61b2      	str	r2, [r6, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800145a:	6972      	ldr	r2, [r6, #20]
 800145c:	0617      	lsls	r7, r2, #24
 800145e:	f100 8209 	bmi.w	8001874 <HAL_PCD_IRQHandler+0x68c>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001462:	686b      	ldr	r3, [r5, #4]
 8001464:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001468:	606b      	str	r3, [r5, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800146a:	6822      	ldr	r2, [r4, #0]
 800146c:	6953      	ldr	r3, [r2, #20]
 800146e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001472:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001474:	6820      	ldr	r0, [r4, #0]
 8001476:	f001 fa15 	bl	80028a4 <USB_ReadInterrupts>
 800147a:	0041      	lsls	r1, r0, #1
 800147c:	d507      	bpl.n	800148e <HAL_PCD_IRQHandler+0x2a6>
      HAL_PCD_ConnectCallback(hpcd);
 800147e:	4620      	mov	r0, r4
 8001480:	f002 fb5a 	bl	8003b38 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001484:	6822      	ldr	r2, [r4, #0]
 8001486:	6953      	ldr	r3, [r2, #20]
 8001488:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800148c:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800148e:	6820      	ldr	r0, [r4, #0]
 8001490:	f001 fa08 	bl	80028a4 <USB_ReadInterrupts>
 8001494:	0742      	lsls	r2, r0, #29
 8001496:	d50a      	bpl.n	80014ae <HAL_PCD_IRQHandler+0x2c6>
      RegVal = hpcd->Instance->GOTGINT;
 8001498:	6823      	ldr	r3, [r4, #0]
 800149a:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800149c:	076b      	lsls	r3, r5, #29
 800149e:	d502      	bpl.n	80014a6 <HAL_PCD_IRQHandler+0x2be>
        HAL_PCD_DisconnectCallback(hpcd);
 80014a0:	4620      	mov	r0, r4
 80014a2:	f002 fb4d 	bl	8003b40 <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= RegVal;
 80014a6:	6822      	ldr	r2, [r4, #0]
 80014a8:	6853      	ldr	r3, [r2, #4]
 80014aa:	432b      	orrs	r3, r5
 80014ac:	6053      	str	r3, [r2, #4]
}
 80014ae:	b009      	add	sp, #36	@ 0x24
 80014b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80014b4:	2b06      	cmp	r3, #6
 80014b6:	f47f aee9 	bne.w	800128c <HAL_PCD_IRQHandler+0xa4>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80014ba:	2208      	movs	r2, #8
 80014bc:	f204 419c 	addw	r1, r4, #1180	@ 0x49c
 80014c0:	4630      	mov	r0, r6
 80014c2:	f001 f94f 	bl	8002764 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014c6:	2324      	movs	r3, #36	@ 0x24
 80014c8:	fb03 4707 	mla	r7, r3, r7, r4
 80014cc:	f3c8 180a 	ubfx	r8, r8, #4, #11
 80014d0:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 80014d4:	4443      	add	r3, r8
 80014d6:	e6d7      	b.n	8001288 <HAL_PCD_IRQHandler+0xa0>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80014d8:	6820      	ldr	r0, [r4, #0]
 80014da:	f001 f9e7 	bl	80028ac <USB_ReadDevAllOutEpInterrupt>
 80014de:	f506 6830 	add.w	r8, r6, #2816	@ 0xb00
 80014e2:	9004      	str	r0, [sp, #16]
      while (ep_intr != 0U)
 80014e4:	46a2      	mov	sl, r4
      epnum = 0U;
 80014e6:	2700      	movs	r7, #0
      while (ep_intr != 0U)
 80014e8:	9b04      	ldr	r3, [sp, #16]
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014ea:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f43f aed8 	beq.w	80012a2 <HAL_PCD_IRQHandler+0xba>
        if ((ep_intr & 0x1U) != 0U)
 80014f2:	9b04      	ldr	r3, [sp, #16]
 80014f4:	07db      	lsls	r3, r3, #31
 80014f6:	d578      	bpl.n	80015ea <HAL_PCD_IRQHandler+0x402>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014f8:	fa5f fb87 	uxtb.w	fp, r7
 80014fc:	4659      	mov	r1, fp
 80014fe:	f001 f9e5 	bl	80028cc <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001502:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001506:	4681      	mov	r9, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001508:	d01f      	beq.n	800154a <HAL_PCD_IRQHandler+0x362>
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800150a:	6820      	ldr	r0, [r4, #0]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800150c:	2301      	movs	r3, #1
 800150e:	f8c8 3008 	str.w	r3, [r8, #8]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if (hpcd->Init.dma_enable == 1U)
 8001512:	f894 c006 	ldrb.w	ip, [r4, #6]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8001516:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001518:	f500 6330 	add.w	r3, r0, #2816	@ 0xb00
 800151c:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  if (hpcd->Init.dma_enable == 1U)
 8001520:	f1bc 0f01 	cmp.w	ip, #1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001524:	689a      	ldr	r2, [r3, #8]
  if (hpcd->Init.dma_enable == 1U)
 8001526:	f040 808e 	bne.w	8001646 <HAL_PCD_IRQHandler+0x45e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800152a:	f012 0f08 	tst.w	r2, #8
 800152e:	d007      	beq.n	8001540 <HAL_PCD_IRQHandler+0x358>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001530:	48b1      	ldr	r0, [pc, #708]	@ (80017f8 <HAL_PCD_IRQHandler+0x610>)
 8001532:	4281      	cmp	r1, r0
 8001534:	d909      	bls.n	800154a <HAL_PCD_IRQHandler+0x362>
 8001536:	0412      	lsls	r2, r2, #16
 8001538:	d507      	bpl.n	800154a <HAL_PCD_IRQHandler+0x362>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800153a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800153e:	e003      	b.n	8001548 <HAL_PCD_IRQHandler+0x360>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001540:	f012 0f20 	tst.w	r2, #32
 8001544:	d05a      	beq.n	80015fc <HAL_PCD_IRQHandler+0x414>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001546:	2220      	movs	r2, #32
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001548:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800154a:	f019 0f08 	tst.w	r9, #8
 800154e:	d021      	beq.n	8001594 <HAL_PCD_IRQHandler+0x3ac>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001550:	2308      	movs	r3, #8
 8001552:	f8c8 3008 	str.w	r3, [r8, #8]
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001556:	6823      	ldr	r3, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001558:	49a7      	ldr	r1, [pc, #668]	@ (80017f8 <HAL_PCD_IRQHandler+0x610>)
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800155a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800155c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001560:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001564:	428a      	cmp	r2, r1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001566:	6898      	ldr	r0, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001568:	d904      	bls.n	8001574 <HAL_PCD_IRQHandler+0x38c>
 800156a:	0401      	lsls	r1, r0, #16
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800156c:	bf44      	itt	mi
 800156e:	f44f 4000 	movmi.w	r0, #32768	@ 0x8000
 8001572:	6098      	strmi	r0, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001574:	4620      	mov	r0, r4
 8001576:	9205      	str	r2, [sp, #20]
 8001578:	f002 fa8c 	bl	8003a94 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800157c:	9a05      	ldr	r2, [sp, #20]
 800157e:	499e      	ldr	r1, [pc, #632]	@ (80017f8 <HAL_PCD_IRQHandler+0x610>)
 8001580:	428a      	cmp	r2, r1
 8001582:	d907      	bls.n	8001594 <HAL_PCD_IRQHandler+0x3ac>
 8001584:	79a1      	ldrb	r1, [r4, #6]
 8001586:	2901      	cmp	r1, #1
 8001588:	d104      	bne.n	8001594 <HAL_PCD_IRQHandler+0x3ac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800158a:	6820      	ldr	r0, [r4, #0]
 800158c:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8001590:	f001 f9ca 	bl	8002928 <USB_EP0_OutStart>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001594:	f019 0f10 	tst.w	r9, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001598:	bf1c      	itt	ne
 800159a:	2310      	movne	r3, #16
 800159c:	f8c8 3008 	strne.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80015a0:	f019 0f02 	tst.w	r9, #2
 80015a4:	d014      	beq.n	80015d0 <HAL_PCD_IRQHandler+0x3e8>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80015a6:	6973      	ldr	r3, [r6, #20]
 80015a8:	061a      	lsls	r2, r3, #24
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80015aa:	bf42      	ittt	mi
 80015ac:	686b      	ldrmi	r3, [r5, #4]
 80015ae:	f443 6380 	orrmi.w	r3, r3, #1024	@ 0x400
 80015b2:	606b      	strmi	r3, [r5, #4]
            if (ep->is_iso_incomplete == 1U)
 80015b4:	f89a 3257 	ldrb.w	r3, [sl, #599]	@ 0x257
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d106      	bne.n	80015ca <HAL_PCD_IRQHandler+0x3e2>
              ep->is_iso_incomplete = 0U;
 80015bc:	2300      	movs	r3, #0
 80015be:	f88a 3257 	strb.w	r3, [sl, #599]	@ 0x257
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80015c2:	4659      	mov	r1, fp
 80015c4:	4620      	mov	r0, r4
 80015c6:	f002 faaf 	bl	8003b28 <HAL_PCD_ISOOUTIncompleteCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80015ca:	2302      	movs	r3, #2
 80015cc:	f8c8 3008 	str.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80015d0:	f019 0f20 	tst.w	r9, #32
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80015d4:	bf1c      	itt	ne
 80015d6:	2320      	movne	r3, #32
 80015d8:	f8c8 3008 	strne.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80015dc:	f419 5f00 	tst.w	r9, #8192	@ 0x2000
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80015e0:	bf1c      	itt	ne
 80015e2:	f44f 5300 	movne.w	r3, #8192	@ 0x2000
 80015e6:	f8c8 3008 	strne.w	r3, [r8, #8]
        ep_intr >>= 1U;
 80015ea:	9b04      	ldr	r3, [sp, #16]
 80015ec:	085b      	lsrs	r3, r3, #1
        epnum++;
 80015ee:	3701      	adds	r7, #1
        ep_intr >>= 1U;
 80015f0:	9304      	str	r3, [sp, #16]
 80015f2:	f108 0820 	add.w	r8, r8, #32
 80015f6:	f10a 0a24 	add.w	sl, sl, #36	@ 0x24
 80015fa:	e775      	b.n	80014e8 <HAL_PCD_IRQHandler+0x300>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80015fc:	f012 0f28 	tst.w	r2, #40	@ 0x28
 8001600:	d1a3      	bne.n	800154a <HAL_PCD_IRQHandler+0x362>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001602:	f8df c1f4 	ldr.w	ip, [pc, #500]	@ 80017f8 <HAL_PCD_IRQHandler+0x610>
 8001606:	4561      	cmp	r1, ip
 8001608:	d901      	bls.n	800160e <HAL_PCD_IRQHandler+0x426>
 800160a:	0412      	lsls	r2, r2, #16
 800160c:	d495      	bmi.n	800153a <HAL_PCD_IRQHandler+0x352>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800160e:	691a      	ldr	r2, [r3, #16]
 8001610:	f8da 3274 	ldr.w	r3, [sl, #628]	@ 0x274
 8001614:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8001618:	1a9b      	subs	r3, r3, r2
 800161a:	f8ca 3268 	str.w	r3, [sl, #616]	@ 0x268
        if (epnum == 0U)
 800161e:	b96f      	cbnz	r7, 800163c <HAL_PCD_IRQHandler+0x454>
          if (ep->xfer_len == 0U)
 8001620:	f8d4 2264 	ldr.w	r2, [r4, #612]	@ 0x264
 8001624:	b92a      	cbnz	r2, 8001632 <HAL_PCD_IRQHandler+0x44a>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001626:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 800162a:	2101      	movs	r1, #1
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800162c:	f001 f97c 	bl	8002928 <USB_EP0_OutStart>
 8001630:	e004      	b.n	800163c <HAL_PCD_IRQHandler+0x454>
            ep->xfer_buff += ep->xfer_count;
 8001632:	f8d4 2260 	ldr.w	r2, [r4, #608]	@ 0x260
 8001636:	441a      	add	r2, r3
 8001638:	f8c4 2260 	str.w	r2, [r4, #608]	@ 0x260
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800163c:	4659      	mov	r1, fp
 800163e:	4620      	mov	r0, r4
 8001640:	f002 fa2e 	bl	8003aa0 <HAL_PCD_DataOutStageCallback>
 8001644:	e781      	b.n	800154a <HAL_PCD_IRQHandler+0x362>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001646:	f8df c1b4 	ldr.w	ip, [pc, #436]	@ 80017fc <HAL_PCD_IRQHandler+0x614>
 800164a:	4561      	cmp	r1, ip
 800164c:	d107      	bne.n	800165e <HAL_PCD_IRQHandler+0x476>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800164e:	0411      	lsls	r1, r2, #16
 8001650:	f53f af73 	bmi.w	800153a <HAL_PCD_IRQHandler+0x352>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001654:	0690      	lsls	r0, r2, #26
 8001656:	d5f1      	bpl.n	800163c <HAL_PCD_IRQHandler+0x454>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001658:	2220      	movs	r2, #32
 800165a:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800165c:	e7ee      	b.n	800163c <HAL_PCD_IRQHandler+0x454>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800165e:	2f00      	cmp	r7, #0
 8001660:	d1ec      	bne.n	800163c <HAL_PCD_IRQHandler+0x454>
 8001662:	f8d4 3264 	ldr.w	r3, [r4, #612]	@ 0x264
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1e8      	bne.n	800163c <HAL_PCD_IRQHandler+0x454>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800166a:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 800166e:	4639      	mov	r1, r7
 8001670:	e7dc      	b.n	800162c <HAL_PCD_IRQHandler+0x444>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001672:	9b04      	ldr	r3, [sp, #16]
 8001674:	07db      	lsls	r3, r3, #31
 8001676:	f140 8099 	bpl.w	80017ac <HAL_PCD_IRQHandler+0x5c4>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800167a:	fa5f f38a 	uxtb.w	r3, sl
 800167e:	4619      	mov	r1, r3
 8001680:	9305      	str	r3, [sp, #20]
 8001682:	f001 f92c 	bl	80028de <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001686:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800168a:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800168c:	d01f      	beq.n	80016ce <HAL_PCD_IRQHandler+0x4e6>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800168e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001690:	2101      	movs	r1, #1
 8001692:	f00a 020f 	and.w	r2, sl, #15
 8001696:	fa01 f202 	lsl.w	r2, r1, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800169a:	ea23 0302 	bic.w	r3, r3, r2
 800169e:	636b      	str	r3, [r5, #52]	@ 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80016a0:	f8cb 1008 	str.w	r1, [fp, #8]
            if (hpcd->Init.dma_enable == 1U)
 80016a4:	79a1      	ldrb	r1, [r4, #6]
 80016a6:	2901      	cmp	r1, #1
 80016a8:	d10d      	bne.n	80016c6 <HAL_PCD_IRQHandler+0x4de>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80016aa:	e9d7 2307 	ldrd	r2, r3, [r7, #28]
 80016ae:	4413      	add	r3, r2
 80016b0:	623b      	str	r3, [r7, #32]
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80016b2:	f1ba 0f00 	cmp.w	sl, #0
 80016b6:	d106      	bne.n	80016c6 <HAL_PCD_IRQHandler+0x4de>
 80016b8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80016ba:	b923      	cbnz	r3, 80016c6 <HAL_PCD_IRQHandler+0x4de>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80016bc:	6820      	ldr	r0, [r4, #0]
 80016be:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 80016c2:	f001 f931 	bl	8002928 <USB_EP0_OutStart>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80016c6:	9905      	ldr	r1, [sp, #20]
 80016c8:	4620      	mov	r0, r4
 80016ca:	f002 f9f2 	bl	8003ab2 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80016ce:	f018 0f08 	tst.w	r8, #8
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80016d2:	bf1c      	itt	ne
 80016d4:	2308      	movne	r3, #8
 80016d6:	f8cb 3008 	strne.w	r3, [fp, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80016da:	f018 0f10 	tst.w	r8, #16
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80016de:	bf1c      	itt	ne
 80016e0:	2310      	movne	r3, #16
 80016e2:	f8cb 3008 	strne.w	r3, [fp, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80016e6:	f018 0f40 	tst.w	r8, #64	@ 0x40
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80016ea:	bf1c      	itt	ne
 80016ec:	2340      	movne	r3, #64	@ 0x40
 80016ee:	f8cb 3008 	strne.w	r3, [fp, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80016f2:	f018 0f02 	tst.w	r8, #2
 80016f6:	d00f      	beq.n	8001718 <HAL_PCD_IRQHandler+0x530>
            (void)USB_FlushTxFifo(USBx, epnum);
 80016f8:	4651      	mov	r1, sl
 80016fa:	4630      	mov	r0, r6
 80016fc:	f000 fda8 	bl	8002250 <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
 8001700:	7dfb      	ldrb	r3, [r7, #23]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d105      	bne.n	8001712 <HAL_PCD_IRQHandler+0x52a>
              ep->is_iso_incomplete = 0U;
 8001706:	2300      	movs	r3, #0
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001708:	9905      	ldr	r1, [sp, #20]
              ep->is_iso_incomplete = 0U;
 800170a:	75fb      	strb	r3, [r7, #23]
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800170c:	4620      	mov	r0, r4
 800170e:	f002 fa0f 	bl	8003b30 <HAL_PCD_ISOINIncompleteCallback>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001712:	2302      	movs	r3, #2
 8001714:	f8cb 3008 	str.w	r3, [fp, #8]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001718:	6823      	ldr	r3, [r4, #0]
 800171a:	9306      	str	r3, [sp, #24]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800171c:	f018 0f80 	tst.w	r8, #128	@ 0x80
 8001720:	d044      	beq.n	80017ac <HAL_PCD_IRQHandler+0x5c4>
  if (ep->xfer_count > ep->xfer_len)
 8001722:	e9d7 3209 	ldrd	r3, r2, [r7, #36]	@ 0x24
 8001726:	429a      	cmp	r2, r3
 8001728:	d840      	bhi.n	80017ac <HAL_PCD_IRQHandler+0x5c4>
  len = ep->xfer_len - ep->xfer_count;
 800172a:	eba3 0802 	sub.w	r8, r3, r2
  len32b = (len + 3U) / 4U;
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	4598      	cmp	r8, r3
 8001732:	bf28      	it	cs
 8001734:	4698      	movcs	r8, r3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001736:	9b06      	ldr	r3, [sp, #24]
 8001738:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
  len32b = (len + 3U) / 4U;
 800173c:	f108 0803 	add.w	r8, r8, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001740:	eb03 134a 	add.w	r3, r3, sl, lsl #5
  len32b = (len + 3U) / 4U;
 8001744:	ea4f 0898 	mov.w	r8, r8, lsr #2
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001748:	9307      	str	r3, [sp, #28]
 800174a:	9b07      	ldr	r3, [sp, #28]
 800174c:	6999      	ldr	r1, [r3, #24]
 800174e:	b289      	uxth	r1, r1
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001750:	4541      	cmp	r1, r8
 8001752:	e9d7 3209 	ldrd	r3, r2, [r7, #36]	@ 0x24
 8001756:	d327      	bcc.n	80017a8 <HAL_PCD_IRQHandler+0x5c0>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001758:	4293      	cmp	r3, r2
 800175a:	d80b      	bhi.n	8001774 <HAL_PCD_IRQHandler+0x58c>
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800175c:	9b06      	ldr	r3, [sp, #24]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800175e:	f00a 000f 	and.w	r0, sl, #15
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001762:	f8d3 2834 	ldr.w	r2, [r3, #2100]	@ 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001766:	2101      	movs	r1, #1
 8001768:	4081      	lsls	r1, r0
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800176a:	ea22 0201 	bic.w	r2, r2, r1
 800176e:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
 8001772:	e01b      	b.n	80017ac <HAL_PCD_IRQHandler+0x5c4>
    len = ep->xfer_len - ep->xfer_count;
 8001774:	eba3 0902 	sub.w	r9, r3, r2
 8001778:	69fb      	ldr	r3, [r7, #28]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800177a:	9a05      	ldr	r2, [sp, #20]
 800177c:	9806      	ldr	r0, [sp, #24]
 800177e:	4599      	cmp	r9, r3
 8001780:	bf28      	it	cs
 8001782:	4699      	movcs	r9, r3
 8001784:	79a3      	ldrb	r3, [r4, #6]
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	6a39      	ldr	r1, [r7, #32]
 800178a:	fa1f f389 	uxth.w	r3, r9
 800178e:	f000 fef1 	bl	8002574 <USB_WritePacket>
    ep->xfer_buff  += len;
 8001792:	6a3b      	ldr	r3, [r7, #32]
 8001794:	444b      	add	r3, r9
 8001796:	623b      	str	r3, [r7, #32]
    ep->xfer_count += len;
 8001798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    len32b = (len + 3U) / 4U;
 800179a:	f109 0803 	add.w	r8, r9, #3
    ep->xfer_count += len;
 800179e:	444b      	add	r3, r9
    len32b = (len + 3U) / 4U;
 80017a0:	ea4f 0898 	mov.w	r8, r8, lsr #2
    ep->xfer_count += len;
 80017a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017a6:	e7d0      	b.n	800174a <HAL_PCD_IRQHandler+0x562>
  if (ep->xfer_len <= ep->xfer_count)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d9d7      	bls.n	800175c <HAL_PCD_IRQHandler+0x574>
        ep_intr >>= 1U;
 80017ac:	9b04      	ldr	r3, [sp, #16]
 80017ae:	085b      	lsrs	r3, r3, #1
        epnum++;
 80017b0:	f10a 0a01 	add.w	sl, sl, #1
        ep_intr >>= 1U;
 80017b4:	9304      	str	r3, [sp, #16]
 80017b6:	3724      	adds	r7, #36	@ 0x24
 80017b8:	f10b 0b20 	add.w	fp, fp, #32
 80017bc:	e57f      	b.n	80012be <HAL_PCD_IRQHandler+0xd6>
        HAL_PCD_ResumeCallback(hpcd);
 80017be:	4620      	mov	r0, r4
 80017c0:	f002 f9ae 	bl	8003b20 <HAL_PCD_ResumeCallback>
 80017c4:	e594      	b.n	80012f0 <HAL_PCD_IRQHandler+0x108>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80017c6:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 80017ce:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80017d0:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80017d4:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80017d8:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 80017dc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80017e0:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80017e4:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 80017e8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017ec:	9a03      	ldr	r2, [sp, #12]
 80017ee:	3201      	adds	r2, #1
 80017f0:	9203      	str	r2, [sp, #12]
 80017f2:	3320      	adds	r3, #32
 80017f4:	e5a3      	b.n	800133e <HAL_PCD_IRQHandler+0x156>
 80017f6:	bf00      	nop
 80017f8:	4f54300a 	.word	0x4f54300a
 80017fc:	4f54310a 	.word	0x4f54310a
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001800:	696b      	ldr	r3, [r5, #20]
 8001802:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001806:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800180a:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800180c:	692b      	ldr	r3, [r5, #16]
 800180e:	f043 030b 	orr.w	r3, r3, #11
 8001812:	612b      	str	r3, [r5, #16]
 8001814:	e5a9      	b.n	800136a <HAL_PCD_IRQHandler+0x182>
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001816:	69b3      	ldr	r3, [r6, #24]
 8001818:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800181c:	61b3      	str	r3, [r6, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800181e:	2701      	movs	r7, #1
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001820:	f204 2857 	addw	r8, r4, #599	@ 0x257
 8001824:	f04f 0924 	mov.w	r9, #36	@ 0x24
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001828:	7923      	ldrb	r3, [r4, #4]
 800182a:	42bb      	cmp	r3, r7
 800182c:	f67f addd 	bls.w	80013ea <HAL_PCD_IRQHandler+0x202>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001830:	fb09 f307 	mul.w	r3, r9, r7
 8001834:	f818 3003 	ldrb.w	r3, [r8, r3]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d103      	bne.n	8001844 <HAL_PCD_IRQHandler+0x65c>
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800183c:	b2f9      	uxtb	r1, r7
 800183e:	4620      	mov	r0, r4
 8001840:	f7ff fcc1 	bl	80011c6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001844:	3701      	adds	r7, #1
 8001846:	e7ef      	b.n	8001828 <HAL_PCD_IRQHandler+0x640>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001848:	f898 303c 	ldrb.w	r3, [r8, #60]	@ 0x3c
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800184c:	f8d9 2000 	ldr.w	r2, [r9]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001850:	2b01      	cmp	r3, #1
 8001852:	d109      	bne.n	8001868 <HAL_PCD_IRQHandler+0x680>
 8001854:	2a00      	cmp	r2, #0
 8001856:	da07      	bge.n	8001868 <HAL_PCD_IRQHandler+0x680>
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001858:	f067 017f 	orn	r1, r7, #127	@ 0x7f
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800185c:	f888 303b 	strb.w	r3, [r8, #59]	@ 0x3b
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001860:	b2c9      	uxtb	r1, r1
 8001862:	4620      	mov	r0, r4
 8001864:	f7ff fcaf 	bl	80011c6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001868:	3701      	adds	r7, #1
 800186a:	f108 0824 	add.w	r8, r8, #36	@ 0x24
 800186e:	f109 0920 	add.w	r9, r9, #32
 8001872:	e5c3      	b.n	80013fc <HAL_PCD_IRQHandler+0x214>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001874:	3101      	adds	r1, #1
 8001876:	3324      	adds	r3, #36	@ 0x24
 8001878:	3020      	adds	r0, #32
 800187a:	e5d3      	b.n	8001424 <HAL_PCD_IRQHandler+0x23c>

0800187c <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800187c:	6803      	ldr	r3, [r0, #0]
{
 800187e:	b570      	push	{r4, r5, r6, lr}
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001880:	6a58      	ldr	r0, [r3, #36]	@ 0x24

  if (fifo == 0U)
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001882:	0412      	lsls	r2, r2, #16
  if (fifo == 0U)
 8001884:	b919      	cbnz	r1, 800188e <HAL_PCDEx_SetTxFiFo+0x12>
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001886:	4302      	orrs	r2, r0
 8001888:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 800188a:	2000      	movs	r0, #0
 800188c:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800188e:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8001890:	1e4e      	subs	r6, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001892:	eb00 4014 	add.w	r0, r0, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8001896:	2400      	movs	r4, #0
 8001898:	42b4      	cmp	r4, r6
 800189a:	d305      	bcc.n	80018a8 <HAL_PCDEx_SetTxFiFo+0x2c>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800189c:	313f      	adds	r1, #63	@ 0x3f
 800189e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80018a2:	4302      	orrs	r2, r0
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	e7f0      	b.n	800188a <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80018a8:	f104 0540 	add.w	r5, r4, #64	@ 0x40
 80018ac:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80018b0:	3401      	adds	r4, #1
 80018b2:	686d      	ldr	r5, [r5, #4]
 80018b4:	eb00 4015 	add.w	r0, r0, r5, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80018b8:	e7ee      	b.n	8001898 <HAL_PCDEx_SetTxFiFo+0x1c>

080018ba <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 80018ba:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 80018bc:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 80018be:	6259      	str	r1, [r3, #36]	@ 0x24
}
 80018c0:	4770      	bx	lr

080018c2 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80018c2:	4770      	bx	lr

080018c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018c8:	4604      	mov	r4, r0
 80018ca:	b340      	cbz	r0, 800191e <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018cc:	6803      	ldr	r3, [r0, #0]
 80018ce:	07de      	lsls	r6, r3, #31
 80018d0:	d410      	bmi.n	80018f4 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018d2:	6823      	ldr	r3, [r4, #0]
 80018d4:	079d      	lsls	r5, r3, #30
 80018d6:	d45b      	bmi.n	8001990 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018d8:	6823      	ldr	r3, [r4, #0]
 80018da:	0719      	lsls	r1, r3, #28
 80018dc:	f100 809d 	bmi.w	8001a1a <HAL_RCC_OscConfig+0x156>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018e0:	6823      	ldr	r3, [r4, #0]
 80018e2:	075a      	lsls	r2, r3, #29
 80018e4:	f100 80bd 	bmi.w	8001a62 <HAL_RCC_OscConfig+0x19e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018e8:	69a3      	ldr	r3, [r4, #24]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f040 8124 	bne.w	8001b38 <HAL_RCC_OscConfig+0x274>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80018f0:	2000      	movs	r0, #0
 80018f2:	e02c      	b.n	800194e <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018f4:	4b8d      	ldr	r3, [pc, #564]	@ (8001b2c <HAL_RCC_OscConfig+0x268>)
 80018f6:	689a      	ldr	r2, [r3, #8]
 80018f8:	f002 020c 	and.w	r2, r2, #12
 80018fc:	2a04      	cmp	r2, #4
 80018fe:	d007      	beq.n	8001910 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001900:	689a      	ldr	r2, [r3, #8]
 8001902:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001906:	2a08      	cmp	r2, #8
 8001908:	d10b      	bne.n	8001922 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	0259      	lsls	r1, r3, #9
 800190e:	d508      	bpl.n	8001922 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001910:	4b86      	ldr	r3, [pc, #536]	@ (8001b2c <HAL_RCC_OscConfig+0x268>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	039a      	lsls	r2, r3, #14
 8001916:	d5dc      	bpl.n	80018d2 <HAL_RCC_OscConfig+0xe>
 8001918:	6863      	ldr	r3, [r4, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1d9      	bne.n	80018d2 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 800191e:	2001      	movs	r0, #1
 8001920:	e015      	b.n	800194e <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001922:	6863      	ldr	r3, [r4, #4]
 8001924:	4d81      	ldr	r5, [pc, #516]	@ (8001b2c <HAL_RCC_OscConfig+0x268>)
 8001926:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800192a:	d113      	bne.n	8001954 <HAL_RCC_OscConfig+0x90>
 800192c:	682b      	ldr	r3, [r5, #0]
 800192e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001932:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001934:	f7fe ff96 	bl	8000864 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001938:	4e7c      	ldr	r6, [pc, #496]	@ (8001b2c <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 800193a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193c:	6833      	ldr	r3, [r6, #0]
 800193e:	039b      	lsls	r3, r3, #14
 8001940:	d4c7      	bmi.n	80018d2 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001942:	f7fe ff8f 	bl	8000864 <HAL_GetTick>
 8001946:	1b40      	subs	r0, r0, r5
 8001948:	2864      	cmp	r0, #100	@ 0x64
 800194a:	d9f7      	bls.n	800193c <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 800194c:	2003      	movs	r0, #3
}
 800194e:	b002      	add	sp, #8
 8001950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001954:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001958:	d104      	bne.n	8001964 <HAL_RCC_OscConfig+0xa0>
 800195a:	682b      	ldr	r3, [r5, #0]
 800195c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001960:	602b      	str	r3, [r5, #0]
 8001962:	e7e3      	b.n	800192c <HAL_RCC_OscConfig+0x68>
 8001964:	682a      	ldr	r2, [r5, #0]
 8001966:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800196a:	602a      	str	r2, [r5, #0]
 800196c:	682a      	ldr	r2, [r5, #0]
 800196e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001972:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1dd      	bne.n	8001934 <HAL_RCC_OscConfig+0x70>
        tickstart = HAL_GetTick();
 8001978:	f7fe ff74 	bl	8000864 <HAL_GetTick>
 800197c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800197e:	682b      	ldr	r3, [r5, #0]
 8001980:	039f      	lsls	r7, r3, #14
 8001982:	d5a6      	bpl.n	80018d2 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001984:	f7fe ff6e 	bl	8000864 <HAL_GetTick>
 8001988:	1b80      	subs	r0, r0, r6
 800198a:	2864      	cmp	r0, #100	@ 0x64
 800198c:	d9f7      	bls.n	800197e <HAL_RCC_OscConfig+0xba>
 800198e:	e7dd      	b.n	800194c <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001990:	4b66      	ldr	r3, [pc, #408]	@ (8001b2c <HAL_RCC_OscConfig+0x268>)
 8001992:	689a      	ldr	r2, [r3, #8]
 8001994:	f012 0f0c 	tst.w	r2, #12
 8001998:	d007      	beq.n	80019aa <HAL_RCC_OscConfig+0xe6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019a0:	2a08      	cmp	r2, #8
 80019a2:	d111      	bne.n	80019c8 <HAL_RCC_OscConfig+0x104>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	025d      	lsls	r5, r3, #9
 80019a8:	d40e      	bmi.n	80019c8 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019aa:	4a60      	ldr	r2, [pc, #384]	@ (8001b2c <HAL_RCC_OscConfig+0x268>)
 80019ac:	6813      	ldr	r3, [r2, #0]
 80019ae:	0799      	lsls	r1, r3, #30
 80019b0:	d502      	bpl.n	80019b8 <HAL_RCC_OscConfig+0xf4>
 80019b2:	68e3      	ldr	r3, [r4, #12]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d1b2      	bne.n	800191e <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b8:	6813      	ldr	r3, [r2, #0]
 80019ba:	6921      	ldr	r1, [r4, #16]
 80019bc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80019c0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80019c4:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019c6:	e787      	b.n	80018d8 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019c8:	68e2      	ldr	r2, [r4, #12]
 80019ca:	4b59      	ldr	r3, [pc, #356]	@ (8001b30 <HAL_RCC_OscConfig+0x26c>)
 80019cc:	b1b2      	cbz	r2, 80019fc <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_HSI_ENABLE();
 80019ce:	2201      	movs	r2, #1
 80019d0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80019d2:	f7fe ff47 	bl	8000864 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d6:	4d55      	ldr	r5, [pc, #340]	@ (8001b2c <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 80019d8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019da:	682b      	ldr	r3, [r5, #0]
 80019dc:	079b      	lsls	r3, r3, #30
 80019de:	d507      	bpl.n	80019f0 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e0:	682b      	ldr	r3, [r5, #0]
 80019e2:	6922      	ldr	r2, [r4, #16]
 80019e4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80019e8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80019ec:	602b      	str	r3, [r5, #0]
 80019ee:	e773      	b.n	80018d8 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019f0:	f7fe ff38 	bl	8000864 <HAL_GetTick>
 80019f4:	1b80      	subs	r0, r0, r6
 80019f6:	2802      	cmp	r0, #2
 80019f8:	d9ef      	bls.n	80019da <HAL_RCC_OscConfig+0x116>
 80019fa:	e7a7      	b.n	800194c <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 80019fc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80019fe:	f7fe ff31 	bl	8000864 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a02:	4e4a      	ldr	r6, [pc, #296]	@ (8001b2c <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8001a04:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a06:	6833      	ldr	r3, [r6, #0]
 8001a08:	079f      	lsls	r7, r3, #30
 8001a0a:	f57f af65 	bpl.w	80018d8 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a0e:	f7fe ff29 	bl	8000864 <HAL_GetTick>
 8001a12:	1b40      	subs	r0, r0, r5
 8001a14:	2802      	cmp	r0, #2
 8001a16:	d9f6      	bls.n	8001a06 <HAL_RCC_OscConfig+0x142>
 8001a18:	e798      	b.n	800194c <HAL_RCC_OscConfig+0x88>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a1a:	6962      	ldr	r2, [r4, #20]
 8001a1c:	4b44      	ldr	r3, [pc, #272]	@ (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001a1e:	b182      	cbz	r2, 8001a42 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001a20:	2201      	movs	r2, #1
 8001a22:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8001a26:	f7fe ff1d 	bl	8000864 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a2a:	4e40      	ldr	r6, [pc, #256]	@ (8001b2c <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8001a2c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a2e:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8001a30:	079b      	lsls	r3, r3, #30
 8001a32:	f53f af55 	bmi.w	80018e0 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a36:	f7fe ff15 	bl	8000864 <HAL_GetTick>
 8001a3a:	1b40      	subs	r0, r0, r5
 8001a3c:	2802      	cmp	r0, #2
 8001a3e:	d9f6      	bls.n	8001a2e <HAL_RCC_OscConfig+0x16a>
 8001a40:	e784      	b.n	800194c <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 8001a42:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8001a46:	f7fe ff0d 	bl	8000864 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a4a:	4e38      	ldr	r6, [pc, #224]	@ (8001b2c <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8001a4c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a4e:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8001a50:	079f      	lsls	r7, r3, #30
 8001a52:	f57f af45 	bpl.w	80018e0 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a56:	f7fe ff05 	bl	8000864 <HAL_GetTick>
 8001a5a:	1b40      	subs	r0, r0, r5
 8001a5c:	2802      	cmp	r0, #2
 8001a5e:	d9f6      	bls.n	8001a4e <HAL_RCC_OscConfig+0x18a>
 8001a60:	e774      	b.n	800194c <HAL_RCC_OscConfig+0x88>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a62:	4b32      	ldr	r3, [pc, #200]	@ (8001b2c <HAL_RCC_OscConfig+0x268>)
 8001a64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a66:	f012 5280 	ands.w	r2, r2, #268435456	@ 0x10000000
 8001a6a:	d128      	bne.n	8001abe <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a6c:	9201      	str	r2, [sp, #4]
 8001a6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a70:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001a74:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a7c:	9301      	str	r3, [sp, #4]
 8001a7e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001a80:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a82:	4d2c      	ldr	r5, [pc, #176]	@ (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001a84:	682b      	ldr	r3, [r5, #0]
 8001a86:	05d8      	lsls	r0, r3, #23
 8001a88:	d51b      	bpl.n	8001ac2 <HAL_RCC_OscConfig+0x1fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a8a:	68a3      	ldr	r3, [r4, #8]
 8001a8c:	4d27      	ldr	r5, [pc, #156]	@ (8001b2c <HAL_RCC_OscConfig+0x268>)
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d127      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x21e>
 8001a92:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8001a9a:	f7fe fee3 	bl	8000864 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a9e:	4e23      	ldr	r6, [pc, #140]	@ (8001b2c <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8001aa0:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aa2:	f241 3888 	movw	r8, #5000	@ 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aa6:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8001aa8:	079a      	lsls	r2, r3, #30
 8001aaa:	d539      	bpl.n	8001b20 <HAL_RCC_OscConfig+0x25c>
    if(pwrclkchanged == SET)
 8001aac:	2f00      	cmp	r7, #0
 8001aae:	f43f af1b 	beq.w	80018e8 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ab2:	4a1e      	ldr	r2, [pc, #120]	@ (8001b2c <HAL_RCC_OscConfig+0x268>)
 8001ab4:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001ab6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001aba:	6413      	str	r3, [r2, #64]	@ 0x40
 8001abc:	e714      	b.n	80018e8 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8001abe:	2700      	movs	r7, #0
 8001ac0:	e7df      	b.n	8001a82 <HAL_RCC_OscConfig+0x1be>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ac2:	682b      	ldr	r3, [r5, #0]
 8001ac4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ac8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001aca:	f7fe fecb 	bl	8000864 <HAL_GetTick>
 8001ace:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad0:	682b      	ldr	r3, [r5, #0]
 8001ad2:	05d9      	lsls	r1, r3, #23
 8001ad4:	d4d9      	bmi.n	8001a8a <HAL_RCC_OscConfig+0x1c6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ad6:	f7fe fec5 	bl	8000864 <HAL_GetTick>
 8001ada:	1b80      	subs	r0, r0, r6
 8001adc:	2802      	cmp	r0, #2
 8001ade:	d9f7      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x20c>
 8001ae0:	e734      	b.n	800194c <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ae2:	2b05      	cmp	r3, #5
 8001ae4:	d104      	bne.n	8001af0 <HAL_RCC_OscConfig+0x22c>
 8001ae6:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8001ae8:	f043 0304 	orr.w	r3, r3, #4
 8001aec:	672b      	str	r3, [r5, #112]	@ 0x70
 8001aee:	e7d0      	b.n	8001a92 <HAL_RCC_OscConfig+0x1ce>
 8001af0:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 8001af2:	f022 0201 	bic.w	r2, r2, #1
 8001af6:	672a      	str	r2, [r5, #112]	@ 0x70
 8001af8:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 8001afa:	f022 0204 	bic.w	r2, r2, #4
 8001afe:	672a      	str	r2, [r5, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d1ca      	bne.n	8001a9a <HAL_RCC_OscConfig+0x1d6>
      tickstart = HAL_GetTick();
 8001b04:	f7fe feae 	bl	8000864 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b08:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8001b0c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b0e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8001b10:	079b      	lsls	r3, r3, #30
 8001b12:	d5cb      	bpl.n	8001aac <HAL_RCC_OscConfig+0x1e8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b14:	f7fe fea6 	bl	8000864 <HAL_GetTick>
 8001b18:	1b80      	subs	r0, r0, r6
 8001b1a:	4540      	cmp	r0, r8
 8001b1c:	d9f7      	bls.n	8001b0e <HAL_RCC_OscConfig+0x24a>
 8001b1e:	e715      	b.n	800194c <HAL_RCC_OscConfig+0x88>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b20:	f7fe fea0 	bl	8000864 <HAL_GetTick>
 8001b24:	1b40      	subs	r0, r0, r5
 8001b26:	4540      	cmp	r0, r8
 8001b28:	d9bd      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x1e2>
 8001b2a:	e70f      	b.n	800194c <HAL_RCC_OscConfig+0x88>
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	42470000 	.word	0x42470000
 8001b34:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b38:	4d37      	ldr	r5, [pc, #220]	@ (8001c18 <HAL_RCC_OscConfig+0x354>)
 8001b3a:	68aa      	ldr	r2, [r5, #8]
 8001b3c:	f002 020c 	and.w	r2, r2, #12
 8001b40:	2a08      	cmp	r2, #8
 8001b42:	d03e      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x2fe>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	4b35      	ldr	r3, [pc, #212]	@ (8001c1c <HAL_RCC_OscConfig+0x358>)
 8001b48:	f04f 0200 	mov.w	r2, #0
        __HAL_RCC_PLL_DISABLE();
 8001b4c:	661a      	str	r2, [r3, #96]	@ 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b4e:	d12b      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x2e4>
        tickstart = HAL_GetTick();
 8001b50:	f7fe fe88 	bl	8000864 <HAL_GetTick>
 8001b54:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b56:	682b      	ldr	r3, [r5, #0]
 8001b58:	0199      	lsls	r1, r3, #6
 8001b5a:	d41f      	bmi.n	8001b9c <HAL_RCC_OscConfig+0x2d8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b5c:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001b64:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001b68:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001b6a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001b6e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001b70:	0852      	lsrs	r2, r2, #1
 8001b72:	3a01      	subs	r2, #1
 8001b74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001b78:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001b7a:	4b28      	ldr	r3, [pc, #160]	@ (8001c1c <HAL_RCC_OscConfig+0x358>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b7c:	4d26      	ldr	r5, [pc, #152]	@ (8001c18 <HAL_RCC_OscConfig+0x354>)
        __HAL_RCC_PLL_ENABLE();
 8001b7e:	2201      	movs	r2, #1
 8001b80:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001b82:	f7fe fe6f 	bl	8000864 <HAL_GetTick>
 8001b86:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b88:	682b      	ldr	r3, [r5, #0]
 8001b8a:	019a      	lsls	r2, r3, #6
 8001b8c:	f53f aeb0 	bmi.w	80018f0 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b90:	f7fe fe68 	bl	8000864 <HAL_GetTick>
 8001b94:	1b00      	subs	r0, r0, r4
 8001b96:	2802      	cmp	r0, #2
 8001b98:	d9f6      	bls.n	8001b88 <HAL_RCC_OscConfig+0x2c4>
 8001b9a:	e6d7      	b.n	800194c <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b9c:	f7fe fe62 	bl	8000864 <HAL_GetTick>
 8001ba0:	1b80      	subs	r0, r0, r6
 8001ba2:	2802      	cmp	r0, #2
 8001ba4:	d9d7      	bls.n	8001b56 <HAL_RCC_OscConfig+0x292>
 8001ba6:	e6d1      	b.n	800194c <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 8001ba8:	f7fe fe5c 	bl	8000864 <HAL_GetTick>
 8001bac:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bae:	682b      	ldr	r3, [r5, #0]
 8001bb0:	019b      	lsls	r3, r3, #6
 8001bb2:	f57f ae9d 	bpl.w	80018f0 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bb6:	f7fe fe55 	bl	8000864 <HAL_GetTick>
 8001bba:	1b00      	subs	r0, r0, r4
 8001bbc:	2802      	cmp	r0, #2
 8001bbe:	d9f6      	bls.n	8001bae <HAL_RCC_OscConfig+0x2ea>
 8001bc0:	e6c4      	b.n	800194c <HAL_RCC_OscConfig+0x88>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	f43f aeab 	beq.w	800191e <HAL_RCC_OscConfig+0x5a>
        pll_config = RCC->PLLCFGR;
 8001bc8:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bca:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bcc:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bd0:	4291      	cmp	r1, r2
 8001bd2:	f47f aea4 	bne.w	800191e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd6:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bd8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bdc:	428a      	cmp	r2, r1
 8001bde:	f47f ae9e 	bne.w	800191e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001be2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001be4:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8001be8:	401a      	ands	r2, r3
 8001bea:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001bee:	f47f ae96 	bne.w	800191e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bf2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001bf4:	0852      	lsrs	r2, r2, #1
 8001bf6:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8001bfa:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bfc:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001c00:	f47f ae8d 	bne.w	800191e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c04:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001c06:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c0a:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8001c0e:	bf14      	ite	ne
 8001c10:	2001      	movne	r0, #1
 8001c12:	2000      	moveq	r0, #0
 8001c14:	e69b      	b.n	800194e <HAL_RCC_OscConfig+0x8a>
 8001c16:	bf00      	nop
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	42470000 	.word	0x42470000

08001c20 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c20:	4913      	ldr	r1, [pc, #76]	@ (8001c70 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001c22:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c24:	688b      	ldr	r3, [r1, #8]
 8001c26:	f003 030c 	and.w	r3, r3, #12
 8001c2a:	2b04      	cmp	r3, #4
 8001c2c:	d01c      	beq.n	8001c68 <HAL_RCC_GetSysClockFreq+0x48>
 8001c2e:	2b08      	cmp	r3, #8
 8001c30:	d11c      	bne.n	8001c6c <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c32:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c34:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c36:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c38:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c3c:	bf14      	ite	ne
 8001c3e:	480d      	ldrne	r0, [pc, #52]	@ (8001c74 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c40:	480d      	ldreq	r0, [pc, #52]	@ (8001c78 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c42:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001c46:	bf18      	it	ne
 8001c48:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c4a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c4e:	fba1 0100 	umull	r0, r1, r1, r0
 8001c52:	f7fe fac9 	bl	80001e8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c56:	4b06      	ldr	r3, [pc, #24]	@ (8001c70 <HAL_RCC_GetSysClockFreq+0x50>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001c5e:	3301      	adds	r3, #1
 8001c60:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001c62:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001c66:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c68:	4802      	ldr	r0, [pc, #8]	@ (8001c74 <HAL_RCC_GetSysClockFreq+0x54>)
 8001c6a:	e7fc      	b.n	8001c66 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8001c6c:	4802      	ldr	r0, [pc, #8]	@ (8001c78 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8001c6e:	e7fa      	b.n	8001c66 <HAL_RCC_GetSysClockFreq+0x46>
 8001c70:	40023800 	.word	0x40023800
 8001c74:	017d7840 	.word	0x017d7840
 8001c78:	00f42400 	.word	0x00f42400

08001c7c <HAL_RCC_ClockConfig>:
{
 8001c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c80:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001c82:	4604      	mov	r4, r0
 8001c84:	b910      	cbnz	r0, 8001c8c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001c86:	2001      	movs	r0, #1
}
 8001c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c8c:	4b43      	ldr	r3, [pc, #268]	@ (8001d9c <HAL_RCC_ClockConfig+0x120>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	f002 0207 	and.w	r2, r2, #7
 8001c94:	428a      	cmp	r2, r1
 8001c96:	d328      	bcc.n	8001cea <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c98:	6821      	ldr	r1, [r4, #0]
 8001c9a:	078f      	lsls	r7, r1, #30
 8001c9c:	d42d      	bmi.n	8001cfa <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c9e:	07c8      	lsls	r0, r1, #31
 8001ca0:	d440      	bmi.n	8001d24 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ca2:	4b3e      	ldr	r3, [pc, #248]	@ (8001d9c <HAL_RCC_ClockConfig+0x120>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	f002 0207 	and.w	r2, r2, #7
 8001caa:	42aa      	cmp	r2, r5
 8001cac:	d865      	bhi.n	8001d7a <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cae:	6822      	ldr	r2, [r4, #0]
 8001cb0:	0751      	lsls	r1, r2, #29
 8001cb2:	d46b      	bmi.n	8001d8c <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb4:	0713      	lsls	r3, r2, #28
 8001cb6:	d507      	bpl.n	8001cc8 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cb8:	4a39      	ldr	r2, [pc, #228]	@ (8001da0 <HAL_RCC_ClockConfig+0x124>)
 8001cba:	6921      	ldr	r1, [r4, #16]
 8001cbc:	6893      	ldr	r3, [r2, #8]
 8001cbe:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001cc2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001cc6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cc8:	f7ff ffaa 	bl	8001c20 <HAL_RCC_GetSysClockFreq>
 8001ccc:	4b34      	ldr	r3, [pc, #208]	@ (8001da0 <HAL_RCC_ClockConfig+0x124>)
 8001cce:	4a35      	ldr	r2, [pc, #212]	@ (8001da4 <HAL_RCC_ClockConfig+0x128>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001cd6:	5cd3      	ldrb	r3, [r2, r3]
 8001cd8:	40d8      	lsrs	r0, r3
 8001cda:	4b33      	ldr	r3, [pc, #204]	@ (8001da8 <HAL_RCC_ClockConfig+0x12c>)
 8001cdc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001cde:	4b33      	ldr	r3, [pc, #204]	@ (8001dac <HAL_RCC_ClockConfig+0x130>)
 8001ce0:	6818      	ldr	r0, [r3, #0]
 8001ce2:	f7fe fd75 	bl	80007d0 <HAL_InitTick>
  return HAL_OK;
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	e7ce      	b.n	8001c88 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cea:	b2ca      	uxtb	r2, r1
 8001cec:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0307 	and.w	r3, r3, #7
 8001cf4:	428b      	cmp	r3, r1
 8001cf6:	d1c6      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xa>
 8001cf8:	e7ce      	b.n	8001c98 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cfa:	4b29      	ldr	r3, [pc, #164]	@ (8001da0 <HAL_RCC_ClockConfig+0x124>)
 8001cfc:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d00:	bf1e      	ittt	ne
 8001d02:	689a      	ldrne	r2, [r3, #8]
 8001d04:	f442 52e0 	orrne.w	r2, r2, #7168	@ 0x1c00
 8001d08:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d0a:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d0c:	bf42      	ittt	mi
 8001d0e:	689a      	ldrmi	r2, [r3, #8]
 8001d10:	f442 4260 	orrmi.w	r2, r2, #57344	@ 0xe000
 8001d14:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	68a0      	ldr	r0, [r4, #8]
 8001d1a:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8001d1e:	4302      	orrs	r2, r0
 8001d20:	609a      	str	r2, [r3, #8]
 8001d22:	e7bc      	b.n	8001c9e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d24:	6862      	ldr	r2, [r4, #4]
 8001d26:	4b1e      	ldr	r3, [pc, #120]	@ (8001da0 <HAL_RCC_ClockConfig+0x124>)
 8001d28:	2a01      	cmp	r2, #1
 8001d2a:	d11c      	bne.n	8001d66 <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d32:	d0a8      	beq.n	8001c86 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d34:	4e1a      	ldr	r6, [pc, #104]	@ (8001da0 <HAL_RCC_ClockConfig+0x124>)
 8001d36:	68b3      	ldr	r3, [r6, #8]
 8001d38:	f023 0303 	bic.w	r3, r3, #3
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001d40:	f7fe fd90 	bl	8000864 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d44:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8001d48:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d4a:	68b3      	ldr	r3, [r6, #8]
 8001d4c:	6862      	ldr	r2, [r4, #4]
 8001d4e:	f003 030c 	and.w	r3, r3, #12
 8001d52:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001d56:	d0a4      	beq.n	8001ca2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d58:	f7fe fd84 	bl	8000864 <HAL_GetTick>
 8001d5c:	1bc0      	subs	r0, r0, r7
 8001d5e:	4540      	cmp	r0, r8
 8001d60:	d9f3      	bls.n	8001d4a <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001d62:	2003      	movs	r0, #3
 8001d64:	e790      	b.n	8001c88 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d66:	1e91      	subs	r1, r2, #2
 8001d68:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d6a:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d6c:	d802      	bhi.n	8001d74 <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d6e:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001d72:	e7de      	b.n	8001d32 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d74:	f013 0f02 	tst.w	r3, #2
 8001d78:	e7db      	b.n	8001d32 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7a:	b2ea      	uxtb	r2, r5
 8001d7c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0307 	and.w	r3, r3, #7
 8001d84:	42ab      	cmp	r3, r5
 8001d86:	f47f af7e 	bne.w	8001c86 <HAL_RCC_ClockConfig+0xa>
 8001d8a:	e790      	b.n	8001cae <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d8c:	4904      	ldr	r1, [pc, #16]	@ (8001da0 <HAL_RCC_ClockConfig+0x124>)
 8001d8e:	68e0      	ldr	r0, [r4, #12]
 8001d90:	688b      	ldr	r3, [r1, #8]
 8001d92:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8001d96:	4303      	orrs	r3, r0
 8001d98:	608b      	str	r3, [r1, #8]
 8001d9a:	e78b      	b.n	8001cb4 <HAL_RCC_ClockConfig+0x38>
 8001d9c:	40023c00 	.word	0x40023c00
 8001da0:	40023800 	.word	0x40023800
 8001da4:	08003ce4 	.word	0x08003ce4
 8001da8:	20000000 	.word	0x20000000
 8001dac:	20000008 	.word	0x20000008

08001db0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001db0:	4b01      	ldr	r3, [pc, #4]	@ (8001db8 <HAL_RCC_GetHCLKFreq+0x8>)
 8001db2:	6818      	ldr	r0, [r3, #0]
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	20000000 	.word	0x20000000

08001dbc <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001dbc:	6803      	ldr	r3, [r0, #0]
 8001dbe:	f013 0f05 	tst.w	r3, #5
{
 8001dc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001dc4:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001dc6:	d139      	bne.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x80>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001dc8:	6823      	ldr	r3, [r4, #0]
 8001dca:	079a      	lsls	r2, r3, #30
 8001dcc:	d531      	bpl.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	9301      	str	r3, [sp, #4]
 8001dd2:	4b47      	ldr	r3, [pc, #284]	@ (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x134>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001dd4:	4d47      	ldr	r5, [pc, #284]	@ (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x138>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001dd6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001dd8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001ddc:	641a      	str	r2, [r3, #64]	@ 0x40
 8001dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001de4:	9301      	str	r3, [sp, #4]
 8001de6:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8001de8:	682b      	ldr	r3, [r5, #0]
 8001dea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dee:	602b      	str	r3, [r5, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001df0:	f7fe fd38 	bl	8000864 <HAL_GetTick>
 8001df4:	4606      	mov	r6, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001df6:	682b      	ldr	r3, [r5, #0]
 8001df8:	05d8      	lsls	r0, r3, #23
 8001dfa:	d54a      	bpl.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001dfc:	4d3c      	ldr	r5, [pc, #240]	@ (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001dfe:	6922      	ldr	r2, [r4, #16]
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e00:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e02:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8001e06:	d14a      	bne.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0xe2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e08:	6923      	ldr	r3, [r4, #16]
 8001e0a:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8001e0e:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8001e12:	4a37      	ldr	r2, [pc, #220]	@ (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e14:	d163      	bne.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x122>
 8001e16:	6891      	ldr	r1, [r2, #8]
 8001e18:	f023 4070 	bic.w	r0, r3, #4026531840	@ 0xf0000000
 8001e1c:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 8001e20:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 8001e24:	4301      	orrs	r1, r0
 8001e26:	6091      	str	r1, [r2, #8]
 8001e28:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8001e2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e2e:	430b      	orrs	r3, r1
 8001e30:	6713      	str	r3, [r2, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001e32:	6823      	ldr	r3, [r4, #0]
 8001e34:	071b      	lsls	r3, r3, #28
 8001e36:	d456      	bmi.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001e38:	2000      	movs	r0, #0
 8001e3a:	e028      	b.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    __HAL_RCC_PLLI2S_DISABLE();
 8001e3c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001e3e:	4e2c      	ldr	r6, [pc, #176]	@ (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
    __HAL_RCC_PLLI2S_DISABLE();
 8001e40:	2200      	movs	r2, #0
 8001e42:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 8001e44:	f7fe fd0e 	bl	8000864 <HAL_GetTick>
 8001e48:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001e4a:	6833      	ldr	r3, [r6, #0]
 8001e4c:	011b      	lsls	r3, r3, #4
 8001e4e:	d418      	bmi.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8001e50:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8001e54:	071b      	lsls	r3, r3, #28
 8001e56:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001e5a:	6862      	ldr	r2, [r4, #4]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	f8c6 3084 	str.w	r3, [r6, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001e62:	4b25      	ldr	r3, [pc, #148]	@ (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e64:	4e22      	ldr	r6, [pc, #136]	@ (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
    __HAL_RCC_PLLI2S_ENABLE();
 8001e66:	2201      	movs	r2, #1
 8001e68:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 8001e6a:	f7fe fcfb 	bl	8000864 <HAL_GetTick>
 8001e6e:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e70:	6833      	ldr	r3, [r6, #0]
 8001e72:	011f      	lsls	r7, r3, #4
 8001e74:	d4a8      	bmi.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001e76:	f7fe fcf5 	bl	8000864 <HAL_GetTick>
 8001e7a:	1b40      	subs	r0, r0, r5
 8001e7c:	2802      	cmp	r0, #2
 8001e7e:	d9f7      	bls.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8001e80:	e004      	b.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0xd0>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001e82:	f7fe fcef 	bl	8000864 <HAL_GetTick>
 8001e86:	1b40      	subs	r0, r0, r5
 8001e88:	2802      	cmp	r0, #2
 8001e8a:	d9de      	bls.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x8e>
        return HAL_TIMEOUT;
 8001e8c:	2003      	movs	r0, #3
}
 8001e8e:	b003      	add	sp, #12
 8001e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001e92:	f7fe fce7 	bl	8000864 <HAL_GetTick>
 8001e96:	1b80      	subs	r0, r0, r6
 8001e98:	2802      	cmp	r0, #2
 8001e9a:	d9ac      	bls.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8001e9c:	e7f6      	b.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0xd0>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e9e:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d0b0      	beq.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ea6:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ea8:	4a13      	ldr	r2, [pc, #76]	@ (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001eaa:	2101      	movs	r1, #1
 8001eac:	f8c2 1e40 	str.w	r1, [r2, #3648]	@ 0xe40
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001eb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	f8c2 1e40 	str.w	r1, [r2, #3648]	@ 0xe40
      RCC->BDCR = tmpreg1;
 8001eba:	672b      	str	r3, [r5, #112]	@ 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001ebc:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8001ebe:	07d9      	lsls	r1, r3, #31
 8001ec0:	d5a2      	bpl.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x4c>
        tickstart = HAL_GetTick();
 8001ec2:	f7fe fccf 	bl	8000864 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ec6:	f241 3788 	movw	r7, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8001eca:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ecc:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8001ece:	079a      	lsls	r2, r3, #30
 8001ed0:	d49a      	bmi.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x4c>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ed2:	f7fe fcc7 	bl	8000864 <HAL_GetTick>
 8001ed6:	1b80      	subs	r0, r0, r6
 8001ed8:	42b8      	cmp	r0, r7
 8001eda:	d9f7      	bls.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8001edc:	e7d6      	b.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0xd0>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ede:	6891      	ldr	r1, [r2, #8]
 8001ee0:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 8001ee4:	e79f      	b.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x6a>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001ee6:	4b05      	ldr	r3, [pc, #20]	@ (8001efc <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001ee8:	7d22      	ldrb	r2, [r4, #20]
 8001eea:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
 8001eee:	e7a3      	b.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	40007000 	.word	0x40007000
 8001ef8:	42470000 	.word	0x42470000
 8001efc:	42471000 	.word	0x42471000

08001f00 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001f00:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8001f02:	6803      	ldr	r3, [r0, #0]
 8001f04:	4a09      	ldr	r2, [pc, #36]	@ (8001f2c <HAL_RTC_WaitForSynchro+0x2c>)
 8001f06:	60da      	str	r2, [r3, #12]
{
 8001f08:	4604      	mov	r4, r0

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f0a:	f7fe fcab 	bl	8000864 <HAL_GetTick>
 8001f0e:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001f10:	6823      	ldr	r3, [r4, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	069b      	lsls	r3, r3, #26
 8001f16:	d501      	bpl.n	8001f1c <HAL_RTC_WaitForSynchro+0x1c>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8001f18:	2000      	movs	r0, #0
}
 8001f1a:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001f1c:	f7fe fca2 	bl	8000864 <HAL_GetTick>
 8001f20:	1b40      	subs	r0, r0, r5
 8001f22:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8001f26:	d9f3      	bls.n	8001f10 <HAL_RTC_WaitForSynchro+0x10>
      return HAL_TIMEOUT;
 8001f28:	2003      	movs	r0, #3
 8001f2a:	e7f6      	b.n	8001f1a <HAL_RTC_WaitForSynchro+0x1a>
 8001f2c:	00013f5f 	.word	0x00013f5f

08001f30 <RTC_EnterInitMode>:
{
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8001f30:	6803      	ldr	r3, [r0, #0]
{
 8001f32:	b570      	push	{r4, r5, r6, lr}
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8001f34:	68dc      	ldr	r4, [r3, #12]
 8001f36:	f014 0440 	ands.w	r4, r4, #64	@ 0x40
{
 8001f3a:	4605      	mov	r5, r0
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8001f3c:	d117      	bne.n	8001f6e <RTC_EnterInitMode+0x3e>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8001f3e:	68da      	ldr	r2, [r3, #12]
 8001f40:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001f44:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001f46:	f7fe fc8d 	bl	8000864 <HAL_GetTick>
 8001f4a:	4606      	mov	r6, r0

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8001f4c:	682b      	ldr	r3, [r5, #0]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	065b      	lsls	r3, r3, #25
 8001f52:	d400      	bmi.n	8001f56 <RTC_EnterInitMode+0x26>
 8001f54:	b10c      	cbz	r4, 8001f5a <RTC_EnterInitMode+0x2a>
      }
    }
  }

  return status;
}
 8001f56:	4620      	mov	r0, r4
 8001f58:	bd70      	pop	{r4, r5, r6, pc}
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001f5a:	f7fe fc83 	bl	8000864 <HAL_GetTick>
 8001f5e:	1b80      	subs	r0, r0, r6
 8001f60:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001f64:	bf82      	ittt	hi
 8001f66:	2304      	movhi	r3, #4
 8001f68:	776b      	strbhi	r3, [r5, #29]
        status = HAL_ERROR;
 8001f6a:	2401      	movhi	r4, #1
 8001f6c:	e7ee      	b.n	8001f4c <RTC_EnterInitMode+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 8001f6e:	2400      	movs	r4, #0
 8001f70:	e7f1      	b.n	8001f56 <RTC_EnterInitMode+0x26>

08001f72 <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8001f72:	6803      	ldr	r3, [r0, #0]
 8001f74:	68da      	ldr	r2, [r3, #12]
 8001f76:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
{
 8001f7a:	b510      	push	{r4, lr}
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8001f7c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	069b      	lsls	r3, r3, #26
{
 8001f82:	4604      	mov	r4, r0
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8001f84:	d501      	bpl.n	8001f8a <RTC_ExitInitMode+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8001f86:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 8001f88:	bd10      	pop	{r4, pc}
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001f8a:	f7ff ffb9 	bl	8001f00 <HAL_RTC_WaitForSynchro>
 8001f8e:	2800      	cmp	r0, #0
 8001f90:	d0f9      	beq.n	8001f86 <RTC_ExitInitMode+0x14>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001f92:	2304      	movs	r3, #4
 8001f94:	7763      	strb	r3, [r4, #29]
      status = HAL_ERROR;
 8001f96:	2001      	movs	r0, #1
 8001f98:	e7f6      	b.n	8001f88 <RTC_ExitInitMode+0x16>

08001f9a <HAL_RTC_Init>:
{
 8001f9a:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 8001f9c:	4604      	mov	r4, r0
 8001f9e:	2800      	cmp	r0, #0
 8001fa0:	d041      	beq.n	8002026 <HAL_RTC_Init+0x8c>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001fa2:	7f43      	ldrb	r3, [r0, #29]
 8001fa4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001fa8:	b913      	cbnz	r3, 8001fb0 <HAL_RTC_Init+0x16>
    hrtc->Lock = HAL_UNLOCKED;
 8001faa:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8001fac:	f7fe fb8e 	bl	80006cc <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	7763      	strb	r3, [r4, #29]
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8001fb4:	6823      	ldr	r3, [r4, #0]
 8001fb6:	68da      	ldr	r2, [r3, #12]
 8001fb8:	06d2      	lsls	r2, r2, #27
 8001fba:	d503      	bpl.n	8001fc4 <HAL_RTC_Init+0x2a>
    hrtc->State = HAL_RTC_STATE_READY;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	7763      	strb	r3, [r4, #29]
 8001fc0:	2000      	movs	r0, #0
}
 8001fc2:	bd10      	pop	{r4, pc}
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001fc4:	22ca      	movs	r2, #202	@ 0xca
 8001fc6:	625a      	str	r2, [r3, #36]	@ 0x24
 8001fc8:	2253      	movs	r2, #83	@ 0x53
 8001fca:	625a      	str	r2, [r3, #36]	@ 0x24
    status = RTC_EnterInitMode(hrtc);
 8001fcc:	4620      	mov	r0, r4
 8001fce:	f7ff ffaf 	bl	8001f30 <RTC_EnterInitMode>
    if (status == HAL_OK)
 8001fd2:	bb10      	cbnz	r0, 800201a <HAL_RTC_Init+0x80>
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001fd4:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001fd6:	6920      	ldr	r0, [r4, #16]
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001fd8:	689a      	ldr	r2, [r3, #8]
 8001fda:	f422 02e0 	bic.w	r2, r2, #7340032	@ 0x700000
 8001fde:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001fe2:	609a      	str	r2, [r3, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001fe4:	6862      	ldr	r2, [r4, #4]
 8001fe6:	6899      	ldr	r1, [r3, #8]
 8001fe8:	4302      	orrs	r2, r0
 8001fea:	6960      	ldr	r0, [r4, #20]
 8001fec:	4302      	orrs	r2, r0
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001ff2:	68e2      	ldr	r2, [r4, #12]
 8001ff4:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8001ff6:	691a      	ldr	r2, [r3, #16]
 8001ff8:	68a1      	ldr	r1, [r4, #8]
 8001ffa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001ffe:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 8002000:	4620      	mov	r0, r4
 8002002:	f7ff ffb6 	bl	8001f72 <RTC_ExitInitMode>
    if (status == HAL_OK)
 8002006:	b940      	cbnz	r0, 800201a <HAL_RTC_Init+0x80>
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002008:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800200a:	69a1      	ldr	r1, [r4, #24]
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800200c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800200e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002012:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002014:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002016:	430a      	orrs	r2, r1
 8002018:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800201a:	6823      	ldr	r3, [r4, #0]
 800201c:	22ff      	movs	r2, #255	@ 0xff
 800201e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 8002020:	2800      	cmp	r0, #0
 8002022:	d0cb      	beq.n	8001fbc <HAL_RTC_Init+0x22>
 8002024:	e7cd      	b.n	8001fc2 <HAL_RTC_Init+0x28>
    return HAL_ERROR;
 8002026:	2001      	movs	r0, #1
 8002028:	e7cb      	b.n	8001fc2 <HAL_RTC_Init+0x28>

0800202a <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800202a:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800202c:	2300      	movs	r3, #0
{
 800202e:	4602      	mov	r2, r0
  __IO uint32_t count = 0U;
 8002030:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002032:	9b01      	ldr	r3, [sp, #4]
 8002034:	3301      	adds	r3, #1
 8002036:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 8002038:	9b01      	ldr	r3, [sp, #4]
 800203a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800203e:	d815      	bhi.n	800206c <USB_CoreReset+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002040:	6913      	ldr	r3, [r2, #16]
 8002042:	2b00      	cmp	r3, #0
 8002044:	daf5      	bge.n	8002032 <USB_CoreReset+0x8>

  /* Core Soft Reset */
  count = 0U;
 8002046:	2300      	movs	r3, #0
 8002048:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800204a:	6913      	ldr	r3, [r2, #16]
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	6113      	str	r3, [r2, #16]

  do
  {
    count++;
 8002052:	9b01      	ldr	r3, [sp, #4]
 8002054:	3301      	adds	r3, #1
 8002056:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 8002058:	9b01      	ldr	r3, [sp, #4]
 800205a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800205e:	d805      	bhi.n	800206c <USB_CoreReset+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002060:	6910      	ldr	r0, [r2, #16]
 8002062:	f010 0001 	ands.w	r0, r0, #1
 8002066:	d1f4      	bne.n	8002052 <USB_CoreReset+0x28>

  return HAL_OK;
}
 8002068:	b002      	add	sp, #8
 800206a:	4770      	bx	lr
      return HAL_TIMEOUT;
 800206c:	2003      	movs	r0, #3
 800206e:	e7fb      	b.n	8002068 <USB_CoreReset+0x3e>

08002070 <USB_CoreInit>:
{
 8002070:	b084      	sub	sp, #16
 8002072:	b538      	push	{r3, r4, r5, lr}
 8002074:	ad05      	add	r5, sp, #20
 8002076:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800207a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800207e:	2b01      	cmp	r3, #1
{
 8002080:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002082:	d127      	bne.n	80020d4 <USB_CoreInit+0x64>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002084:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8002086:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800208a:	6383      	str	r3, [r0, #56]	@ 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800208c:	68c3      	ldr	r3, [r0, #12]
 800208e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8002092:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002096:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002098:	68c3      	ldr	r3, [r0, #12]
 800209a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800209e:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 80020a0:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80020a4:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80020a6:	bf02      	ittt	eq
 80020a8:	68c3      	ldreq	r3, [r0, #12]
 80020aa:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
 80020ae:	60c3      	streq	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 80020b0:	f7ff ffbb 	bl	800202a <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 80020b4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d107      	bne.n	80020cc <USB_CoreInit+0x5c>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80020bc:	68a3      	ldr	r3, [r4, #8]
 80020be:	f043 0306 	orr.w	r3, r3, #6
 80020c2:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80020c4:	68a3      	ldr	r3, [r4, #8]
 80020c6:	f043 0320 	orr.w	r3, r3, #32
 80020ca:	60a3      	str	r3, [r4, #8]
}
 80020cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80020d0:	b004      	add	sp, #16
 80020d2:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80020d4:	68c3      	ldr	r3, [r0, #12]
 80020d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80020da:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 80020dc:	f7ff ffa5 	bl	800202a <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 80020e0:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80020e4:	b923      	cbnz	r3, 80020f0 <USB_CoreInit+0x80>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80020e6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80020e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80020ec:	63a3      	str	r3, [r4, #56]	@ 0x38
 80020ee:	e7e1      	b.n	80020b4 <USB_CoreInit+0x44>
 80020f0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80020f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020f6:	e7f9      	b.n	80020ec <USB_CoreInit+0x7c>

080020f8 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 80020f8:	2a02      	cmp	r2, #2
 80020fa:	d14a      	bne.n	8002192 <USB_SetTurnaroundTime+0x9a>
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80020fc:	4b27      	ldr	r3, [pc, #156]	@ (800219c <USB_SetTurnaroundTime+0xa4>)
 80020fe:	4a28      	ldr	r2, [pc, #160]	@ (80021a0 <USB_SetTurnaroundTime+0xa8>)
 8002100:	440b      	add	r3, r1
 8002102:	4293      	cmp	r3, r2
 8002104:	d939      	bls.n	800217a <USB_SetTurnaroundTime+0x82>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002106:	4b27      	ldr	r3, [pc, #156]	@ (80021a4 <USB_SetTurnaroundTime+0xac>)
 8002108:	4a27      	ldr	r2, [pc, #156]	@ (80021a8 <USB_SetTurnaroundTime+0xb0>)
 800210a:	440b      	add	r3, r1
 800210c:	4293      	cmp	r3, r2
 800210e:	d936      	bls.n	800217e <USB_SetTurnaroundTime+0x86>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002110:	4a26      	ldr	r2, [pc, #152]	@ (80021ac <USB_SetTurnaroundTime+0xb4>)
 8002112:	f5a1 0374 	sub.w	r3, r1, #15990784	@ 0xf40000
 8002116:	f5a3 5310 	sub.w	r3, r3, #9216	@ 0x2400
 800211a:	4293      	cmp	r3, r2
 800211c:	d931      	bls.n	8002182 <USB_SetTurnaroundTime+0x8a>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800211e:	4a24      	ldr	r2, [pc, #144]	@ (80021b0 <USB_SetTurnaroundTime+0xb8>)
 8002120:	f1a1 7383 	sub.w	r3, r1, #17170432	@ 0x1060000
 8002124:	f5a3 43e7 	sub.w	r3, r3, #29568	@ 0x7380
 8002128:	4293      	cmp	r3, r2
 800212a:	d32c      	bcc.n	8002186 <USB_SetTurnaroundTime+0x8e>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800212c:	4b21      	ldr	r3, [pc, #132]	@ (80021b4 <USB_SetTurnaroundTime+0xbc>)
 800212e:	4a22      	ldr	r2, [pc, #136]	@ (80021b8 <USB_SetTurnaroundTime+0xc0>)
 8002130:	440b      	add	r3, r1
 8002132:	4293      	cmp	r3, r2
 8002134:	d929      	bls.n	800218a <USB_SetTurnaroundTime+0x92>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002136:	4b21      	ldr	r3, [pc, #132]	@ (80021bc <USB_SetTurnaroundTime+0xc4>)
 8002138:	4a21      	ldr	r2, [pc, #132]	@ (80021c0 <USB_SetTurnaroundTime+0xc8>)
 800213a:	440b      	add	r3, r1
 800213c:	4293      	cmp	r3, r2
 800213e:	d326      	bcc.n	800218e <USB_SetTurnaroundTime+0x96>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002140:	4b20      	ldr	r3, [pc, #128]	@ (80021c4 <USB_SetTurnaroundTime+0xcc>)
 8002142:	4a21      	ldr	r2, [pc, #132]	@ (80021c8 <USB_SetTurnaroundTime+0xd0>)
 8002144:	440b      	add	r3, r1
 8002146:	4293      	cmp	r3, r2
 8002148:	d323      	bcc.n	8002192 <USB_SetTurnaroundTime+0x9a>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800214a:	4a20      	ldr	r2, [pc, #128]	@ (80021cc <USB_SetTurnaroundTime+0xd4>)
 800214c:	f1a1 73b7 	sub.w	r3, r1, #23986176	@ 0x16e0000
 8002150:	f5a3 5358 	sub.w	r3, r3, #13824	@ 0x3600
 8002154:	4293      	cmp	r3, r2
 8002156:	d31e      	bcc.n	8002196 <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002158:	4b1d      	ldr	r3, [pc, #116]	@ (80021d0 <USB_SetTurnaroundTime+0xd8>)
      UsbTrd = 0x7U;
 800215a:	4a1e      	ldr	r2, [pc, #120]	@ (80021d4 <USB_SetTurnaroundTime+0xdc>)
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800215c:	440b      	add	r3, r1
      UsbTrd = 0x7U;
 800215e:	4293      	cmp	r3, r2
 8002160:	bf2c      	ite	cs
 8002162:	2306      	movcs	r3, #6
 8002164:	2307      	movcc	r3, #7
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002166:	68c2      	ldr	r2, [r0, #12]
 8002168:	f422 5270 	bic.w	r2, r2, #15360	@ 0x3c00
 800216c:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800216e:	68c2      	ldr	r2, [r0, #12]
 8002170:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
 8002174:	60c3      	str	r3, [r0, #12]
}
 8002176:	2000      	movs	r0, #0
 8002178:	4770      	bx	lr
      UsbTrd = 0xFU;
 800217a:	230f      	movs	r3, #15
 800217c:	e7f3      	b.n	8002166 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xEU;
 800217e:	230e      	movs	r3, #14
 8002180:	e7f1      	b.n	8002166 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xDU;
 8002182:	230d      	movs	r3, #13
 8002184:	e7ef      	b.n	8002166 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xCU;
 8002186:	230c      	movs	r3, #12
 8002188:	e7ed      	b.n	8002166 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xBU;
 800218a:	230b      	movs	r3, #11
 800218c:	e7eb      	b.n	8002166 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xAU;
 800218e:	230a      	movs	r3, #10
 8002190:	e7e9      	b.n	8002166 <USB_SetTurnaroundTime+0x6e>
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002192:	2309      	movs	r3, #9
 8002194:	e7e7      	b.n	8002166 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0x8U;
 8002196:	2308      	movs	r3, #8
 8002198:	e7e5      	b.n	8002166 <USB_SetTurnaroundTime+0x6e>
 800219a:	bf00      	nop
 800219c:	ff275340 	.word	0xff275340
 80021a0:	000c34ff 	.word	0x000c34ff
 80021a4:	ff1b1e40 	.word	0xff1b1e40
 80021a8:	000f423f 	.word	0x000f423f
 80021ac:	00124f7f 	.word	0x00124f7f
 80021b0:	0013d620 	.word	0x0013d620
 80021b4:	fee5b660 	.word	0xfee5b660
 80021b8:	0016e35f 	.word	0x0016e35f
 80021bc:	feced300 	.word	0xfeced300
 80021c0:	001b7740 	.word	0x001b7740
 80021c4:	feb35bc0 	.word	0xfeb35bc0
 80021c8:	002191c0 	.word	0x002191c0
 80021cc:	00387520 	.word	0x00387520
 80021d0:	fe5954e0 	.word	0xfe5954e0
 80021d4:	00419ce0 	.word	0x00419ce0

080021d8 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80021d8:	6883      	ldr	r3, [r0, #8]
 80021da:	f043 0301 	orr.w	r3, r3, #1
 80021de:	6083      	str	r3, [r0, #8]
}
 80021e0:	2000      	movs	r0, #0
 80021e2:	4770      	bx	lr

080021e4 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80021e4:	6883      	ldr	r3, [r0, #8]
 80021e6:	f023 0301 	bic.w	r3, r3, #1
 80021ea:	6083      	str	r3, [r0, #8]
}
 80021ec:	2000      	movs	r0, #0
 80021ee:	4770      	bx	lr

080021f0 <USB_SetCurrentMode>:
{
 80021f0:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80021f2:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80021f4:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80021f6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
{
 80021fa:	4605      	mov	r5, r0
 80021fc:	460c      	mov	r4, r1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80021fe:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8002200:	d114      	bne.n	800222c <USB_SetCurrentMode+0x3c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002202:	68c3      	ldr	r3, [r0, #12]
 8002204:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002208:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 800220a:	2400      	movs	r4, #0
      HAL_Delay(10U);
 800220c:	200a      	movs	r0, #10
 800220e:	f7fe fb2f 	bl	8000870 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8002212:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002214:	07d9      	lsls	r1, r3, #31
      ms += 10U;
 8002216:	f104 040a 	add.w	r4, r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800221a:	d402      	bmi.n	8002222 <USB_SetCurrentMode+0x32>
 800221c:	2cc8      	cmp	r4, #200	@ 0xc8
 800221e:	d1f5      	bne.n	800220c <USB_SetCurrentMode+0x1c>
      ms += 10U;
 8002220:	24c8      	movs	r4, #200	@ 0xc8
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8002222:	f1a4 03c8 	sub.w	r3, r4, #200	@ 0xc8
 8002226:	4258      	negs	r0, r3
 8002228:	4158      	adcs	r0, r3
}
 800222a:	bd38      	pop	{r3, r4, r5, pc}
  else if (mode == USB_DEVICE_MODE)
 800222c:	b971      	cbnz	r1, 800224c <USB_SetCurrentMode+0x5c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800222e:	68c3      	ldr	r3, [r0, #12]
 8002230:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002234:	60c3      	str	r3, [r0, #12]
      HAL_Delay(10U);
 8002236:	200a      	movs	r0, #10
 8002238:	f7fe fb1a 	bl	8000870 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 800223c:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800223e:	07da      	lsls	r2, r3, #31
      ms += 10U;
 8002240:	f104 040a 	add.w	r4, r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002244:	d5ed      	bpl.n	8002222 <USB_SetCurrentMode+0x32>
 8002246:	2cc8      	cmp	r4, #200	@ 0xc8
 8002248:	d1f5      	bne.n	8002236 <USB_SetCurrentMode+0x46>
 800224a:	e7e9      	b.n	8002220 <USB_SetCurrentMode+0x30>
    return HAL_ERROR;
 800224c:	2001      	movs	r0, #1
 800224e:	e7ec      	b.n	800222a <USB_SetCurrentMode+0x3a>

08002250 <USB_FlushTxFifo>:
{
 8002250:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002252:	2300      	movs	r3, #0
{
 8002254:	4602      	mov	r2, r0
  __IO uint32_t count = 0U;
 8002256:	9301      	str	r3, [sp, #4]
    count++;
 8002258:	9b01      	ldr	r3, [sp, #4]
 800225a:	3301      	adds	r3, #1
 800225c:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 800225e:	9b01      	ldr	r3, [sp, #4]
 8002260:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002264:	d815      	bhi.n	8002292 <USB_FlushTxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002266:	6913      	ldr	r3, [r2, #16]
 8002268:	2b00      	cmp	r3, #0
 800226a:	daf5      	bge.n	8002258 <USB_FlushTxFifo+0x8>
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800226c:	0189      	lsls	r1, r1, #6
  count = 0U;
 800226e:	2300      	movs	r3, #0
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002270:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 8002274:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002276:	6111      	str	r1, [r2, #16]
    count++;
 8002278:	9b01      	ldr	r3, [sp, #4]
 800227a:	3301      	adds	r3, #1
 800227c:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 800227e:	9b01      	ldr	r3, [sp, #4]
 8002280:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002284:	d805      	bhi.n	8002292 <USB_FlushTxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002286:	6910      	ldr	r0, [r2, #16]
 8002288:	f010 0020 	ands.w	r0, r0, #32
 800228c:	d1f4      	bne.n	8002278 <USB_FlushTxFifo+0x28>
}
 800228e:	b002      	add	sp, #8
 8002290:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002292:	2003      	movs	r0, #3
 8002294:	e7fb      	b.n	800228e <USB_FlushTxFifo+0x3e>

08002296 <USB_FlushRxFifo>:
{
 8002296:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002298:	2300      	movs	r3, #0
{
 800229a:	4602      	mov	r2, r0
  __IO uint32_t count = 0U;
 800229c:	9301      	str	r3, [sp, #4]
    count++;
 800229e:	9b01      	ldr	r3, [sp, #4]
 80022a0:	3301      	adds	r3, #1
 80022a2:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80022a4:	9b01      	ldr	r3, [sp, #4]
 80022a6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80022aa:	d813      	bhi.n	80022d4 <USB_FlushRxFifo+0x3e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80022ac:	6913      	ldr	r3, [r2, #16]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	daf5      	bge.n	800229e <USB_FlushRxFifo+0x8>
  count = 0U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80022b6:	2310      	movs	r3, #16
 80022b8:	6113      	str	r3, [r2, #16]
    count++;
 80022ba:	9b01      	ldr	r3, [sp, #4]
 80022bc:	3301      	adds	r3, #1
 80022be:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80022c0:	9b01      	ldr	r3, [sp, #4]
 80022c2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80022c6:	d805      	bhi.n	80022d4 <USB_FlushRxFifo+0x3e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80022c8:	6910      	ldr	r0, [r2, #16]
 80022ca:	f010 0010 	ands.w	r0, r0, #16
 80022ce:	d1f4      	bne.n	80022ba <USB_FlushRxFifo+0x24>
}
 80022d0:	b002      	add	sp, #8
 80022d2:	4770      	bx	lr
      return HAL_TIMEOUT;
 80022d4:	2003      	movs	r0, #3
 80022d6:	e7fb      	b.n	80022d0 <USB_FlushRxFifo+0x3a>

080022d8 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 80022d8:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 80022dc:	4319      	orrs	r1, r3
 80022de:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
}
 80022e2:	2000      	movs	r0, #0
 80022e4:	4770      	bx	lr
	...

080022e8 <USB_DevInit>:
{
 80022e8:	b084      	sub	sp, #16
 80022ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80022ee:	4604      	mov	r4, r0
 80022f0:	a809      	add	r0, sp, #36	@ 0x24
 80022f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 80022f6:	2300      	movs	r3, #0
 80022f8:	f89d 6024 	ldrb.w	r6, [sp, #36]	@ 0x24
 80022fc:	f89d 502e 	ldrb.w	r5, [sp, #46]	@ 0x2e
    USBx->DIEPTXF[i] = 0U;
 8002300:	4619      	mov	r1, r3
 8002302:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8002306:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 800230a:	3301      	adds	r3, #1
 800230c:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 800230e:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8002310:	d1f7      	bne.n	8002302 <USB_DevInit+0x1a>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002312:	f504 6700 	add.w	r7, r4, #2048	@ 0x800
  if (cfg.vbus_sensing_enable == 0U)
 8002316:	2d00      	cmp	r5, #0
 8002318:	d16c      	bne.n	80023f4 <USB_DevInit+0x10c>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f043 0302 	orr.w	r3, r3, #2
 8002320:	607b      	str	r3, [r7, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002322:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002324:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002328:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800232a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800232c:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8002330:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002332:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002334:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002338:	63a3      	str	r3, [r4, #56]	@ 0x38
  USBx_PCGCCTL = 0U;
 800233a:	2300      	movs	r3, #0
 800233c:	f8c4 3e00 	str.w	r3, [r4, #3584]	@ 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002340:	f89d 3029 	ldrb.w	r3, [sp, #41]	@ 0x29
 8002344:	2b01      	cmp	r3, #1
 8002346:	d15f      	bne.n	8002408 <USB_DevInit+0x120>
    if (cfg.speed == USBD_HS_SPEED)
 8002348:	f89d 1027 	ldrb.w	r1, [sp, #39]	@ 0x27
 800234c:	2900      	cmp	r1, #0
 800234e:	d159      	bne.n	8002404 <USB_DevInit+0x11c>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002350:	4620      	mov	r0, r4
 8002352:	f7ff ffc1 	bl	80022d8 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002356:	2110      	movs	r1, #16
 8002358:	4620      	mov	r0, r4
 800235a:	f7ff ff79 	bl	8002250 <USB_FlushTxFifo>
 800235e:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002360:	4620      	mov	r0, r4
 8002362:	f7ff ff98 	bl	8002296 <USB_FlushRxFifo>
 8002366:	4308      	orrs	r0, r1
 8002368:	b2c0      	uxtb	r0, r0
  USBx_DEVICE->DIEPMSK = 0U;
 800236a:	2300      	movs	r3, #0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800236c:	3800      	subs	r0, #0
  USBx_DEVICE->DIEPMSK = 0U;
 800236e:	613b      	str	r3, [r7, #16]
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002370:	bf18      	it	ne
 8002372:	2001      	movne	r0, #1
  USBx_DEVICE->DOEPMSK = 0U;
 8002374:	617b      	str	r3, [r7, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002376:	f504 6210 	add.w	r2, r4, #2304	@ 0x900
 800237a:	61fb      	str	r3, [r7, #28]
      USBx_INEP(i)->DIEPCTL = 0U;
 800237c:	4619      	mov	r1, r3
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800237e:	f04f 4c90 	mov.w	ip, #1207959552	@ 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002382:	f04f 6e00 	mov.w	lr, #134217728	@ 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002386:	f64f 387f 	movw	r8, #64383	@ 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800238a:	429e      	cmp	r6, r3
 800238c:	d83e      	bhi.n	800240c <USB_DevInit+0x124>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800238e:	2200      	movs	r2, #0
 8002390:	f504 6330 	add.w	r3, r4, #2816	@ 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002394:	4611      	mov	r1, r2
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002396:	f04f 4c90 	mov.w	ip, #1207959552	@ 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800239a:	f04f 6e00 	mov.w	lr, #134217728	@ 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800239e:	f64f 387f 	movw	r8, #64383	@ 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80023a2:	4296      	cmp	r6, r2
 80023a4:	d845      	bhi.n	8002432 <USB_DevInit+0x14a>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023ac:	613b      	str	r3, [r7, #16]
  USBx->GINTMSK = 0U;
 80023ae:	2300      	movs	r3, #0
 80023b0:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80023b2:	f06f 4380 	mvn.w	r3, #1073741824	@ 0x40000000
 80023b6:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 80023b8:	f89d 3026 	ldrb.w	r3, [sp, #38]	@ 0x26
 80023bc:	b91b      	cbnz	r3, 80023c6 <USB_DevInit+0xde>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80023be:	69a3      	ldr	r3, [r4, #24]
 80023c0:	f043 0310 	orr.w	r3, r3, #16
 80023c4:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80023c6:	69a2      	ldr	r2, [r4, #24]
 80023c8:	4b23      	ldr	r3, [pc, #140]	@ (8002458 <USB_DevInit+0x170>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 80023ce:	f89d 302a 	ldrb.w	r3, [sp, #42]	@ 0x2a
 80023d2:	b11b      	cbz	r3, 80023dc <USB_DevInit+0xf4>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80023d4:	69a3      	ldr	r3, [r4, #24]
 80023d6:	f043 0308 	orr.w	r3, r3, #8
 80023da:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 80023dc:	2d01      	cmp	r5, #1
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80023de:	bf01      	itttt	eq
 80023e0:	69a3      	ldreq	r3, [r4, #24]
 80023e2:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 80023e6:	f043 0304 	orreq.w	r3, r3, #4
 80023ea:	61a3      	streq	r3, [r4, #24]
}
 80023ec:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80023f0:	b004      	add	sp, #16
 80023f2:	4770      	bx	lr
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80023f4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80023f6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80023fa:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80023fc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80023fe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002402:	e799      	b.n	8002338 <USB_DevInit+0x50>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002404:	4619      	mov	r1, r3
 8002406:	e7a3      	b.n	8002350 <USB_DevInit+0x68>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002408:	2103      	movs	r1, #3
 800240a:	e7a1      	b.n	8002350 <USB_DevInit+0x68>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800240c:	f8d2 9000 	ldr.w	r9, [r2]
 8002410:	f1b9 0f00 	cmp.w	r9, #0
 8002414:	da0b      	bge.n	800242e <USB_DevInit+0x146>
      if (i == 0U)
 8002416:	b93b      	cbnz	r3, 8002428 <USB_DevInit+0x140>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002418:	f8c2 e000 	str.w	lr, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800241c:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800241e:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002420:	f8c2 8008 	str.w	r8, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002424:	3220      	adds	r2, #32
 8002426:	e7b0      	b.n	800238a <USB_DevInit+0xa2>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002428:	f8c2 c000 	str.w	ip, [r2]
 800242c:	e7f6      	b.n	800241c <USB_DevInit+0x134>
      USBx_INEP(i)->DIEPCTL = 0U;
 800242e:	6011      	str	r1, [r2, #0]
 8002430:	e7f4      	b.n	800241c <USB_DevInit+0x134>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002432:	f8d3 9000 	ldr.w	r9, [r3]
 8002436:	f1b9 0f00 	cmp.w	r9, #0
 800243a:	da0b      	bge.n	8002454 <USB_DevInit+0x16c>
      if (i == 0U)
 800243c:	b93a      	cbnz	r2, 800244e <USB_DevInit+0x166>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800243e:	f8c3 e000 	str.w	lr, [r3]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002442:	6119      	str	r1, [r3, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002444:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002446:	f8c3 8008 	str.w	r8, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800244a:	3320      	adds	r3, #32
 800244c:	e7a9      	b.n	80023a2 <USB_DevInit+0xba>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800244e:	f8c3 c000 	str.w	ip, [r3]
 8002452:	e7f6      	b.n	8002442 <USB_DevInit+0x15a>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002454:	6019      	str	r1, [r3, #0]
 8002456:	e7f4      	b.n	8002442 <USB_DevInit+0x15a>
 8002458:	803c3800 	.word	0x803c3800

0800245c <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800245c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8002460:	f013 0006 	ands.w	r0, r3, #6
 8002464:	d004      	beq.n	8002470 <USB_GetDevSpeed+0x14>
    speed = 0xFU;
 8002466:	f013 0f02 	tst.w	r3, #2
 800246a:	bf14      	ite	ne
 800246c:	2002      	movne	r0, #2
 800246e:	200f      	moveq	r0, #15
}
 8002470:	4770      	bx	lr

08002472 <USB_ActivateEndpoint>:
{
 8002472:	b530      	push	{r4, r5, lr}
  uint32_t epnum = (uint32_t)ep->num;
 8002474:	780c      	ldrb	r4, [r1, #0]
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8002476:	2201      	movs	r2, #1
 8002478:	f004 050f 	and.w	r5, r4, #15
 800247c:	40aa      	lsls	r2, r5
  if (ep->is_in == 1U)
 800247e:	784d      	ldrb	r5, [r1, #1]
 8002480:	2d01      	cmp	r5, #1
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8002482:	f500 6300 	add.w	r3, r0, #2048	@ 0x800
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8002486:	eb00 1044 	add.w	r0, r0, r4, lsl #5
  if (ep->is_in == 1U)
 800248a:	d119      	bne.n	80024c0 <USB_ActivateEndpoint+0x4e>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800248c:	69dd      	ldr	r5, [r3, #28]
 800248e:	432a      	orrs	r2, r5
 8002490:	61da      	str	r2, [r3, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8002492:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8002496:	041a      	lsls	r2, r3, #16
 8002498:	d410      	bmi.n	80024bc <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800249a:	688a      	ldr	r2, [r1, #8]
 800249c:	f8d0 5900 	ldr.w	r5, [r0, #2304]	@ 0x900
 80024a0:	f3c2 030a 	ubfx	r3, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80024a4:	790a      	ldrb	r2, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80024a6:	432b      	orrs	r3, r5
 80024a8:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 80024ac:	ea43 5384 	orr.w	r3, r3, r4, lsl #22
 80024b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024b8:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
}
 80024bc:	2000      	movs	r0, #0
 80024be:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80024c0:	69dc      	ldr	r4, [r3, #28]
 80024c2:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 80024c6:	61da      	str	r2, [r3, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80024c8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 80024cc:	041b      	lsls	r3, r3, #16
 80024ce:	d4f5      	bmi.n	80024bc <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80024d0:	688b      	ldr	r3, [r1, #8]
 80024d2:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 80024d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024da:	4313      	orrs	r3, r2
                                    ((uint32_t)ep->type << 18) |
 80024dc:	790a      	ldrb	r2, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80024de:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 80024e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024ea:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 80024ee:	e7e5      	b.n	80024bc <USB_ActivateEndpoint+0x4a>

080024f0 <USB_EPStopXfer>:
{
 80024f0:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80024f2:	2300      	movs	r3, #0
  if (ep->is_in == 1U)
 80024f4:	784a      	ldrb	r2, [r1, #1]
  __IO uint32_t count = 0U;
 80024f6:	9301      	str	r3, [sp, #4]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80024f8:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80024fa:	2a01      	cmp	r2, #1
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80024fc:	ea4f 1343 	mov.w	r3, r3, lsl #5
  if (ep->is_in == 1U)
 8002500:	d11e      	bne.n	8002540 <USB_EPStopXfer+0x50>
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002502:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
 8002506:	18c1      	adds	r1, r0, r3
 8002508:	58c2      	ldr	r2, [r0, r3]
 800250a:	2a00      	cmp	r2, #0
 800250c:	db02      	blt.n	8002514 <USB_EPStopXfer+0x24>
  HAL_StatusTypeDef ret = HAL_OK;
 800250e:	2000      	movs	r0, #0
}
 8002510:	b002      	add	sp, #8
 8002512:	4770      	bx	lr
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8002514:	58c2      	ldr	r2, [r0, r3]
 8002516:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 800251a:	50c2      	str	r2, [r0, r3]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800251c:	58c2      	ldr	r2, [r0, r3]
 800251e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002522:	50c2      	str	r2, [r0, r3]
        if (count > 10000U)
 8002524:	f242 7210 	movw	r2, #10000	@ 0x2710
        count++;
 8002528:	9b01      	ldr	r3, [sp, #4]
 800252a:	3301      	adds	r3, #1
 800252c:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 800252e:	9b01      	ldr	r3, [sp, #4]
 8002530:	4293      	cmp	r3, r2
 8002532:	d901      	bls.n	8002538 <USB_EPStopXfer+0x48>
          ret = HAL_ERROR;
 8002534:	2001      	movs	r0, #1
 8002536:	e7eb      	b.n	8002510 <USB_EPStopXfer+0x20>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8002538:	680b      	ldr	r3, [r1, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	dbf4      	blt.n	8002528 <USB_EPStopXfer+0x38>
 800253e:	e7e6      	b.n	800250e <USB_EPStopXfer+0x1e>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002540:	f500 6030 	add.w	r0, r0, #2816	@ 0xb00
 8002544:	18c1      	adds	r1, r0, r3
 8002546:	58c2      	ldr	r2, [r0, r3]
 8002548:	2a00      	cmp	r2, #0
 800254a:	dae0      	bge.n	800250e <USB_EPStopXfer+0x1e>
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800254c:	58c2      	ldr	r2, [r0, r3]
 800254e:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8002552:	50c2      	str	r2, [r0, r3]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8002554:	58c2      	ldr	r2, [r0, r3]
 8002556:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800255a:	50c2      	str	r2, [r0, r3]
        if (count > 10000U)
 800255c:	f242 7210 	movw	r2, #10000	@ 0x2710
        count++;
 8002560:	9b01      	ldr	r3, [sp, #4]
 8002562:	3301      	adds	r3, #1
 8002564:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8002566:	9b01      	ldr	r3, [sp, #4]
 8002568:	4293      	cmp	r3, r2
 800256a:	d8e3      	bhi.n	8002534 <USB_EPStopXfer+0x44>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800256c:	680b      	ldr	r3, [r1, #0]
 800256e:	2b00      	cmp	r3, #0
 8002570:	dbf6      	blt.n	8002560 <USB_EPStopXfer+0x70>
 8002572:	e7cc      	b.n	800250e <USB_EPStopXfer+0x1e>

08002574 <USB_WritePacket>:
{
 8002574:	b510      	push	{r4, lr}
 8002576:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 800257a:	b944      	cbnz	r4, 800258e <USB_WritePacket+0x1a>
    count32b = ((uint32_t)len + 3U) / 4U;
 800257c:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800257e:	3201      	adds	r2, #1
    count32b = ((uint32_t)len + 3U) / 4U;
 8002580:	089b      	lsrs	r3, r3, #2
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8002582:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8002586:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    for (i = 0U; i < count32b; i++)
 800258a:	428b      	cmp	r3, r1
 800258c:	d101      	bne.n	8002592 <USB_WritePacket+0x1e>
}
 800258e:	2000      	movs	r0, #0
 8002590:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8002592:	f851 2b04 	ldr.w	r2, [r1], #4
 8002596:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8002598:	e7f7      	b.n	800258a <USB_WritePacket+0x16>
	...

0800259c <USB_EPStartXfer>:
{
 800259c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 800259e:	784b      	ldrb	r3, [r1, #1]
    if (ep->xfer_len == 0U)
 80025a0:	690c      	ldr	r4, [r1, #16]
 80025a2:	f8df c1b8 	ldr.w	ip, [pc, #440]	@ 800275c <USB_EPStartXfer+0x1c0>
 80025a6:	f8df e1b8 	ldr.w	lr, [pc, #440]	@ 8002760 <USB_EPStartXfer+0x1c4>
{
 80025aa:	4617      	mov	r7, r2
  uint32_t epnum = (uint32_t)ep->num;
 80025ac:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 80025ae:	2b01      	cmp	r3, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80025b0:	eb00 1542 	add.w	r5, r0, r2, lsl #5
  if (ep->is_in == 1U)
 80025b4:	f040 8082 	bne.w	80026bc <USB_EPStartXfer+0x120>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80025b8:	f505 6610 	add.w	r6, r5, #2304	@ 0x900
 80025bc:	6933      	ldr	r3, [r6, #16]
    if (ep->xfer_len == 0U)
 80025be:	bb44      	cbnz	r4, 8002612 <USB_EPStartXfer+0x76>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80025c0:	ea03 030c 	and.w	r3, r3, ip
 80025c4:	6133      	str	r3, [r6, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80025c6:	6933      	ldr	r3, [r6, #16]
 80025c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80025cc:	6133      	str	r3, [r6, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80025ce:	6933      	ldr	r3, [r6, #16]
 80025d0:	ea03 030e 	and.w	r3, r3, lr
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80025d4:	6133      	str	r3, [r6, #16]
    if (dma == 1U)
 80025d6:	2f01      	cmp	r7, #1
      if (ep->type == EP_TYPE_ISOC)
 80025d8:	790c      	ldrb	r4, [r1, #4]
    if (dma == 1U)
 80025da:	d147      	bne.n	800266c <USB_EPStartXfer+0xd0>
      if ((uint32_t)ep->dma_addr != 0U)
 80025dc:	69cb      	ldr	r3, [r1, #28]
 80025de:	b103      	cbz	r3, 80025e2 <USB_EPStartXfer+0x46>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80025e0:	6173      	str	r3, [r6, #20]
      if (ep->type == EP_TYPE_ISOC)
 80025e2:	2c01      	cmp	r4, #1
 80025e4:	d10c      	bne.n	8002600 <USB_EPStartXfer+0x64>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80025e6:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 80025ea:	f413 7f80 	tst.w	r3, #256	@ 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80025ee:	f8d5 3900 	ldr.w	r3, [r5, #2304]	@ 0x900
 80025f2:	bf0c      	ite	eq
 80025f4:	f043 5300 	orreq.w	r3, r3, #536870912	@ 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80025f8:	f043 5380 	orrne.w	r3, r3, #268435456	@ 0x10000000
 80025fc:	f8c5 3900 	str.w	r3, [r5, #2304]	@ 0x900
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002600:	f8d5 3900 	ldr.w	r3, [r5, #2304]	@ 0x900
 8002604:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8002608:	f8c5 3900 	str.w	r3, [r5, #2304]	@ 0x900
}
 800260c:	2000      	movs	r0, #0
 800260e:	b003      	add	sp, #12
 8002610:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002612:	ea03 030e 	and.w	r3, r3, lr
 8002616:	6133      	str	r3, [r6, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002618:	6933      	ldr	r3, [r6, #16]
 800261a:	ea03 030c 	and.w	r3, r3, ip
 800261e:	6133      	str	r3, [r6, #16]
        if (ep->xfer_len > ep->maxpacket)
 8002620:	688b      	ldr	r3, [r1, #8]
      if (epnum == 0U)
 8002622:	b9ba      	cbnz	r2, 8002654 <USB_EPStartXfer+0xb8>
        if (ep->xfer_len > ep->maxpacket)
 8002624:	42a3      	cmp	r3, r4
          ep->xfer_len = ep->maxpacket;
 8002626:	bf38      	it	cc
 8002628:	610b      	strcc	r3, [r1, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800262a:	6933      	ldr	r3, [r6, #16]
 800262c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8002630:	6133      	str	r3, [r6, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8002632:	690b      	ldr	r3, [r1, #16]
 8002634:	6934      	ldr	r4, [r6, #16]
 8002636:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800263a:	4323      	orrs	r3, r4
 800263c:	6133      	str	r3, [r6, #16]
      if (ep->type == EP_TYPE_ISOC)
 800263e:	790b      	ldrb	r3, [r1, #4]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d1c8      	bne.n	80025d6 <USB_EPStartXfer+0x3a>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8002644:	6933      	ldr	r3, [r6, #16]
 8002646:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800264a:	6133      	str	r3, [r6, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800264c:	6933      	ldr	r3, [r6, #16]
 800264e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002652:	e7bf      	b.n	80025d4 <USB_EPStartXfer+0x38>
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8002654:	441c      	add	r4, r3
 8002656:	3c01      	subs	r4, #1
 8002658:	fbb4 f4f3 	udiv	r4, r4, r3
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800265c:	4b3e      	ldr	r3, [pc, #248]	@ (8002758 <USB_EPStartXfer+0x1bc>)
 800265e:	f8d6 c010 	ldr.w	ip, [r6, #16]
 8002662:	ea03 43c4 	and.w	r3, r3, r4, lsl #19
 8002666:	ea43 030c 	orr.w	r3, r3, ip
 800266a:	e7e1      	b.n	8002630 <USB_EPStartXfer+0x94>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800266c:	f8d5 3900 	ldr.w	r3, [r5, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
 8002670:	2c01      	cmp	r4, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002672:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8002676:	f8c5 3900 	str.w	r3, [r5, #2304]	@ 0x900
        if (ep->xfer_len > 0U)
 800267a:	690b      	ldr	r3, [r1, #16]
      if (ep->type != EP_TYPE_ISOC)
 800267c:	d00b      	beq.n	8002696 <USB_EPStartXfer+0xfa>
        if (ep->xfer_len > 0U)
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0c4      	beq.n	800260c <USB_EPStartXfer+0x70>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8002682:	f8d0 1834 	ldr.w	r1, [r0, #2100]	@ 0x834
 8002686:	f002 020f 	and.w	r2, r2, #15
 800268a:	2301      	movs	r3, #1
 800268c:	4093      	lsls	r3, r2
 800268e:	430b      	orrs	r3, r1
 8002690:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
 8002694:	e7ba      	b.n	800260c <USB_EPStartXfer+0x70>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002696:	f8d0 4808 	ldr.w	r4, [r0, #2056]	@ 0x808
 800269a:	f414 7f80 	tst.w	r4, #256	@ 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800269e:	f8d5 4900 	ldr.w	r4, [r5, #2304]	@ 0x900
 80026a2:	bf0c      	ite	eq
 80026a4:	f044 5400 	orreq.w	r4, r4, #536870912	@ 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80026a8:	f044 5480 	orrne.w	r4, r4, #268435456	@ 0x10000000
 80026ac:	f8c5 4900 	str.w	r4, [r5, #2304]	@ 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80026b0:	9700      	str	r7, [sp, #0]
 80026b2:	68c9      	ldr	r1, [r1, #12]
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	f7ff ff5d 	bl	8002574 <USB_WritePacket>
 80026ba:	e7a7      	b.n	800260c <USB_EPStartXfer+0x70>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80026bc:	f8d5 3b10 	ldr.w	r3, [r5, #2832]	@ 0xb10
 80026c0:	ea03 030e 	and.w	r3, r3, lr
 80026c4:	f8c5 3b10 	str.w	r3, [r5, #2832]	@ 0xb10
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80026c8:	f8d5 3b10 	ldr.w	r3, [r5, #2832]	@ 0xb10
 80026cc:	ea03 030c 	and.w	r3, r3, ip
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80026d0:	f505 6630 	add.w	r6, r5, #2816	@ 0xb00
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80026d4:	6133      	str	r3, [r6, #16]
        ep->xfer_len = ep->maxpacket;
 80026d6:	688b      	ldr	r3, [r1, #8]
    if (epnum == 0U)
 80026d8:	bb3a      	cbnz	r2, 800272a <USB_EPStartXfer+0x18e>
      if (ep->xfer_len > 0U)
 80026da:	b104      	cbz	r4, 80026de <USB_EPStartXfer+0x142>
        ep->xfer_len = ep->maxpacket;
 80026dc:	610b      	str	r3, [r1, #16]
      ep->xfer_size = ep->maxpacket;
 80026de:	620b      	str	r3, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80026e0:	6932      	ldr	r2, [r6, #16]
 80026e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026e6:	4313      	orrs	r3, r2
 80026e8:	6133      	str	r3, [r6, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80026ea:	6933      	ldr	r3, [r6, #16]
 80026ec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
    if (dma == 1U)
 80026f0:	2f01      	cmp	r7, #1
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80026f2:	6133      	str	r3, [r6, #16]
    if (dma == 1U)
 80026f4:	d102      	bne.n	80026fc <USB_EPStartXfer+0x160>
      if ((uint32_t)ep->xfer_buff != 0U)
 80026f6:	68cb      	ldr	r3, [r1, #12]
 80026f8:	b103      	cbz	r3, 80026fc <USB_EPStartXfer+0x160>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80026fa:	6173      	str	r3, [r6, #20]
    if (ep->type == EP_TYPE_ISOC)
 80026fc:	790b      	ldrb	r3, [r1, #4]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d10c      	bne.n	800271c <USB_EPStartXfer+0x180>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002702:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8002706:	f413 7f80 	tst.w	r3, #256	@ 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800270a:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	@ 0xb00
 800270e:	bf0c      	ite	eq
 8002710:	f043 5300 	orreq.w	r3, r3, #536870912	@ 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8002714:	f043 5380 	orrne.w	r3, r3, #268435456	@ 0x10000000
 8002718:	f8c5 3b00 	str.w	r3, [r5, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800271c:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	@ 0xb00
 8002720:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8002724:	f8c5 3b00 	str.w	r3, [r5, #2816]	@ 0xb00
 8002728:	e770      	b.n	800260c <USB_EPStartXfer+0x70>
      if (ep->xfer_len == 0U)
 800272a:	2c00      	cmp	r4, #0
 800272c:	d0d8      	beq.n	80026e0 <USB_EPStartXfer+0x144>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800272e:	441c      	add	r4, r3
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8002730:	4a09      	ldr	r2, [pc, #36]	@ (8002758 <USB_EPStartXfer+0x1bc>)
 8002732:	f8d6 c010 	ldr.w	ip, [r6, #16]
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8002736:	3c01      	subs	r4, #1
 8002738:	fbb4 f4f3 	udiv	r4, r4, r3
 800273c:	b2a4      	uxth	r4, r4
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800273e:	ea02 42c4 	and.w	r2, r2, r4, lsl #19
        ep->xfer_size = ep->maxpacket * pktcnt;
 8002742:	4363      	muls	r3, r4
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8002744:	ea42 020c 	orr.w	r2, r2, ip
        ep->xfer_size = ep->maxpacket * pktcnt;
 8002748:	620b      	str	r3, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800274a:	6132      	str	r2, [r6, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800274c:	6932      	ldr	r2, [r6, #16]
 800274e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002752:	4313      	orrs	r3, r2
 8002754:	e7cc      	b.n	80026f0 <USB_EPStartXfer+0x154>
 8002756:	bf00      	nop
 8002758:	1ff80000 	.word	0x1ff80000
 800275c:	e007ffff 	.word	0xe007ffff
 8002760:	fff80000 	.word	0xfff80000

08002764 <USB_ReadPacket>:
{
 8002764:	4603      	mov	r3, r0
 8002766:	b570      	push	{r4, r5, r6, lr}
  for (i = 0U; i < count32b; i++)
 8002768:	2000      	movs	r0, #0
  uint32_t count32b = (uint32_t)len >> 2U;
 800276a:	0894      	lsrs	r4, r2, #2
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800276c:	f503 5580 	add.w	r5, r3, #4096	@ 0x1000
  uint16_t remaining_bytes = len % 4U;
 8002770:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 8002774:	42a0      	cmp	r0, r4
 8002776:	d310      	bcc.n	800279a <USB_ReadPacket+0x36>
 8002778:	eb01 0084 	add.w	r0, r1, r4, lsl #2
  if (remaining_bytes != 0U)
 800277c:	b162      	cbz	r2, 8002798 <USB_ReadPacket+0x34>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800277e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002782:	681c      	ldr	r4, [r3, #0]
    i = 0U;
 8002784:	2300      	movs	r3, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8002786:	00d9      	lsls	r1, r3, #3
 8002788:	fa24 f101 	lsr.w	r1, r4, r1
 800278c:	54c1      	strb	r1, [r0, r3]
      i++;
 800278e:	3301      	adds	r3, #1
    } while (remaining_bytes != 0U);
 8002790:	b299      	uxth	r1, r3
 8002792:	428a      	cmp	r2, r1
 8002794:	d1f7      	bne.n	8002786 <USB_ReadPacket+0x22>
      pDest++;
 8002796:	4410      	add	r0, r2
}
 8002798:	bd70      	pop	{r4, r5, r6, pc}
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800279a:	682e      	ldr	r6, [r5, #0]
 800279c:	f841 6020 	str.w	r6, [r1, r0, lsl #2]
  for (i = 0U; i < count32b; i++)
 80027a0:	3001      	adds	r0, #1
 80027a2:	e7e7      	b.n	8002774 <USB_ReadPacket+0x10>

080027a4 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 80027a4:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80027a6:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80027a8:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80027aa:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 80027ae:	d112      	bne.n	80027d6 <USB_EPSetStall+0x32>
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80027b0:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
 80027b4:	2a00      	cmp	r2, #0
 80027b6:	db06      	blt.n	80027c6 <USB_EPSetStall+0x22>
 80027b8:	b12b      	cbz	r3, 80027c6 <USB_EPSetStall+0x22>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80027ba:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 80027be:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80027c2:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80027c6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 80027ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80027ce:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
}
 80027d2:	2000      	movs	r0, #0
 80027d4:	4770      	bx	lr
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80027d6:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 80027da:	2a00      	cmp	r2, #0
 80027dc:	db06      	blt.n	80027ec <USB_EPSetStall+0x48>
 80027de:	b12b      	cbz	r3, 80027ec <USB_EPSetStall+0x48>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80027e0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 80027e4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80027e8:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80027ec:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 80027f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80027f4:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 80027f8:	e7eb      	b.n	80027d2 <USB_EPSetStall+0x2e>

080027fa <USB_EPClearStall>:
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80027fa:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80027fc:	784a      	ldrb	r2, [r1, #1]
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80027fe:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8002802:	790b      	ldrb	r3, [r1, #4]
  if (ep->is_in == 1U)
 8002804:	2a01      	cmp	r2, #1
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8002806:	f1a3 0302 	sub.w	r3, r3, #2
 800280a:	b2db      	uxtb	r3, r3
  if (ep->is_in == 1U)
 800280c:	d10f      	bne.n	800282e <USB_EPClearStall+0x34>
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800280e:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8002812:	2b01      	cmp	r3, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002814:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8002818:	f8c0 2900 	str.w	r2, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800281c:	d805      	bhi.n	800282a <USB_EPClearStall+0x30>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800281e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8002822:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002826:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
}
 800282a:	2000      	movs	r0, #0
 800282c:	4770      	bx	lr
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800282e:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 8002832:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8002836:	2b01      	cmp	r3, #1
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002838:	f8c0 2b00 	str.w	r2, [r0, #2816]	@ 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800283c:	bf9e      	ittt	ls
 800283e:	f8d0 3b00 	ldrls.w	r3, [r0, #2816]	@ 0xb00
 8002842:	f043 5380 	orrls.w	r3, r3, #268435456	@ 0x10000000
 8002846:	f8c0 3b00 	strls.w	r3, [r0, #2816]	@ 0xb00
 800284a:	e7ee      	b.n	800282a <USB_EPClearStall+0x30>

0800284c <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800284c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8002850:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002854:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8002858:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 800285c:	0109      	lsls	r1, r1, #4
 800285e:	f401 61fe 	and.w	r1, r1, #2032	@ 0x7f0
 8002862:	4319      	orrs	r1, r3
 8002864:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
}
 8002868:	2000      	movs	r0, #0
 800286a:	4770      	bx	lr

0800286c <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800286c:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 8002870:	f023 0303 	bic.w	r3, r3, #3
 8002874:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8002878:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 800287c:	f023 0302 	bic.w	r3, r3, #2
 8002880:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8002884:	2000      	movs	r0, #0
 8002886:	4770      	bx	lr

08002888 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8002888:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 800288c:	f023 0303 	bic.w	r3, r3, #3
 8002890:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002894:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8002898:	f043 0302 	orr.w	r3, r3, #2
 800289c:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 80028a0:	2000      	movs	r0, #0
 80028a2:	4770      	bx	lr

080028a4 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 80028a4:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 80028a6:	6980      	ldr	r0, [r0, #24]
}
 80028a8:	4010      	ands	r0, r2
 80028aa:	4770      	bx	lr

080028ac <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 80028ac:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 80028b0:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80028b4:	69c0      	ldr	r0, [r0, #28]
 80028b6:	4018      	ands	r0, r3
}
 80028b8:	0c00      	lsrs	r0, r0, #16
 80028ba:	4770      	bx	lr

080028bc <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 80028bc:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 80028c0:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80028c4:	69c0      	ldr	r0, [r0, #28]
 80028c6:	4018      	ands	r0, r3
}
 80028c8:	b280      	uxth	r0, r0
 80028ca:	4770      	bx	lr

080028cc <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80028cc:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80028d0:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80028d4:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	@ 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80028d8:	6940      	ldr	r0, [r0, #20]
}
 80028da:	4010      	ands	r0, r2
 80028dc:	4770      	bx	lr

080028de <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 80028de:	f8d0 2810 	ldr.w	r2, [r0, #2064]	@ 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 80028e2:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80028e6:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80028ea:	f001 010f 	and.w	r1, r1, #15
 80028ee:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80028f0:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80028f4:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80028f6:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	4313      	orrs	r3, r2
}
 80028fc:	4018      	ands	r0, r3
 80028fe:	4770      	bx	lr

08002900 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8002900:	6940      	ldr	r0, [r0, #20]
}
 8002902:	f000 0001 	and.w	r0, r0, #1
 8002906:	4770      	bx	lr

08002908 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8002908:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800290c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002910:	f023 0307 	bic.w	r3, r3, #7
 8002914:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8002918:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 800291c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002920:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8002924:	2000      	movs	r0, #0
 8002926:	4770      	bx	lr

08002928 <USB_EP0_OutStart>:
{
 8002928:	b530      	push	{r4, r5, lr}
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800292a:	6c05      	ldr	r5, [r0, #64]	@ 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800292c:	4c10      	ldr	r4, [pc, #64]	@ (8002970 <USB_EP0_OutStart+0x48>)
 800292e:	42a5      	cmp	r5, r4
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002930:	f500 6330 	add.w	r3, r0, #2816	@ 0xb00
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8002934:	d903      	bls.n	800293e <USB_EP0_OutStart+0x16>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002936:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	@ 0xb00
 800293a:	2c00      	cmp	r4, #0
 800293c:	db16      	blt.n	800296c <USB_EP0_OutStart+0x44>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800293e:	2400      	movs	r4, #0
 8002940:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002942:	691c      	ldr	r4, [r3, #16]
 8002944:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8002948:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800294a:	691c      	ldr	r4, [r3, #16]
 800294c:	f044 0418 	orr.w	r4, r4, #24
 8002950:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8002952:	691c      	ldr	r4, [r3, #16]
  if (dma == 1U)
 8002954:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8002956:	f044 44c0 	orr.w	r4, r4, #1610612736	@ 0x60000000
 800295a:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800295c:	bf01      	itttt	eq
 800295e:	615a      	streq	r2, [r3, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8002960:	f8d0 3b00 	ldreq.w	r3, [r0, #2816]	@ 0xb00
 8002964:	f043 2380 	orreq.w	r3, r3, #2147516416	@ 0x80008000
 8002968:	f8c0 3b00 	streq.w	r3, [r0, #2816]	@ 0xb00
}
 800296c:	2000      	movs	r0, #0
 800296e:	bd30      	pop	{r4, r5, pc}
 8002970:	4f54300a 	.word	0x4f54300a

08002974 <USBD_DFU_GetCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 8002974:	231b      	movs	r3, #27
 8002976:	8003      	strh	r3, [r0, #0]

  return USBD_DFU_CfgDesc;
}
 8002978:	4800      	ldr	r0, [pc, #0]	@ (800297c <USBD_DFU_GetCfgDesc+0x8>)
 800297a:	4770      	bx	lr
 800297c:	20000018 	.word	0x20000018

08002980 <USBD_DFU_EP0_RxReady>:
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
}
 8002980:	2000      	movs	r0, #0
 8002982:	4770      	bx	lr

08002984 <USBD_DFU_GetDeviceQualifierDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 8002984:	230a      	movs	r3, #10
 8002986:	8003      	strh	r3, [r0, #0]

  return USBD_DFU_DeviceQualifierDesc;
}
 8002988:	4800      	ldr	r0, [pc, #0]	@ (800298c <USBD_DFU_GetDeviceQualifierDesc+0x8>)
 800298a:	4770      	bx	lr
 800298c:	2000000c 	.word	0x2000000c

08002990 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8002990:	b510      	push	{r4, lr}
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 8002992:	f8d0 42d4 	ldr.w	r4, [r0, #724]	@ 0x2d4
 8002996:	eb00 0084 	add.w	r0, r0, r4, lsl #2

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 800299a:	2906      	cmp	r1, #6
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 800299c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	@ 0x2c4
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 80029a0:	d805      	bhi.n	80029ae <USBD_DFU_GetUsrStringDesc+0x1e>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 80029a2:	6800      	ldr	r0, [r0, #0]
 80029a4:	4903      	ldr	r1, [pc, #12]	@ (80029b4 <USBD_DFU_GetUsrStringDesc+0x24>)
 80029a6:	f000 feb7 	bl	8003718 <USBD_GetString>
    return USBD_StrDesc;
 80029aa:	4802      	ldr	r0, [pc, #8]	@ (80029b4 <USBD_DFU_GetUsrStringDesc+0x24>)
  {
    /* Not supported Interface Descriptor index */
    *length = 0U;
    return NULL;
  }
}
 80029ac:	bd10      	pop	{r4, pc}
    *length = 0U;
 80029ae:	2000      	movs	r0, #0
 80029b0:	8010      	strh	r0, [r2, #0]
    return NULL;
 80029b2:	e7fb      	b.n	80029ac <USBD_DFU_GetUsrStringDesc+0x1c>
 80029b4:	20000144 	.word	0x20000144

080029b8 <USBD_DFU_GetDfuFuncDesc>:
  * @param  pdev: device instance
  * @param  pConfDesc:  pointer to Bos descriptor
  * @retval pointer to the DFU descriptor
  */
static void *USBD_DFU_GetDfuFuncDesc(uint8_t *pConfDesc)
{
 80029b8:	b513      	push	{r0, r1, r4, lr}
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
  uint8_t *pDfuDesc = NULL;
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80029ba:	7803      	ldrb	r3, [r0, #0]
 80029bc:	8842      	ldrh	r2, [r0, #2]
 80029be:	429a      	cmp	r2, r3
{
 80029c0:	4604      	mov	r4, r0
  if (desc->wTotalLength > desc->bLength)
 80029c2:	d802      	bhi.n	80029ca <USBD_DFU_GetDfuFuncDesc+0x12>
  uint8_t *pDfuDesc = NULL;
 80029c4:	2000      	movs	r0, #0
        break;
      }
    }
  }
  return pDfuDesc;
}
 80029c6:	b002      	add	sp, #8
 80029c8:	bd10      	pop	{r4, pc}
    ptr = desc->bLength;
 80029ca:	f8ad 3006 	strh.w	r3, [sp, #6]
    while (ptr < desc->wTotalLength)
 80029ce:	8862      	ldrh	r2, [r4, #2]
 80029d0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d9f5      	bls.n	80029c4 <USBD_DFU_GetDfuFuncDesc+0xc>
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80029d8:	f10d 0106 	add.w	r1, sp, #6
 80029dc:	f000 fc4c 	bl	8003278 <USBD_GetNextDesc>
      if (pdesc->bDescriptorType == DFU_DESCRIPTOR_TYPE)
 80029e0:	7843      	ldrb	r3, [r0, #1]
 80029e2:	2b21      	cmp	r3, #33	@ 0x21
 80029e4:	d1f3      	bne.n	80029ce <USBD_DFU_GetDfuFuncDesc+0x16>
 80029e6:	e7ee      	b.n	80029c6 <USBD_DFU_GetDfuFuncDesc+0xe>

080029e8 <USBD_DFU_EP0_TxReady>:
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80029e8:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80029ec:	eb00 0383 	add.w	r3, r0, r3, lsl #2
{
 80029f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 80029f2:	e9d3 46b0 	ldrd	r4, r6, [r3, #704]	@ 0x2c0
{
 80029f6:	4605      	mov	r5, r0
  if (hdfu == NULL)
 80029f8:	b3a4      	cbz	r4, 8002a64 <USBD_DFU_EP0_TxReady+0x7c>
  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 80029fa:	f894 341c 	ldrb.w	r3, [r4, #1052]	@ 0x41c
 80029fe:	2b04      	cmp	r3, #4
 8002a00:	d14b      	bne.n	8002a9a <USBD_DFU_EP0_TxReady+0xb2>
    if (hdfu->wblock_num == 0U)
 8002a02:	f8d4 1400 	ldr.w	r1, [r4, #1024]	@ 0x400
 8002a06:	2900      	cmp	r1, #0
 8002a08:	d13a      	bne.n	8002a80 <USBD_DFU_EP0_TxReady+0x98>
      if (hdfu->wlength == 1U)
 8002a0a:	f8d4 3404 	ldr.w	r3, [r4, #1028]	@ 0x404
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d008      	beq.n	8002a24 <USBD_DFU_EP0_TxReady+0x3c>
      else if (hdfu->wlength == 5U)
 8002a12:	2b05      	cmp	r3, #5
 8002a14:	d129      	bne.n	8002a6a <USBD_DFU_EP0_TxReady+0x82>
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 8002a16:	7823      	ldrb	r3, [r4, #0]
 8002a18:	2b21      	cmp	r3, #33	@ 0x21
 8002a1a:	d113      	bne.n	8002a44 <USBD_DFU_EP0_TxReady+0x5c>
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8002a1c:	f8d4 3001 	ldr.w	r3, [r4, #1]
 8002a20:	f8c4 3408 	str.w	r3, [r4, #1032]	@ 0x408
    hdfu->wlength = 0U;
 8002a24:	2300      	movs	r3, #0
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8002a26:	2203      	movs	r2, #3
    hdfu->wlength = 0U;
 8002a28:	f8c4 3404 	str.w	r3, [r4, #1028]	@ 0x404
    hdfu->wblock_num = 0U;
 8002a2c:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8002a30:	f884 241c 	strb.w	r2, [r4, #1052]	@ 0x41c
    hdfu->dev_status[1] = 0U;
 8002a34:	f884 3415 	strb.w	r3, [r4, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 8002a38:	f8a4 3416 	strh.w	r3, [r4, #1046]	@ 0x416
    hdfu->dev_status[4] = hdfu->dev_state;
 8002a3c:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
  return (uint8_t)USBD_OK;
 8002a40:	2000      	movs	r0, #0
 8002a42:	e010      	b.n	8002a66 <USBD_DFU_EP0_TxReady+0x7e>
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 8002a44:	2b41      	cmp	r3, #65	@ 0x41
 8002a46:	d10d      	bne.n	8002a64 <USBD_DFU_EP0_TxReady+0x7c>
          if (DfuInterface->Erase(app_addr_ptr) != USBD_OK)
 8002a48:	68f3      	ldr	r3, [r6, #12]
 8002a4a:	f8d4 0001 	ldr.w	r0, [r4, #1]
 8002a4e:	4798      	blx	r3
 8002a50:	2800      	cmp	r0, #0
 8002a52:	d0e7      	beq.n	8002a24 <USBD_DFU_EP0_TxReady+0x3c>
            hdfu->dev_state = DFU_STATE_ERROR;
 8002a54:	230a      	movs	r3, #10
            hdfu->dev_status[0] = DFU_ERROR_VENDOR;
 8002a56:	220b      	movs	r2, #11
            hdfu->dev_state = DFU_STATE_ERROR;
 8002a58:	f884 341c 	strb.w	r3, [r4, #1052]	@ 0x41c
            hdfu->dev_status[0] = DFU_ERROR_VENDOR;
 8002a5c:	f8c4 2414 	str.w	r2, [r4, #1044]	@ 0x414
            hdfu->dev_status[4] = hdfu->dev_state;
 8002a60:	f884 3418 	strb.w	r3, [r4, #1048]	@ 0x418
    return (uint8_t)USBD_FAIL;
 8002a64:	2003      	movs	r0, #3
}
 8002a66:	b002      	add	sp, #8
 8002a68:	bd70      	pop	{r4, r5, r6, pc}
        hdfu->wlength = 0U;
 8002a6a:	f8c4 1404 	str.w	r1, [r4, #1028]	@ 0x404
        req.bmRequest = 0U;
 8002a6e:	f88d 1000 	strb.w	r1, [sp]
        req.wLength = 1U;
 8002a72:	2301      	movs	r3, #1
        USBD_CtlError(pdev, &req);
 8002a74:	4669      	mov	r1, sp
        req.wLength = 1U;
 8002a76:	f8ad 3006 	strh.w	r3, [sp, #6]
        USBD_CtlError(pdev, &req);
 8002a7a:	f000 fe42 	bl	8003702 <USBD_CtlError>
 8002a7e:	e7d1      	b.n	8002a24 <USBD_DFU_EP0_TxReady+0x3c>
      if (hdfu->wblock_num > 1U)
 8002a80:	2901      	cmp	r1, #1
 8002a82:	d0cf      	beq.n	8002a24 <USBD_DFU_EP0_TxReady+0x3c>
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8002a84:	f8d4 0408 	ldr.w	r0, [r4, #1032]	@ 0x408
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 8002a88:	6933      	ldr	r3, [r6, #16]
 8002a8a:	f8d4 2404 	ldr.w	r2, [r4, #1028]	@ 0x404
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8002a8e:	3902      	subs	r1, #2
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 8002a90:	eb00 2181 	add.w	r1, r0, r1, lsl #10
 8002a94:	4620      	mov	r0, r4
 8002a96:	4798      	blx	r3
 8002a98:	e7da      	b.n	8002a50 <USBD_DFU_EP0_TxReady+0x68>
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 8002a9a:	2b07      	cmp	r3, #7
 8002a9c:	d1e2      	bne.n	8002a64 <USBD_DFU_EP0_TxReady+0x7c>
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 8002a9e:	f8d0 02d0 	ldr.w	r0, [r0, #720]	@ 0x2d0
 8002aa2:	f7ff ff89 	bl	80029b8 <USBD_DFU_GetDfuFuncDesc>
  if ((hdfu == NULL) || (DfuInterface == NULL) || (pDfuFunc == NULL))
 8002aa6:	2e00      	cmp	r6, #0
 8002aa8:	d0ca      	beq.n	8002a40 <USBD_DFU_EP0_TxReady+0x58>
 8002aaa:	2800      	cmp	r0, #0
 8002aac:	d0c8      	beq.n	8002a40 <USBD_DFU_EP0_TxReady+0x58>
  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f884 241d 	strb.w	r2, [r4, #1053]	@ 0x41d
  if ((pDfuFunc->bmAttributes & DFU_MANIFEST_MASK) != 0U)
 8002ab4:	7883      	ldrb	r3, [r0, #2]
 8002ab6:	f013 0304 	ands.w	r3, r3, #4
 8002aba:	d009      	beq.n	8002ad0 <USBD_DFU_EP0_TxReady+0xe8>
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8002abc:	2306      	movs	r3, #6
 8002abe:	f884 341c 	strb.w	r3, [r4, #1052]	@ 0x41c
    hdfu->dev_status[1] = 0U;
 8002ac2:	f884 2415 	strb.w	r2, [r4, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 8002ac6:	f8a4 2416 	strh.w	r2, [r4, #1046]	@ 0x416
    hdfu->dev_status[4] = hdfu->dev_state;
 8002aca:	f884 3418 	strb.w	r3, [r4, #1048]	@ 0x418
    return;
 8002ace:	e7b7      	b.n	8002a40 <USBD_DFU_EP0_TxReady+0x58>
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8002ad0:	2208      	movs	r2, #8
 8002ad2:	f884 241c 	strb.w	r2, [r4, #1052]	@ 0x41c
    hdfu->dev_status[1] = 0U;
 8002ad6:	f884 3415 	strb.w	r3, [r4, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 8002ada:	f8a4 3416 	strh.w	r3, [r4, #1046]	@ 0x416
    hdfu->dev_status[4] = hdfu->dev_state;
 8002ade:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
    (void)USBD_Stop(pdev);
 8002ae2:	4628      	mov	r0, r5
 8002ae4:	f000 fa5f 	bl	8002fa6 <USBD_Stop>
  __ASM volatile ("dsb 0xF":::"memory");
 8002ae8:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002aec:	4905      	ldr	r1, [pc, #20]	@ (8002b04 <USBD_DFU_EP0_TxReady+0x11c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002aee:	4b06      	ldr	r3, [pc, #24]	@ (8002b08 <USBD_DFU_EP0_TxReady+0x120>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002af0:	68ca      	ldr	r2, [r1, #12]
 8002af2:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002af6:	4313      	orrs	r3, r2
 8002af8:	60cb      	str	r3, [r1, #12]
 8002afa:	f3bf 8f4f 	dsb	sy
    __NOP();
 8002afe:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8002b00:	e7fd      	b.n	8002afe <USBD_DFU_EP0_TxReady+0x116>
 8002b02:	bf00      	nop
 8002b04:	e000ed00 	.word	0xe000ed00
 8002b08:	05fa0004 	.word	0x05fa0004

08002b0c <USBD_DFU_Setup>:
{
 8002b0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b0e:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 8002b12:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  uint16_t status_info = 0U;
 8002b16:	2300      	movs	r3, #0
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8002b18:	f8d2 42c0 	ldr.w	r4, [r2, #704]	@ 0x2c0
  uint16_t status_info = 0U;
 8002b1c:	f8ad 3006 	strh.w	r3, [sp, #6]
{
 8002b20:	4605      	mov	r5, r0
 8002b22:	460e      	mov	r6, r1
  if (hdfu == NULL)
 8002b24:	2c00      	cmp	r4, #0
 8002b26:	f000 8183 	beq.w	8002e30 <USBD_DFU_Setup+0x324>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002b2a:	780b      	ldrb	r3, [r1, #0]
 8002b2c:	f013 0360 	ands.w	r3, r3, #96	@ 0x60
 8002b30:	f000 8154 	beq.w	8002ddc <USBD_DFU_Setup+0x2d0>
 8002b34:	2b20      	cmp	r3, #32
 8002b36:	f040 8177 	bne.w	8002e28 <USBD_DFU_Setup+0x31c>
      switch (req->bRequest)
 8002b3a:	784b      	ldrb	r3, [r1, #1]
 8002b3c:	2b06      	cmp	r3, #6
 8002b3e:	f200 8173 	bhi.w	8002e28 <USBD_DFU_Setup+0x31c>
 8002b42:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002b46:	0121      	.short	0x0121
 8002b48:	00370007 	.word	0x00370007
 8002b4c:	00f300a4 	.word	0x00f300a4
 8002b50:	01090105 	.word	0x01090105
  if (req->wLength > 0U)
 8002b54:	88f2      	ldrh	r2, [r6, #6]
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 8002b56:	f894 341c 	ldrb.w	r3, [r4, #1052]	@ 0x41c
  if (req->wLength > 0U)
 8002b5a:	b1d2      	cbz	r2, 8002b92 <USBD_DFU_Setup+0x86>
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d001      	beq.n	8002b64 <USBD_DFU_Setup+0x58>
 8002b60:	2b05      	cmp	r3, #5
 8002b62:	d174      	bne.n	8002c4e <USBD_DFU_Setup+0x142>
      hdfu->wblock_num = req->wValue;
 8002b64:	8873      	ldrh	r3, [r6, #2]
 8002b66:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 8002b6a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8002b6e:	f04f 0303 	mov.w	r3, #3
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 8002b72:	bf28      	it	cs
 8002b74:	f44f 6280 	movcs.w	r2, #1024	@ 0x400
 8002b78:	f8c4 2404 	str.w	r2, [r4, #1028]	@ 0x404
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8002b7c:	f884 341c 	strb.w	r3, [r4, #1052]	@ 0x41c
      hdfu->dev_status[4] = hdfu->dev_state;
 8002b80:	f884 3418 	strb.w	r3, [r4, #1048]	@ 0x418
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 8002b84:	4621      	mov	r1, r4
 8002b86:	4628      	mov	r0, r5
 8002b88:	f000 fdf7 	bl	800377a <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 8002b8c:	2000      	movs	r0, #0
}
 8002b8e:	b003      	add	sp, #12
 8002b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 8002b92:	2b05      	cmp	r3, #5
 8002b94:	d001      	beq.n	8002b9a <USBD_DFU_Setup+0x8e>
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d159      	bne.n	8002c4e <USBD_DFU_Setup+0x142>
        hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8002b9a:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8002b9e:	f8a4 341c 	strh.w	r3, [r4, #1052]	@ 0x41c
        hdfu->dev_status[1] = 0U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	f884 3415 	strb.w	r3, [r4, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 8002ba8:	f8a4 3416 	strh.w	r3, [r4, #1046]	@ 0x416
        hdfu->dev_status[4] = hdfu->dev_state;
 8002bac:	2306      	movs	r3, #6
    hdfu->dev_status[4] = hdfu->dev_state;
 8002bae:	f884 3418 	strb.w	r3, [r4, #1048]	@ 0x418
 8002bb2:	e7eb      	b.n	8002b8c <USBD_DFU_Setup+0x80>
  if (req->wLength > 0U)
 8002bb4:	88f1      	ldrh	r1, [r6, #6]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 8002bb6:	f8d2 72c4 	ldr.w	r7, [r2, #708]	@ 0x2c4
  if (req->wLength > 0U)
 8002bba:	2900      	cmp	r1, #0
 8002bbc:	d05f      	beq.n	8002c7e <USBD_DFU_Setup+0x172>
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8002bbe:	f894 241c 	ldrb.w	r2, [r4, #1052]	@ 0x41c
 8002bc2:	2a02      	cmp	r2, #2
 8002bc4:	d001      	beq.n	8002bca <USBD_DFU_Setup+0xbe>
 8002bc6:	2a09      	cmp	r2, #9
 8002bc8:	d153      	bne.n	8002c72 <USBD_DFU_Setup+0x166>
      hdfu->wblock_num = req->wValue;
 8002bca:	8870      	ldrh	r0, [r6, #2]
 8002bcc:	f8c4 0400 	str.w	r0, [r4, #1024]	@ 0x400
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 8002bd0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8002bd4:	460a      	mov	r2, r1
 8002bd6:	bf28      	it	cs
 8002bd8:	f44f 6280 	movcs.w	r2, #1024	@ 0x400
 8002bdc:	f8c4 2404 	str.w	r2, [r4, #1028]	@ 0x404
      if (hdfu->wblock_num == 0U)
 8002be0:	b9a8      	cbnz	r0, 8002c0e <USBD_DFU_Setup+0x102>
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 8002be2:	2903      	cmp	r1, #3
 8002be4:	bf98      	it	ls
 8002be6:	2309      	movls	r3, #9
 8002be8:	f884 341c 	strb.w	r3, [r4, #1052]	@ 0x41c
        hdfu->dev_status[4] = hdfu->dev_state;
 8002bec:	f884 3418 	strb.w	r3, [r4, #1048]	@ 0x418
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8002bf0:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 8002bf4:	8023      	strh	r3, [r4, #0]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8002bf6:	2341      	movs	r3, #65	@ 0x41
        hdfu->dev_status[1] = 0U;
 8002bf8:	f884 0415 	strb.w	r0, [r4, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 8002bfc:	f8a4 0416 	strh.w	r0, [r4, #1046]	@ 0x416
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8002c00:	70a3      	strb	r3, [r4, #2]
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), CmdLength);
 8002c02:	2203      	movs	r2, #3
 8002c04:	4621      	mov	r1, r4
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 8002c06:	4628      	mov	r0, r5
 8002c08:	f000 fda2 	bl	8003750 <USBD_CtlSendData>
 8002c0c:	e7be      	b.n	8002b8c <USBD_DFU_Setup+0x80>
      else if (hdfu->wblock_num > 1U)
 8002c0e:	2801      	cmp	r0, #1
 8002c10:	f04f 0300 	mov.w	r3, #0
 8002c14:	d023      	beq.n	8002c5e <USBD_DFU_Setup+0x152>
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8002c16:	2109      	movs	r1, #9
        hdfu->dev_status[1] = 0U;
 8002c18:	f884 3415 	strb.w	r3, [r4, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 8002c1c:	f8a4 3416 	strh.w	r3, [r4, #1046]	@ 0x416
          addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8002c20:	f8d4 3408 	ldr.w	r3, [r4, #1032]	@ 0x408
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8002c24:	f884 141c 	strb.w	r1, [r4, #1052]	@ 0x41c
        hdfu->dev_status[4] = hdfu->dev_state;
 8002c28:	f884 1418 	strb.w	r1, [r4, #1048]	@ 0x418
          addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8002c2c:	3802      	subs	r0, #2
          phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 8002c2e:	4621      	mov	r1, r4
 8002c30:	697f      	ldr	r7, [r7, #20]
 8002c32:	eb03 2080 	add.w	r0, r3, r0, lsl #10
 8002c36:	47b8      	blx	r7
          if (phaddr == NULL)
 8002c38:	4601      	mov	r1, r0
 8002c3a:	b968      	cbnz	r0, 8002c58 <USBD_DFU_Setup+0x14c>
            hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8002c3c:	230f      	movs	r3, #15
 8002c3e:	f884 341c 	strb.w	r3, [r4, #1052]	@ 0x41c
            hdfu->dev_status[1] = 0U;
 8002c42:	f884 0415 	strb.w	r0, [r4, #1045]	@ 0x415
            hdfu->dev_status[2] = 0U;
 8002c46:	f8a4 0416 	strh.w	r0, [r4, #1046]	@ 0x416
            hdfu->dev_status[4] = hdfu->dev_state;
 8002c4a:	f884 3418 	strb.w	r3, [r4, #1048]	@ 0x418
      USBD_CtlError(pdev, req);
 8002c4e:	4631      	mov	r1, r6
 8002c50:	4628      	mov	r0, r5
 8002c52:	f000 fd56 	bl	8003702 <USBD_CtlError>
 8002c56:	e799      	b.n	8002b8c <USBD_DFU_Setup+0x80>
            (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 8002c58:	f8d4 2404 	ldr.w	r2, [r4, #1028]	@ 0x404
 8002c5c:	e7d3      	b.n	8002c06 <USBD_DFU_Setup+0xfa>
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8002c5e:	220f      	movs	r2, #15
 8002c60:	f884 241c 	strb.w	r2, [r4, #1052]	@ 0x41c
        hdfu->dev_status[1] = 0U;
 8002c64:	f884 3415 	strb.w	r3, [r4, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 8002c68:	f8a4 3416 	strh.w	r3, [r4, #1046]	@ 0x416
        hdfu->dev_status[4] = hdfu->dev_state;
 8002c6c:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
        USBD_CtlError(pdev, req);
 8002c70:	e7ed      	b.n	8002c4e <USBD_DFU_Setup+0x142>
      hdfu->wlength = 0U;
 8002c72:	2300      	movs	r3, #0
 8002c74:	f8c4 3404 	str.w	r3, [r4, #1028]	@ 0x404
      hdfu->wblock_num = 0U;
 8002c78:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
      USBD_CtlError(pdev, req);
 8002c7c:	e7e7      	b.n	8002c4e <USBD_DFU_Setup+0x142>
    hdfu->dev_state = DFU_STATE_IDLE;
 8002c7e:	2302      	movs	r3, #2
 8002c80:	f884 341c 	strb.w	r3, [r4, #1052]	@ 0x41c
    hdfu->dev_status[1] = 0U;
 8002c84:	f884 1415 	strb.w	r1, [r4, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 8002c88:	f8a4 1416 	strh.w	r1, [r4, #1046]	@ 0x416
 8002c8c:	e78f      	b.n	8002bae <USBD_DFU_Setup+0xa2>
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 8002c8e:	f8d2 72c4 	ldr.w	r7, [r2, #708]	@ 0x2c4
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 8002c92:	f8d0 02d0 	ldr.w	r0, [r0, #720]	@ 0x2d0
 8002c96:	f7ff fe8f 	bl	80029b8 <USBD_DFU_GetDfuFuncDesc>
  if ((hdfu == NULL) || (DfuInterface == NULL) || (pDfuFunc == NULL))
 8002c9a:	2f00      	cmp	r7, #0
 8002c9c:	f43f af76 	beq.w	8002b8c <USBD_DFU_Setup+0x80>
 8002ca0:	2800      	cmp	r0, #0
 8002ca2:	f43f af73 	beq.w	8002b8c <USBD_DFU_Setup+0x80>
  switch (hdfu->dev_state)
 8002ca6:	f894 341c 	ldrb.w	r3, [r4, #1052]	@ 0x41c
 8002caa:	2b03      	cmp	r3, #3
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8002cac:	f204 4614 	addw	r6, r4, #1044	@ 0x414
  switch (hdfu->dev_state)
 8002cb0:	d004      	beq.n	8002cbc <USBD_DFU_Setup+0x1b0>
 8002cb2:	2b06      	cmp	r3, #6
 8002cb4:	d024      	beq.n	8002d00 <USBD_DFU_Setup+0x1f4>
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 8002cb6:	2206      	movs	r2, #6
 8002cb8:	4631      	mov	r1, r6
 8002cba:	e7a4      	b.n	8002c06 <USBD_DFU_Setup+0xfa>
      if (hdfu->wlength != 0U)
 8002cbc:	f8d4 3404 	ldr.w	r3, [r4, #1028]	@ 0x404
 8002cc0:	b1c3      	cbz	r3, 8002cf4 <USBD_DFU_Setup+0x1e8>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 8002cc2:	2304      	movs	r3, #4
        hdfu->dev_status[1] = 0U;
 8002cc4:	2200      	movs	r2, #0
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 8002cc6:	f8d4 1400 	ldr.w	r1, [r4, #1024]	@ 0x400
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 8002cca:	f884 341c 	strb.w	r3, [r4, #1052]	@ 0x41c
        hdfu->dev_status[1] = 0U;
 8002cce:	f884 2415 	strb.w	r2, [r4, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 8002cd2:	f8a4 2416 	strh.w	r2, [r4, #1046]	@ 0x416
        hdfu->dev_status[4] = hdfu->dev_state;
 8002cd6:	f884 3418 	strb.w	r3, [r4, #1048]	@ 0x418
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	f8d4 0408 	ldr.w	r0, [r4, #1032]	@ 0x408
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 8002ce0:	b929      	cbnz	r1, 8002cee <USBD_DFU_Setup+0x1e2>
 8002ce2:	7822      	ldrb	r2, [r4, #0]
 8002ce4:	2a41      	cmp	r2, #65	@ 0x41
 8002ce6:	d102      	bne.n	8002cee <USBD_DFU_Setup+0x1e2>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8002ce8:	4632      	mov	r2, r6
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 8002cea:	4798      	blx	r3
 8002cec:	e7e3      	b.n	8002cb6 <USBD_DFU_Setup+0x1aa>
 8002cee:	4632      	mov	r2, r6
 8002cf0:	2101      	movs	r1, #1
 8002cf2:	e7fa      	b.n	8002cea <USBD_DFU_Setup+0x1de>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 8002cf4:	2205      	movs	r2, #5
          hdfu->dev_state = DFU_STATE_IDLE;
 8002cf6:	f884 241c 	strb.w	r2, [r4, #1052]	@ 0x41c
          hdfu->dev_status[1] = 0U;
 8002cfa:	f884 3415 	strb.w	r3, [r4, #1045]	@ 0x415
 8002cfe:	e009      	b.n	8002d14 <USBD_DFU_Setup+0x208>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 8002d00:	f894 341d 	ldrb.w	r3, [r4, #1053]	@ 0x41d
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d10a      	bne.n	8002d1e <USBD_DFU_Setup+0x212>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 8002d08:	2207      	movs	r2, #7
        hdfu->dev_status[1] = 1U;             /* bwPollTimeout = 1ms */
 8002d0a:	f884 3415 	strb.w	r3, [r4, #1045]	@ 0x415
        hdfu->dev_state = DFU_STATE_MANIFEST;
 8002d0e:	f884 241c 	strb.w	r2, [r4, #1052]	@ 0x41c
        hdfu->dev_status[2] = 0U;
 8002d12:	2300      	movs	r3, #0
          hdfu->dev_status[2] = 0U;
 8002d14:	f8a4 3416 	strh.w	r3, [r4, #1046]	@ 0x416
          hdfu->dev_status[4] = hdfu->dev_state;
 8002d18:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
 8002d1c:	e7cb      	b.n	8002cb6 <USBD_DFU_Setup+0x1aa>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1c9      	bne.n	8002cb6 <USBD_DFU_Setup+0x1aa>
 8002d22:	7882      	ldrb	r2, [r0, #2]
 8002d24:	0752      	lsls	r2, r2, #29
 8002d26:	d5c6      	bpl.n	8002cb6 <USBD_DFU_Setup+0x1aa>
          hdfu->dev_state = DFU_STATE_IDLE;
 8002d28:	2202      	movs	r2, #2
 8002d2a:	e7e4      	b.n	8002cf6 <USBD_DFU_Setup+0x1ea>
  if (hdfu->dev_state == DFU_STATE_ERROR)
 8002d2c:	f894 341c 	ldrb.w	r3, [r4, #1052]	@ 0x41c
 8002d30:	2b0a      	cmp	r3, #10
    hdfu->dev_state = DFU_STATE_IDLE;
 8002d32:	bf0b      	itete	eq
 8002d34:	2302      	moveq	r3, #2
    hdfu->dev_state = DFU_STATE_ERROR;
 8002d36:	230a      	movne	r3, #10
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 8002d38:	2200      	moveq	r2, #0
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 8002d3a:	220e      	movne	r2, #14
    hdfu->dev_state = DFU_STATE_IDLE;
 8002d3c:	bf0c      	ite	eq
 8002d3e:	f884 341c 	strbeq.w	r3, [r4, #1052]	@ 0x41c
    hdfu->dev_state = DFU_STATE_ERROR;
 8002d42:	f884 341c 	strbne.w	r3, [r4, #1052]	@ 0x41c
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 8002d46:	f8c4 2414 	str.w	r2, [r4, #1044]	@ 0x414
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 8002d4a:	f8a4 3418 	strh.w	r3, [r4, #1048]	@ 0x418
 8002d4e:	e71d      	b.n	8002b8c <USBD_DFU_Setup+0x80>
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 8002d50:	2201      	movs	r2, #1
 8002d52:	f204 411c 	addw	r1, r4, #1052	@ 0x41c
 8002d56:	e756      	b.n	8002c06 <USBD_DFU_Setup+0xfa>
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8002d58:	f894 241c 	ldrb.w	r2, [r4, #1052]	@ 0x41c
 8002d5c:	2a09      	cmp	r2, #9
 8002d5e:	f63f af15 	bhi.w	8002b8c <USBD_DFU_Setup+0x80>
 8002d62:	f46f 731b 	mvn.w	r3, #620	@ 0x26c
 8002d66:	4113      	asrs	r3, r2
 8002d68:	f013 0301 	ands.w	r3, r3, #1
 8002d6c:	f47f af0e 	bne.w	8002b8c <USBD_DFU_Setup+0x80>
    hdfu->dev_state = DFU_STATE_IDLE;
 8002d70:	2202      	movs	r2, #2
 8002d72:	f884 241c 	strb.w	r2, [r4, #1052]	@ 0x41c
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8002d76:	f8c4 3414 	str.w	r3, [r4, #1044]	@ 0x414
    hdfu->dev_status[4] = hdfu->dev_state;
 8002d7a:	f8a4 2418 	strh.w	r2, [r4, #1048]	@ 0x418
    hdfu->wblock_num = 0U;
 8002d7e:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
    hdfu->wlength = 0U;
 8002d82:	f8c4 3404 	str.w	r3, [r4, #1028]	@ 0x404
 8002d86:	e701      	b.n	8002b8c <USBD_DFU_Setup+0x80>
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 8002d88:	f8d0 02d0 	ldr.w	r0, [r0, #720]	@ 0x2d0
 8002d8c:	f7ff fe14 	bl	80029b8 <USBD_DFU_GetDfuFuncDesc>
  if ((hdfu == NULL) || (pDfuFunc == NULL))
 8002d90:	2800      	cmp	r0, #0
 8002d92:	f43f aefb 	beq.w	8002b8c <USBD_DFU_Setup+0x80>
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8002d96:	f894 241c 	ldrb.w	r2, [r4, #1052]	@ 0x41c
 8002d9a:	2a09      	cmp	r2, #9
 8002d9c:	d810      	bhi.n	8002dc0 <USBD_DFU_Setup+0x2b4>
 8002d9e:	f46f 731b 	mvn.w	r3, #620	@ 0x26c
 8002da2:	4113      	asrs	r3, r2
 8002da4:	f013 0301 	ands.w	r3, r3, #1
 8002da8:	d10a      	bne.n	8002dc0 <USBD_DFU_Setup+0x2b4>
    hdfu->dev_state = DFU_STATE_IDLE;
 8002daa:	2202      	movs	r2, #2
 8002dac:	f884 241c 	strb.w	r2, [r4, #1052]	@ 0x41c
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8002db0:	f8c4 3414 	str.w	r3, [r4, #1044]	@ 0x414
    hdfu->dev_status[4] = hdfu->dev_state;
 8002db4:	f8a4 2418 	strh.w	r2, [r4, #1048]	@ 0x418
    hdfu->wblock_num = 0U;
 8002db8:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
    hdfu->wlength = 0U;
 8002dbc:	f8c4 3404 	str.w	r3, [r4, #1028]	@ 0x404
  if ((pDfuFunc->bmAttributes & DFU_DETACH_MASK) != 0U)
 8002dc0:	7883      	ldrb	r3, [r0, #2]
 8002dc2:	071b      	lsls	r3, r3, #28
 8002dc4:	d506      	bpl.n	8002dd4 <USBD_DFU_Setup+0x2c8>
    (void)USBD_Stop(pdev);
 8002dc6:	4628      	mov	r0, r5
 8002dc8:	f000 f8ed 	bl	8002fa6 <USBD_Stop>
    (void)USBD_Start(pdev);
 8002dcc:	4628      	mov	r0, r5
 8002dce:	f000 f8e8 	bl	8002fa2 <USBD_Start>
 8002dd2:	e6db      	b.n	8002b8c <USBD_DFU_Setup+0x80>
    USBD_Delay((uint32_t)req->wValue);
 8002dd4:	8870      	ldrh	r0, [r6, #2]
 8002dd6:	f7fd fd4b 	bl	8000870 <HAL_Delay>
 8002dda:	e6d7      	b.n	8002b8c <USBD_DFU_Setup+0x80>
      switch (req->bRequest)
 8002ddc:	784b      	ldrb	r3, [r1, #1]
 8002dde:	2b0b      	cmp	r3, #11
 8002de0:	d822      	bhi.n	8002e28 <USBD_DFU_Setup+0x31c>
 8002de2:	a201      	add	r2, pc, #4	@ (adr r2, 8002de8 <USBD_DFU_Setup+0x2dc>)
 8002de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de8:	08002e19 	.word	0x08002e19
 8002dec:	08002b8d 	.word	0x08002b8d
 8002df0:	08002e29 	.word	0x08002e29
 8002df4:	08002e29 	.word	0x08002e29
 8002df8:	08002e29 	.word	0x08002e29
 8002dfc:	08002e29 	.word	0x08002e29
 8002e00:	08002e35 	.word	0x08002e35
 8002e04:	08002e29 	.word	0x08002e29
 8002e08:	08002e29 	.word	0x08002e29
 8002e0c:	08002e29 	.word	0x08002e29
 8002e10:	08002e57 	.word	0x08002e57
 8002e14:	08002e67 	.word	0x08002e67
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002e18:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8002e1c:	2b03      	cmp	r3, #3
 8002e1e:	d103      	bne.n	8002e28 <USBD_DFU_Setup+0x31c>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8002e20:	2202      	movs	r2, #2
 8002e22:	f10d 0106 	add.w	r1, sp, #6
 8002e26:	e6ee      	b.n	8002c06 <USBD_DFU_Setup+0xfa>
            USBD_CtlError(pdev, req);
 8002e28:	4631      	mov	r1, r6
 8002e2a:	4628      	mov	r0, r5
 8002e2c:	f000 fc69 	bl	8003702 <USBD_CtlError>
    return (uint8_t)USBD_FAIL;
 8002e30:	2003      	movs	r0, #3
 8002e32:	e6ac      	b.n	8002b8e <USBD_DFU_Setup+0x82>
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 8002e34:	884b      	ldrh	r3, [r1, #2]
 8002e36:	0a1b      	lsrs	r3, r3, #8
 8002e38:	2b21      	cmp	r3, #33	@ 0x21
 8002e3a:	f47f aea7 	bne.w	8002b8c <USBD_DFU_Setup+0x80>
            pbuf = (uint8_t *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 8002e3e:	f8d0 02d0 	ldr.w	r0, [r0, #720]	@ 0x2d0
 8002e42:	f7ff fdb9 	bl	80029b8 <USBD_DFU_GetDfuFuncDesc>
            if (pbuf != NULL)
 8002e46:	4601      	mov	r1, r0
 8002e48:	2800      	cmp	r0, #0
 8002e4a:	d0ed      	beq.n	8002e28 <USBD_DFU_Setup+0x31c>
              len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 8002e4c:	88f2      	ldrh	r2, [r6, #6]
              (void)USBD_CtlSendData(pdev, pbuf, len);
 8002e4e:	2a09      	cmp	r2, #9
 8002e50:	bf28      	it	cs
 8002e52:	2209      	movcs	r2, #9
 8002e54:	e6d7      	b.n	8002c06 <USBD_DFU_Setup+0xfa>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002e56:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8002e5a:	2b03      	cmp	r3, #3
 8002e5c:	d1e4      	bne.n	8002e28 <USBD_DFU_Setup+0x31c>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f504 6182 	add.w	r1, r4, #1040	@ 0x410
 8002e64:	e6cf      	b.n	8002c06 <USBD_DFU_Setup+0xfa>
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 8002e66:	788b      	ldrb	r3, [r1, #2]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1dd      	bne.n	8002e28 <USBD_DFU_Setup+0x31c>
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002e6c:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8002e70:	2a03      	cmp	r2, #3
 8002e72:	d1d9      	bne.n	8002e28 <USBD_DFU_Setup+0x31c>
              hdfu->alt_setting = (uint8_t)(req->wValue);
 8002e74:	f8c4 3410 	str.w	r3, [r4, #1040]	@ 0x410
 8002e78:	e688      	b.n	8002b8c <USBD_DFU_Setup+0x80>
 8002e7a:	bf00      	nop

08002e7c <USBD_DFU_DeInit>:
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8002e7c:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 8002e80:	eb00 0282 	add.w	r2, r0, r2, lsl #2
{
 8002e84:	b538      	push	{r3, r4, r5, lr}
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8002e86:	f8d2 32c0 	ldr.w	r3, [r2, #704]	@ 0x2c0
{
 8002e8a:	4604      	mov	r4, r0
 8002e8c:	2002      	movs	r0, #2
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8002e8e:	b1eb      	cbz	r3, 8002ecc <USBD_DFU_DeInit+0x50>
  hdfu->wblock_num = 0U;
 8002e90:	2500      	movs	r5, #0
  hdfu->dev_state = DFU_STATE_IDLE;
 8002e92:	f883 041c 	strb.w	r0, [r3, #1052]	@ 0x41c
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8002e96:	f883 5414 	strb.w	r5, [r3, #1044]	@ 0x414
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8002e9a:	f883 0418 	strb.w	r0, [r3, #1048]	@ 0x418
  hdfu->wblock_num = 0U;
 8002e9e:	f8c3 5400 	str.w	r5, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 8002ea2:	f8c3 5404 	str.w	r5, [r3, #1028]	@ 0x404
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8002ea6:	f8d2 32c4 	ldr.w	r3, [r2, #708]	@ 0x2c4
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	4798      	blx	r3
  USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8002eae:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8002eb2:	33b0      	adds	r3, #176	@ 0xb0
 8002eb4:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8002eb8:	f000 fe8a 	bl	8003bd0 <USBD_static_free>
  pdev->pClassDataCmsit[pdev->classId] = NULL;
 8002ebc:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8002ec0:	33b0      	adds	r3, #176	@ 0xb0
  return (uint8_t)USBD_OK;
 8002ec2:	4628      	mov	r0, r5
  pdev->pClassDataCmsit[pdev->classId] = NULL;
 8002ec4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
  pdev->pClassData = NULL;
 8002ec8:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
}
 8002ecc:	bd38      	pop	{r3, r4, r5, pc}
	...

08002ed0 <USBD_DFU_Init>:
{
 8002ed0:	b510      	push	{r4, lr}
 8002ed2:	4604      	mov	r4, r0
  hdfu = (USBD_DFU_HandleTypeDef *)USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 8002ed4:	f44f 6084 	mov.w	r0, #1056	@ 0x420
 8002ed8:	f000 fe76 	bl	8003bc8 <USBD_static_malloc>
  if (hdfu == NULL)
 8002edc:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8002ee0:	b920      	cbnz	r0, 8002eec <USBD_DFU_Init+0x1c>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8002ee2:	33b0      	adds	r3, #176	@ 0xb0
 8002ee4:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
    return (uint8_t)USBD_EMEM;
 8002ee8:	2002      	movs	r0, #2
}
 8002eea:	bd10      	pop	{r4, pc}
  pdev->pClassDataCmsit[pdev->classId] = (void *)hdfu;
 8002eec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8002ef0:	4a0e      	ldr	r2, [pc, #56]	@ (8002f2c <USBD_DFU_Init+0x5c>)
  pdev->pClassDataCmsit[pdev->classId] = (void *)hdfu;
 8002ef2:	f8c3 02c0 	str.w	r0, [r3, #704]	@ 0x2c0
  hdfu->dev_state = DFU_STATE_IDLE;
 8002ef6:	2102      	movs	r1, #2
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8002ef8:	f8c4 02bc 	str.w	r0, [r4, #700]	@ 0x2bc
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8002efc:	f8c0 2408 	str.w	r2, [r0, #1032]	@ 0x408
  hdfu->wblock_num = 0U;
 8002f00:	2200      	movs	r2, #0
  hdfu->dev_state = DFU_STATE_IDLE;
 8002f02:	f8a0 141c 	strh.w	r1, [r0, #1052]	@ 0x41c
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8002f06:	f8c0 2414 	str.w	r2, [r0, #1044]	@ 0x414
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8002f0a:	f8a0 1418 	strh.w	r1, [r0, #1048]	@ 0x418
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId])->Init() != USBD_OK)
 8002f0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
  hdfu->wblock_num = 0U;
 8002f12:	f8c0 2400 	str.w	r2, [r0, #1024]	@ 0x400
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId])->Init() != USBD_OK)
 8002f16:	685b      	ldr	r3, [r3, #4]
  hdfu->wlength = 0U;
 8002f18:	f8c0 2404 	str.w	r2, [r0, #1028]	@ 0x404
  hdfu->alt_setting = 0U;
 8002f1c:	f8c0 2410 	str.w	r2, [r0, #1040]	@ 0x410
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId])->Init() != USBD_OK)
 8002f20:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8002f22:	2800      	cmp	r0, #0
 8002f24:	bf14      	ite	ne
 8002f26:	2003      	movne	r0, #3
 8002f28:	2000      	moveq	r0, #0
 8002f2a:	e7de      	b.n	8002eea <USBD_DFU_Init+0x1a>
 8002f2c:	08005000 	.word	0x08005000

08002f30 <USBD_DFU_SOF>:
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
 8002f30:	2000      	movs	r0, #0
 8002f32:	4770      	bx	lr

08002f34 <USBD_DFU_RegisterMedia>:
  if (fops == NULL)
 8002f34:	b139      	cbz	r1, 8002f46 <USBD_DFU_RegisterMedia+0x12>
  pdev->pUserData[pdev->classId] = fops;
 8002f36:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8002f3a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8002f3e:	f8c0 12c4 	str.w	r1, [r0, #708]	@ 0x2c4
  return (uint8_t)USBD_OK;
 8002f42:	2000      	movs	r0, #0
 8002f44:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8002f46:	2003      	movs	r0, #3
}
 8002f48:	4770      	bx	lr

08002f4a <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8002f4a:	b178      	cbz	r0, 8002f6c <USBD_Init+0x22>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	f8c0 32b8 	str.w	r3, [r0, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8002f52:	f8c0 32c4 	str.w	r3, [r0, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8002f56:	f8c0 32d0 	str.w	r3, [r0, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8002f5a:	b109      	cbz	r1, 8002f60 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8002f5c:	f8c0 12b4 	str.w	r1, [r0, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002f60:	2301      	movs	r3, #1
 8002f62:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  pdev->id = id;
 8002f66:	7002      	strb	r2, [r0, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8002f68:	f000 bdee 	b.w	8003b48 <USBD_LL_Init>

  return ret;
}
 8002f6c:	2003      	movs	r0, #3
 8002f6e:	4770      	bx	lr

08002f70 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8002f70:	b513      	push	{r0, r1, r4, lr}
  uint16_t len = 0U;
 8002f72:	2300      	movs	r3, #0
{
 8002f74:	4604      	mov	r4, r0
  uint16_t len = 0U;
 8002f76:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8002f7a:	b181      	cbz	r1, 8002f9e <USBD_RegisterClass+0x2e>
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8002f7c:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
  pdev->pClass[0] = pclass;
 8002f7e:	f8c0 12b8 	str.w	r1, [r0, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8002f82:	b123      	cbz	r3, 8002f8e <USBD_RegisterClass+0x1e>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8002f84:	f10d 0006 	add.w	r0, sp, #6
 8002f88:	4798      	blx	r3
 8002f8a:	f8c4 02d0 	str.w	r0, [r4, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8002f8e:	f8d4 32d8 	ldr.w	r3, [r4, #728]	@ 0x2d8
 8002f92:	3301      	adds	r3, #1
 8002f94:	f8c4 32d8 	str.w	r3, [r4, #728]	@ 0x2d8

  return USBD_OK;
 8002f98:	2000      	movs	r0, #0
}
 8002f9a:	b002      	add	sp, #8
 8002f9c:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8002f9e:	2003      	movs	r0, #3
 8002fa0:	e7fb      	b.n	8002f9a <USBD_RegisterClass+0x2a>

08002fa2 <USBD_Start>:
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8002fa2:	f000 be1c 	b.w	8003bde <USBD_LL_Start>

08002fa6 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8002fa6:	b510      	push	{r4, lr}
 8002fa8:	4604      	mov	r4, r0
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 8002faa:	f000 fe21 	bl	8003bf0 <USBD_LL_Stop>
  }

  /* Reset the class ID */
  pdev->classId = 0U;
#else
  if (pdev->pClass[0] != NULL)
 8002fae:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 8002fb2:	b11b      	cbz	r3, 8002fbc <USBD_Stop+0x16>
  {
    (void)pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	7921      	ldrb	r1, [r4, #4]
 8002fb8:	4620      	mov	r0, r4
 8002fba:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return USBD_OK;
}
 8002fbc:	2000      	movs	r0, #0
 8002fbe:	bd10      	pop	{r4, pc}

08002fc0 <USBD_SetClassConfig>:
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8002fc0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8002fc4:	b10b      	cbz	r3, 8002fca <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4718      	bx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	4770      	bx	lr

08002fce <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8002fce:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8002fd0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	4798      	blx	r3
  {
    ret = USBD_FAIL;
 8002fd8:	2800      	cmp	r0, #0
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8002fda:	bf18      	it	ne
 8002fdc:	2003      	movne	r0, #3
 8002fde:	bd08      	pop	{r3, pc}

08002fe0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8002fe0:	b538      	push	{r3, r4, r5, lr}
 8002fe2:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002fe4:	f200 25aa 	addw	r5, r0, #682	@ 0x2aa
 8002fe8:	4628      	mov	r0, r5
 8002fea:	f000 fb7f 	bl	80036ec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8002fee:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8002ff0:	f894 12aa 	ldrb.w	r1, [r4, #682]	@ 0x2aa
  pdev->ep0_state = USBD_EP0_SETUP;
 8002ff4:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8002ff8:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	@ 0x2b0
 8002ffc:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8003000:	f001 031f 	and.w	r3, r1, #31
 8003004:	2b01      	cmp	r3, #1
 8003006:	d008      	beq.n	800301a <USBD_LL_SetupStage+0x3a>
 8003008:	2b02      	cmp	r3, #2
 800300a:	d00c      	beq.n	8003026 <USBD_LL_SetupStage+0x46>
 800300c:	b98b      	cbnz	r3, 8003032 <USBD_LL_SetupStage+0x52>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800300e:	4629      	mov	r1, r5
 8003010:	4620      	mov	r0, r4
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 8003012:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8003016:	f000 b941 	b.w	800329c <USBD_StdDevReq>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800301a:	4629      	mov	r1, r5
 800301c:	4620      	mov	r0, r4
}
 800301e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8003022:	f000 ba99 	b.w	8003558 <USBD_StdItfReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8003026:	4629      	mov	r1, r5
 8003028:	4620      	mov	r0, r4
}
 800302a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800302e:	f000 bac0 	b.w	80035b2 <USBD_StdEPReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8003032:	4620      	mov	r0, r4
 8003034:	f001 0180 	and.w	r1, r1, #128	@ 0x80
}
 8003038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800303c:	f000 bded 	b.w	8003c1a <USBD_LL_StallEP>

08003040 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8003040:	b570      	push	{r4, r5, r6, lr}
 8003042:	4604      	mov	r4, r0
 8003044:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
  uint8_t idx;

  if (epnum == 0U)
 8003046:	bb09      	cbnz	r1, 800308c <USBD_LL_DataOutStage+0x4c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003048:	f8d0 3294 	ldr.w	r3, [r0, #660]	@ 0x294
 800304c:	2b03      	cmp	r3, #3
 800304e:	d10c      	bne.n	800306a <USBD_LL_DataOutStage+0x2a>
    {
      if (pep->rem_length > pep->maxpacket)
 8003050:	e9d0 3257 	ldrd	r3, r2, [r0, #348]	@ 0x15c
 8003054:	4293      	cmp	r3, r2
 8003056:	d90a      	bls.n	800306e <USBD_LL_DataOutStage+0x2e>
      {
        pep->rem_length -= pep->maxpacket;
 8003058:	1a9b      	subs	r3, r3, r2

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800305a:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 800305c:	f8c0 315c 	str.w	r3, [r0, #348]	@ 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8003060:	bf28      	it	cs
 8003062:	461a      	movcs	r2, r3
 8003064:	4631      	mov	r1, r6
 8003066:	f000 fb95 	bl	8003794 <USBD_CtlContinueRx>
      }
    }
  }

  return USBD_OK;
}
 800306a:	2000      	movs	r0, #0
 800306c:	bd70      	pop	{r4, r5, r6, pc}
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800306e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003072:	2b03      	cmp	r3, #3
 8003074:	d106      	bne.n	8003084 <USBD_LL_DataOutStage+0x44>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8003076:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	b113      	cbz	r3, 8003084 <USBD_LL_DataOutStage+0x44>
              pdev->classId = idx;
 800307e:	f8c0 12d4 	str.w	r1, [r0, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8003082:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 8003084:	4620      	mov	r0, r4
 8003086:	f000 fb8d 	bl	80037a4 <USBD_CtlSendStatus>
 800308a:	e7ee      	b.n	800306a <USBD_LL_DataOutStage+0x2a>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800308c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003090:	2b03      	cmp	r3, #3
 8003092:	d1ea      	bne.n	800306a <USBD_LL_DataOutStage+0x2a>
        if (pdev->pClass[idx]->DataOut != NULL)
 8003094:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d0e5      	beq.n	800306a <USBD_LL_DataOutStage+0x2a>
          pdev->classId = idx;
 800309e:	2200      	movs	r2, #0
}
 80030a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          pdev->classId = idx;
 80030a4:	f8c0 22d4 	str.w	r2, [r0, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80030a8:	4718      	bx	r3

080030aa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80030aa:	b570      	push	{r4, r5, r6, lr}
 80030ac:	4604      	mov	r4, r0
 80030ae:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80030b0:	460d      	mov	r5, r1
 80030b2:	2900      	cmp	r1, #0
 80030b4:	d13d      	bne.n	8003132 <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80030b6:	f8d0 3294 	ldr.w	r3, [r0, #660]	@ 0x294
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d10e      	bne.n	80030dc <USBD_LL_DataInStage+0x32>
    {
      if (pep->rem_length > pep->maxpacket)
 80030be:	e9d0 3207 	ldrd	r3, r2, [r0, #28]
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d912      	bls.n	80030ec <USBD_LL_DataInStage+0x42>
      {
        pep->rem_length -= pep->maxpacket;
 80030c6:	1a9a      	subs	r2, r3, r2
 80030c8:	61c2      	str	r2, [r0, #28]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80030ca:	4631      	mov	r1, r6
 80030cc:	f000 fb4d 	bl	800376a <USBD_CtlContinueSendData>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80030d0:	462b      	mov	r3, r5
 80030d2:	462a      	mov	r2, r5
 80030d4:	4629      	mov	r1, r5
 80030d6:	4620      	mov	r0, r4
 80030d8:	f000 fdc3 	bl	8003c62 <USBD_LL_PrepareReceive>
          (void)USBD_CtlReceiveStatus(pdev);
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80030dc:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 80030e0:	b113      	cbz	r3, 80030e8 <USBD_LL_DataInStage+0x3e>
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 80030e2:	2300      	movs	r3, #0
 80030e4:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
      }
    }
  }

  return USBD_OK;
}
 80030e8:	2000      	movs	r0, #0
 80030ea:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->maxpacket == pep->rem_length) &&
 80030ec:	d10c      	bne.n	8003108 <USBD_LL_DataInStage+0x5e>
            (pep->total_length >= pep->maxpacket) &&
 80030ee:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d809      	bhi.n	8003108 <USBD_LL_DataInStage+0x5e>
            (pep->total_length >= pep->maxpacket) &&
 80030f4:	f8d0 3298 	ldr.w	r3, [r0, #664]	@ 0x298
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d205      	bcs.n	8003108 <USBD_LL_DataInStage+0x5e>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80030fc:	460a      	mov	r2, r1
 80030fe:	f000 fb34 	bl	800376a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8003102:	f8c4 5298 	str.w	r5, [r4, #664]	@ 0x298
 8003106:	e7e3      	b.n	80030d0 <USBD_LL_DataInStage+0x26>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003108:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 800310c:	2b03      	cmp	r3, #3
 800310e:	d108      	bne.n	8003122 <USBD_LL_DataInStage+0x78>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8003110:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	b123      	cbz	r3, 8003122 <USBD_LL_DataInStage+0x78>
              pdev->classId = 0U;
 8003118:	2200      	movs	r2, #0
 800311a:	f8c4 22d4 	str.w	r2, [r4, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800311e:	4620      	mov	r0, r4
 8003120:	4798      	blx	r3
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8003122:	2180      	movs	r1, #128	@ 0x80
 8003124:	4620      	mov	r0, r4
 8003126:	f000 fd78 	bl	8003c1a <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800312a:	4620      	mov	r0, r4
 800312c:	f000 fb45 	bl	80037ba <USBD_CtlReceiveStatus>
 8003130:	e7d4      	b.n	80030dc <USBD_LL_DataInStage+0x32>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003132:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003136:	2b03      	cmp	r3, #3
 8003138:	d1d6      	bne.n	80030e8 <USBD_LL_DataInStage+0x3e>
        if (pdev->pClass[idx]->DataIn != NULL)
 800313a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d0d1      	beq.n	80030e8 <USBD_LL_DataInStage+0x3e>
          pdev->classId = idx;
 8003144:	2200      	movs	r2, #0
}
 8003146:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          pdev->classId = idx;
 800314a:	f8c0 22d4 	str.w	r2, [r0, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800314e:	4718      	bx	r3

08003150 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8003150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_StatusTypeDef ret = USBD_OK;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003152:	2301      	movs	r3, #1
 8003154:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8003158:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
  pdev->ep0_state = USBD_EP0_IDLE;
 800315c:	2100      	movs	r1, #0
{
 800315e:	4604      	mov	r4, r0
  pdev->ep0_state = USBD_EP0_IDLE;
 8003160:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
  pdev->dev_config = 0U;
 8003164:	6041      	str	r1, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8003166:	f8c0 12a4 	str.w	r1, [r0, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800316a:	f880 12a0 	strb.w	r1, [r0, #672]	@ 0x2a0
  if (pdev->pClass[0] != NULL)
 800316e:	b9b3      	cbnz	r3, 800319e <USBD_LL_Reset+0x4e>
  USBD_StatusTypeDef ret = USBD_OK;
 8003170:	2600      	movs	r6, #0
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003172:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003174:	2540      	movs	r5, #64	@ 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003176:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003178:	2701      	movs	r7, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800317a:	2340      	movs	r3, #64	@ 0x40
 800317c:	4620      	mov	r0, r4
 800317e:	f000 fd40 	bl	8003c02 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003182:	f8a4 7164 	strh.w	r7, [r4, #356]	@ 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003186:	f8c4 5160 	str.w	r5, [r4, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800318a:	462b      	mov	r3, r5
 800318c:	2200      	movs	r2, #0
 800318e:	2180      	movs	r1, #128	@ 0x80
 8003190:	4620      	mov	r0, r4
 8003192:	f000 fd36 	bl	8003c02 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8003196:	84a7      	strh	r7, [r4, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003198:	6225      	str	r5, [r4, #32]

  return ret;
}
 800319a:	4630      	mov	r0, r6
 800319c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pdev->pClass[0]->DeInit != NULL)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0e5      	beq.n	8003170 <USBD_LL_Reset+0x20>
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80031a4:	4798      	blx	r3
 80031a6:	2800      	cmp	r0, #0
 80031a8:	d0e2      	beq.n	8003170 <USBD_LL_Reset+0x20>
        ret = USBD_FAIL;
 80031aa:	2603      	movs	r6, #3
 80031ac:	e7e1      	b.n	8003172 <USBD_LL_Reset+0x22>

080031ae <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80031ae:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80031b0:	2000      	movs	r0, #0
 80031b2:	4770      	bx	lr

080031b4 <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80031b4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80031b8:	2b04      	cmp	r3, #4
  {
    pdev->dev_old_state = pdev->dev_state;
 80031ba:	bf1e      	ittt	ne
 80031bc:	f890 329c 	ldrbne.w	r3, [r0, #668]	@ 0x29c
 80031c0:	b2db      	uxtbne	r3, r3
 80031c2:	f880 329d 	strbne.w	r3, [r0, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80031c6:	2304      	movs	r3, #4
 80031c8:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 80031cc:	2000      	movs	r0, #0
 80031ce:	4770      	bx	lr

080031d0 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80031d0:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80031d4:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 80031d6:	bf02      	ittt	eq
 80031d8:	f890 329d 	ldrbeq.w	r3, [r0, #669]	@ 0x29d
 80031dc:	b2db      	uxtbeq	r3, r3
 80031de:	f880 329c 	strbeq.w	r3, [r0, #668]	@ 0x29c
  }

  return USBD_OK;
}
 80031e2:	2000      	movs	r0, #0
 80031e4:	4770      	bx	lr

080031e6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80031e6:	b508      	push	{r3, lr}
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80031e8:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 80031ec:	2a03      	cmp	r2, #3
 80031ee:	d105      	bne.n	80031fc <USBD_LL_SOF+0x16>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80031f0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80031f4:	b113      	cbz	r3, 80031fc <USBD_LL_SOF+0x16>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80031f6:	69db      	ldr	r3, [r3, #28]
 80031f8:	b103      	cbz	r3, 80031fc <USBD_LL_SOF+0x16>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80031fa:	4798      	blx	r3
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 80031fc:	2000      	movs	r0, #0
 80031fe:	bd08      	pop	{r3, pc}

08003200 <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass[pdev->classId] == NULL)
 8003200:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 8003204:	32ae      	adds	r2, #174	@ 0xae
{
 8003206:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 8003208:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800320c:	b14a      	cbz	r2, 8003222 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800320e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003212:	2b03      	cmp	r3, #3
 8003214:	d101      	bne.n	800321a <USBD_LL_IsoINIncomplete+0x1a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8003216:	6a13      	ldr	r3, [r2, #32]
 8003218:	b90b      	cbnz	r3, 800321e <USBD_LL_IsoINIncomplete+0x1e>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800321a:	2000      	movs	r0, #0
}
 800321c:	bd08      	pop	{r3, pc}
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800321e:	4798      	blx	r3
 8003220:	e7fb      	b.n	800321a <USBD_LL_IsoINIncomplete+0x1a>
    return USBD_FAIL;
 8003222:	2003      	movs	r0, #3
 8003224:	e7fa      	b.n	800321c <USBD_LL_IsoINIncomplete+0x1c>

08003226 <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass[pdev->classId] == NULL)
 8003226:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 800322a:	32ae      	adds	r2, #174	@ 0xae
{
 800322c:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 800322e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8003232:	b14a      	cbz	r2, 8003248 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003234:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003238:	2b03      	cmp	r3, #3
 800323a:	d101      	bne.n	8003240 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800323c:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 800323e:	b90b      	cbnz	r3, 8003244 <USBD_LL_IsoOUTIncomplete+0x1e>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8003240:	2000      	movs	r0, #0
}
 8003242:	bd08      	pop	{r3, pc}
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8003244:	4798      	blx	r3
 8003246:	e7fb      	b.n	8003240 <USBD_LL_IsoOUTIncomplete+0x1a>
    return USBD_FAIL;
 8003248:	2003      	movs	r0, #3
 800324a:	e7fa      	b.n	8003242 <USBD_LL_IsoOUTIncomplete+0x1c>

0800324c <USBD_LL_DevConnected>:
  * @brief  USBD_LL_DevConnected
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
 800324c:	2000      	movs	r0, #0
 800324e:	4770      	bx	lr

08003250 <USBD_LL_DevDisconnected>:
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  USBD_StatusTypeDef   ret = USBD_OK;

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003250:	2201      	movs	r2, #1
{
 8003252:	b508      	push	{r3, lr}
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003254:	f880 229c 	strb.w	r2, [r0, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8003258:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
 800325c:	b90a      	cbnz	r2, 8003262 <USBD_LL_DevDisconnected+0x12>
  USBD_StatusTypeDef   ret = USBD_OK;
 800325e:	2000      	movs	r0, #0
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8003260:	bd08      	pop	{r3, pc}
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8003262:	6852      	ldr	r2, [r2, #4]
 8003264:	7901      	ldrb	r1, [r0, #4]
 8003266:	4790      	blx	r2
 8003268:	2800      	cmp	r0, #0
 800326a:	d0f8      	beq.n	800325e <USBD_LL_DevDisconnected+0xe>
      ret = USBD_FAIL;
 800326c:	2003      	movs	r0, #3
 800326e:	e7f7      	b.n	8003260 <USBD_LL_DevDisconnected+0x10>

08003270 <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8003270:	2000      	movs	r0, #0
 8003272:	4770      	bx	lr

08003274 <USBD_CoreFindEP>:
  *         return the class index relative to the selected endpoint
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
 8003274:	2000      	movs	r0, #0
 8003276:	4770      	bx	lr

08003278 <USBD_GetNextDesc>:
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 8003278:	7802      	ldrb	r2, [r0, #0]
 800327a:	880b      	ldrh	r3, [r1, #0]
 800327c:	4413      	add	r3, r2
 800327e:	800b      	strh	r3, [r1, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);

  return (pnext);
}
 8003280:	4410      	add	r0, r2
 8003282:	4770      	bx	lr

08003284 <USBD_CtlError.constprop.0>:
  *         Handle USB low level Error
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
 8003284:	b510      	push	{r4, lr}
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8003286:	2180      	movs	r1, #128	@ 0x80
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
 8003288:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800328a:	f000 fcc6 	bl	8003c1a <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800328e:	4620      	mov	r0, r4
 8003290:	2100      	movs	r1, #0
}
 8003292:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 8003296:	f000 bcc0 	b.w	8003c1a <USBD_LL_StallEP>
	...

0800329c <USBD_StdDevReq>:
{
 800329c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800329e:	780b      	ldrb	r3, [r1, #0]
 80032a0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80032a4:	2b20      	cmp	r3, #32
{
 80032a6:	4604      	mov	r4, r0
 80032a8:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80032aa:	d012      	beq.n	80032d2 <USBD_StdDevReq+0x36>
 80032ac:	2b40      	cmp	r3, #64	@ 0x40
 80032ae:	d010      	beq.n	80032d2 <USBD_StdDevReq+0x36>
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d163      	bne.n	800337c <USBD_StdDevReq+0xe0>
      switch (req->bRequest)
 80032b4:	784b      	ldrb	r3, [r1, #1]
 80032b6:	2b09      	cmp	r3, #9
 80032b8:	d860      	bhi.n	800337c <USBD_StdDevReq+0xe0>
 80032ba:	e8df f013 	tbh	[pc, r3, lsl #1]
 80032be:	011d      	.short	0x011d
 80032c0:	005f013f 	.word	0x005f013f
 80032c4:	005f0131 	.word	0x005f0131
 80032c8:	0016009f 	.word	0x0016009f
 80032cc:	0107005f 	.word	0x0107005f
 80032d0:	00bb      	.short	0x00bb
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80032d2:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80032d6:	33ae      	adds	r3, #174	@ 0xae
 80032d8:	4629      	mov	r1, r5
 80032da:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	4620      	mov	r0, r4
}
 80032e2:	b003      	add	sp, #12
 80032e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80032e8:	4718      	bx	r3
  uint16_t len = 0U;
 80032ea:	2300      	movs	r3, #0
 80032ec:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 80032f0:	884b      	ldrh	r3, [r1, #2]
 80032f2:	0a1a      	lsrs	r2, r3, #8
 80032f4:	3a01      	subs	r2, #1
 80032f6:	2a06      	cmp	r2, #6
 80032f8:	d840      	bhi.n	800337c <USBD_StdDevReq+0xe0>
 80032fa:	e8df f002 	tbb	[pc, r2]
 80032fe:	1c04      	.short	0x1c04
 8003300:	6a3f3f29 	.word	0x6a3f3f29
 8003304:	74          	.byte	0x74
 8003305:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003306:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800330a:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800330c:	7c20      	ldrb	r0, [r4, #16]
 800330e:	f10d 0106 	add.w	r1, sp, #6
 8003312:	4798      	blx	r3
  if (req->wLength != 0U)
 8003314:	88ea      	ldrh	r2, [r5, #6]
 8003316:	2a00      	cmp	r2, #0
 8003318:	f000 80bb 	beq.w	8003492 <USBD_StdDevReq+0x1f6>
    if (len != 0U)
 800331c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8003320:	b363      	cbz	r3, 800337c <USBD_StdDevReq+0xe0>
      len = MIN(len, req->wLength);
 8003322:	429a      	cmp	r2, r3
 8003324:	bf28      	it	cs
 8003326:	461a      	movcs	r2, r3
 8003328:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800332c:	4601      	mov	r1, r0
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800332e:	4620      	mov	r0, r4
 8003330:	f000 fa0e 	bl	8003750 <USBD_CtlSendData>
        break;
 8003334:	e025      	b.n	8003382 <USBD_StdDevReq+0xe6>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003336:	7c02      	ldrb	r2, [r0, #16]
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8003338:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800333c:	b932      	cbnz	r2, 800334c <USBD_StdDevReq+0xb0>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800333e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8003340:	f10d 0006 	add.w	r0, sp, #6
 8003344:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003346:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003348:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800334a:	e7e3      	b.n	8003314 <USBD_StdDevReq+0x78>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800334c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800334e:	e7f7      	b.n	8003340 <USBD_StdDevReq+0xa4>
      switch ((uint8_t)(req->wValue))
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b05      	cmp	r3, #5
 8003354:	d804      	bhi.n	8003360 <USBD_StdDevReq+0xc4>
 8003356:	e8df f003 	tbb	[pc, r3]
 800335a:	180c      	.short	0x180c
 800335c:	2824201c 	.word	0x2824201c
 8003360:	f500 772d 	add.w	r7, r0, #692	@ 0x2b4
          for (uint32_t idx = 0U; (idx < pdev->NumClasses); idx++)
 8003364:	2600      	movs	r6, #0
 8003366:	f8d4 32d8 	ldr.w	r3, [r4, #728]	@ 0x2d8
 800336a:	429e      	cmp	r6, r3
 800336c:	d321      	bcc.n	80033b2 <USBD_StdDevReq+0x116>
 800336e:	2000      	movs	r0, #0
 8003370:	e7d0      	b.n	8003314 <USBD_StdDevReq+0x78>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8003372:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8003376:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1c7      	bne.n	800330c <USBD_StdDevReq+0x70>
      USBD_CtlError(pdev, req);
 800337c:	4620      	mov	r0, r4
 800337e:	f7ff ff81 	bl	8003284 <USBD_CtlError.constprop.0>
  USBD_StatusTypeDef ret = USBD_OK;
 8003382:	2500      	movs	r5, #0
}
 8003384:	4628      	mov	r0, r5
 8003386:	b003      	add	sp, #12
 8003388:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800338a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	e7f2      	b.n	8003378 <USBD_StdDevReq+0xdc>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8003392:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	e7ee      	b.n	8003378 <USBD_StdDevReq+0xdc>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800339a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	e7ea      	b.n	8003378 <USBD_StdDevReq+0xdc>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80033a2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	e7e6      	b.n	8003378 <USBD_StdDevReq+0xdc>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80033aa:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	e7e2      	b.n	8003378 <USBD_StdDevReq+0xdc>
            if (pdev->pClass[idx]->GetUsrStrDescriptor != NULL)
 80033b2:	f857 3f04 	ldr.w	r3, [r7, #4]!
 80033b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b8:	b90b      	cbnz	r3, 80033be <USBD_StdDevReq+0x122>
          for (uint32_t idx = 0U; (idx < pdev->NumClasses); idx++)
 80033ba:	3601      	adds	r6, #1
 80033bc:	e7d3      	b.n	8003366 <USBD_StdDevReq+0xca>
              pbuf = pdev->pClass[idx]->GetUsrStrDescriptor(pdev, LOBYTE(req->wValue), &len);
 80033be:	78a9      	ldrb	r1, [r5, #2]
              pdev->classId = idx;
 80033c0:	f8c4 62d4 	str.w	r6, [r4, #724]	@ 0x2d4
              pbuf = pdev->pClass[idx]->GetUsrStrDescriptor(pdev, LOBYTE(req->wValue), &len);
 80033c4:	f10d 0206 	add.w	r2, sp, #6
 80033c8:	4620      	mov	r0, r4
 80033ca:	4798      	blx	r3
              if (pbuf == NULL) /* This means that no class recognized the string index */
 80033cc:	2800      	cmp	r0, #0
 80033ce:	d1a1      	bne.n	8003314 <USBD_StdDevReq+0x78>
 80033d0:	e7f3      	b.n	80033ba <USBD_StdDevReq+0x11e>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80033d2:	7c03      	ldrb	r3, [r0, #16]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1d1      	bne.n	800337c <USBD_StdDevReq+0xe0>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80033d8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80033dc:	f10d 0006 	add.w	r0, sp, #6
 80033e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033e2:	4798      	blx	r3
  if (err != 0U)
 80033e4:	e796      	b.n	8003314 <USBD_StdDevReq+0x78>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80033e6:	7c03      	ldrb	r3, [r0, #16]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1c7      	bne.n	800337c <USBD_StdDevReq+0xe0>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80033ec:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80033f0:	f10d 0006 	add.w	r0, sp, #6
 80033f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f6:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80033f8:	2307      	movs	r3, #7
 80033fa:	e7a5      	b.n	8003348 <USBD_StdDevReq+0xac>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80033fc:	888b      	ldrh	r3, [r1, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1bc      	bne.n	800337c <USBD_StdDevReq+0xe0>
 8003402:	88cb      	ldrh	r3, [r1, #6]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1b9      	bne.n	800337c <USBD_StdDevReq+0xe0>
 8003408:	884d      	ldrh	r5, [r1, #2]
 800340a:	2d7f      	cmp	r5, #127	@ 0x7f
 800340c:	d8b6      	bhi.n	800337c <USBD_StdDevReq+0xe0>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800340e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003412:	2b03      	cmp	r3, #3
 8003414:	d0b2      	beq.n	800337c <USBD_StdDevReq+0xe0>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8003416:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8003418:	f880 129e 	strb.w	r1, [r0, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800341c:	f000 fc0f 	bl	8003c3e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8003420:	4620      	mov	r0, r4
 8003422:	f000 f9bf 	bl	80037a4 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8003426:	b11d      	cbz	r5, 8003430 <USBD_StdDevReq+0x194>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003428:	2302      	movs	r3, #2
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800342a:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800342e:	e7a8      	b.n	8003382 <USBD_StdDevReq+0xe6>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8003430:	2301      	movs	r3, #1
 8003432:	e7fa      	b.n	800342a <USBD_StdDevReq+0x18e>
  cfgidx = (uint8_t)(req->wValue);
 8003434:	7889      	ldrb	r1, [r1, #2]
 8003436:	4d47      	ldr	r5, [pc, #284]	@ (8003554 <USBD_StdDevReq+0x2b8>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8003438:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800343a:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800343c:	d903      	bls.n	8003446 <USBD_StdDevReq+0x1aa>
    USBD_CtlError(pdev, req);
 800343e:	f7ff ff21 	bl	8003284 <USBD_CtlError.constprop.0>
    return USBD_FAIL;
 8003442:	2503      	movs	r5, #3
 8003444:	e79e      	b.n	8003384 <USBD_StdDevReq+0xe8>
  switch (pdev->dev_state)
 8003446:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800344a:	2b02      	cmp	r3, #2
 800344c:	b2de      	uxtb	r6, r3
 800344e:	d008      	beq.n	8003462 <USBD_StdDevReq+0x1c6>
 8003450:	2e03      	cmp	r6, #3
 8003452:	d017      	beq.n	8003484 <USBD_StdDevReq+0x1e8>
      USBD_CtlError(pdev, req);
 8003454:	f7ff ff16 	bl	8003284 <USBD_CtlError.constprop.0>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8003458:	7829      	ldrb	r1, [r5, #0]
 800345a:	4620      	mov	r0, r4
 800345c:	f7ff fdb7 	bl	8002fce <USBD_ClrClassConfig>
      break;
 8003460:	e7ef      	b.n	8003442 <USBD_StdDevReq+0x1a6>
      if (cfgidx != 0U)
 8003462:	b1b1      	cbz	r1, 8003492 <USBD_StdDevReq+0x1f6>
        pdev->dev_config = cfgidx;
 8003464:	2101      	movs	r1, #1
 8003466:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8003468:	f7ff fdaa 	bl	8002fc0 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800346c:	4605      	mov	r5, r0
          USBD_CtlError(pdev, req);
 800346e:	4620      	mov	r0, r4
        if (ret != USBD_OK)
 8003470:	b125      	cbz	r5, 800347c <USBD_StdDevReq+0x1e0>
          USBD_CtlError(pdev, req);
 8003472:	f7ff ff07 	bl	8003284 <USBD_CtlError.constprop.0>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8003476:	f884 629c 	strb.w	r6, [r4, #668]	@ 0x29c
 800347a:	e783      	b.n	8003384 <USBD_StdDevReq+0xe8>
          (void)USBD_CtlSendStatus(pdev);
 800347c:	f000 f992 	bl	80037a4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8003480:	2303      	movs	r3, #3
 8003482:	e7d2      	b.n	800342a <USBD_StdDevReq+0x18e>
      if (cfgidx == 0U)
 8003484:	b949      	cbnz	r1, 800349a <USBD_StdDevReq+0x1fe>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003486:	2302      	movs	r3, #2
 8003488:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800348c:	6041      	str	r1, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800348e:	f7ff fd9e 	bl	8002fce <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8003492:	4620      	mov	r0, r4
 8003494:	f000 f986 	bl	80037a4 <USBD_CtlSendStatus>
 8003498:	e773      	b.n	8003382 <USBD_StdDevReq+0xe6>
      else if (cfgidx != pdev->dev_config)
 800349a:	6841      	ldr	r1, [r0, #4]
 800349c:	2901      	cmp	r1, #1
 800349e:	d0f8      	beq.n	8003492 <USBD_StdDevReq+0x1f6>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80034a0:	b2c9      	uxtb	r1, r1
 80034a2:	f7ff fd94 	bl	8002fce <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80034a6:	7829      	ldrb	r1, [r5, #0]
 80034a8:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80034aa:	4620      	mov	r0, r4
 80034ac:	f7ff fd88 	bl	8002fc0 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 80034b0:	4605      	mov	r5, r0
 80034b2:	2800      	cmp	r0, #0
 80034b4:	d0ed      	beq.n	8003492 <USBD_StdDevReq+0x1f6>
          USBD_CtlError(pdev, req);
 80034b6:	4620      	mov	r0, r4
 80034b8:	f7ff fee4 	bl	8003284 <USBD_CtlError.constprop.0>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80034bc:	7921      	ldrb	r1, [r4, #4]
 80034be:	4620      	mov	r0, r4
 80034c0:	f7ff fd85 	bl	8002fce <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80034c4:	2302      	movs	r3, #2
 80034c6:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 80034ca:	e75b      	b.n	8003384 <USBD_StdDevReq+0xe8>
  if (req->wLength != 1U)
 80034cc:	88ca      	ldrh	r2, [r1, #6]
 80034ce:	2a01      	cmp	r2, #1
 80034d0:	f47f af54 	bne.w	800337c <USBD_StdDevReq+0xe0>
    switch (pdev->dev_state)
 80034d4:	f890 129c 	ldrb.w	r1, [r0, #668]	@ 0x29c
 80034d8:	2902      	cmp	r1, #2
 80034da:	b2cb      	uxtb	r3, r1
 80034dc:	d807      	bhi.n	80034ee <USBD_StdDevReq+0x252>
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f43f af4c 	beq.w	800337c <USBD_StdDevReq+0xe0>
        pdev->dev_default_config = 0U;
 80034e4:	4601      	mov	r1, r0
 80034e6:	2300      	movs	r3, #0
 80034e8:	f841 3f08 	str.w	r3, [r1, #8]!
 80034ec:	e71f      	b.n	800332e <USBD_StdDevReq+0x92>
    switch (pdev->dev_state)
 80034ee:	2b03      	cmp	r3, #3
 80034f0:	f47f af44 	bne.w	800337c <USBD_StdDevReq+0xe0>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80034f4:	1d01      	adds	r1, r0, #4
 80034f6:	e71a      	b.n	800332e <USBD_StdDevReq+0x92>
  switch (pdev->dev_state)
 80034f8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80034fc:	3b01      	subs	r3, #1
 80034fe:	2b02      	cmp	r3, #2
 8003500:	f63f af3c 	bhi.w	800337c <USBD_StdDevReq+0xe0>
      if (req->wLength != 0x2U)
 8003504:	88ca      	ldrh	r2, [r1, #6]
 8003506:	2a02      	cmp	r2, #2
 8003508:	f47f af38 	bne.w	800337c <USBD_StdDevReq+0xe0>
      if (pdev->dev_remote_wakeup != 0U)
 800350c:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 8003510:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8003512:	2b00      	cmp	r3, #0
 8003514:	bf0c      	ite	eq
 8003516:	2301      	moveq	r3, #1
 8003518:	2303      	movne	r3, #3
 800351a:	f841 3f0c 	str.w	r3, [r1, #12]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800351e:	e706      	b.n	800332e <USBD_StdDevReq+0x92>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003520:	884b      	ldrh	r3, [r1, #2]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d102      	bne.n	800352c <USBD_StdDevReq+0x290>
        pdev->dev_remote_wakeup = 0U;
 8003526:	f8c4 32a4 	str.w	r3, [r4, #676]	@ 0x2a4
 800352a:	e7b2      	b.n	8003492 <USBD_StdDevReq+0x1f6>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800352c:	2b02      	cmp	r3, #2
 800352e:	f47f af25 	bne.w	800337c <USBD_StdDevReq+0xe0>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8003532:	888b      	ldrh	r3, [r1, #4]
 8003534:	0a1b      	lsrs	r3, r3, #8
 8003536:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800353a:	e7aa      	b.n	8003492 <USBD_StdDevReq+0x1f6>
  switch (pdev->dev_state)
 800353c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003540:	3b01      	subs	r3, #1
 8003542:	2b02      	cmp	r3, #2
 8003544:	f63f af1a 	bhi.w	800337c <USBD_StdDevReq+0xe0>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003548:	884b      	ldrh	r3, [r1, #2]
 800354a:	2b01      	cmp	r3, #1
 800354c:	f47f af19 	bne.w	8003382 <USBD_StdDevReq+0xe6>
        pdev->dev_remote_wakeup = 0U;
 8003550:	2300      	movs	r3, #0
 8003552:	e7e8      	b.n	8003526 <USBD_StdDevReq+0x28a>
 8003554:	20000243 	.word	0x20000243

08003558 <USBD_StdItfReq>:
{
 8003558:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800355a:	780b      	ldrb	r3, [r1, #0]
 800355c:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8003560:	065b      	lsls	r3, r3, #25
{
 8003562:	4604      	mov	r4, r0
 8003564:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003566:	d501      	bpl.n	800356c <USBD_StdItfReq+0x14>
 8003568:	2a40      	cmp	r2, #64	@ 0x40
 800356a:	d11e      	bne.n	80035aa <USBD_StdItfReq+0x52>
      switch (pdev->dev_state)
 800356c:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8003570:	3b01      	subs	r3, #1
 8003572:	2b02      	cmp	r3, #2
 8003574:	d819      	bhi.n	80035aa <USBD_StdItfReq+0x52>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8003576:	7929      	ldrb	r1, [r5, #4]
 8003578:	2901      	cmp	r1, #1
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800357a:	4620      	mov	r0, r4
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800357c:	d816      	bhi.n	80035ac <USBD_StdItfReq+0x54>
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800357e:	f7ff fe77 	bl	8003270 <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8003582:	b980      	cbnz	r0, 80035a6 <USBD_StdItfReq+0x4e>
              if (pdev->pClass[idx]->Setup != NULL)
 8003584:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	b163      	cbz	r3, 80035a6 <USBD_StdItfReq+0x4e>
                pdev->classId = idx;
 800358c:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8003590:	4629      	mov	r1, r5
 8003592:	4620      	mov	r0, r4
 8003594:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8003596:	88eb      	ldrh	r3, [r5, #6]
 8003598:	b923      	cbnz	r3, 80035a4 <USBD_StdItfReq+0x4c>
 800359a:	b918      	cbnz	r0, 80035a4 <USBD_StdItfReq+0x4c>
              (void)USBD_CtlSendStatus(pdev);
 800359c:	4620      	mov	r0, r4
 800359e:	f000 f901 	bl	80037a4 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 80035a2:	2000      	movs	r0, #0
}
 80035a4:	bd38      	pop	{r3, r4, r5, pc}
                ret = USBD_FAIL;
 80035a6:	2003      	movs	r0, #3
 80035a8:	e7f5      	b.n	8003596 <USBD_StdItfReq+0x3e>
          USBD_CtlError(pdev, req);
 80035aa:	4620      	mov	r0, r4
            USBD_CtlError(pdev, req);
 80035ac:	f7ff fe6a 	bl	8003284 <USBD_CtlError.constprop.0>
 80035b0:	e7f7      	b.n	80035a2 <USBD_StdItfReq+0x4a>

080035b2 <USBD_StdEPReq>:
{
 80035b2:	b570      	push	{r4, r5, r6, lr}
 80035b4:	780b      	ldrb	r3, [r1, #0]
  ep_addr = LOBYTE(req->wIndex);
 80035b6:	888a      	ldrh	r2, [r1, #4]
 80035b8:	790e      	ldrb	r6, [r1, #4]
 80035ba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80035be:	2b20      	cmp	r3, #32
{
 80035c0:	4604      	mov	r4, r0
 80035c2:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80035c4:	d053      	beq.n	800366e <USBD_StdEPReq+0xbc>
 80035c6:	2b40      	cmp	r3, #64	@ 0x40
 80035c8:	d051      	beq.n	800366e <USBD_StdEPReq+0xbc>
 80035ca:	bb63      	cbnz	r3, 8003626 <USBD_StdEPReq+0x74>
      switch (req->bRequest)
 80035cc:	784b      	ldrb	r3, [r1, #1]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d03b      	beq.n	800364a <USBD_StdEPReq+0x98>
 80035d2:	2b03      	cmp	r3, #3
 80035d4:	d020      	beq.n	8003618 <USBD_StdEPReq+0x66>
 80035d6:	bb33      	cbnz	r3, 8003626 <USBD_StdEPReq+0x74>
          switch (pdev->dev_state)
 80035d8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80035dc:	2b02      	cmp	r3, #2
 80035de:	b2d9      	uxtb	r1, r3
 80035e0:	d061      	beq.n	80036a6 <USBD_StdEPReq+0xf4>
 80035e2:	2903      	cmp	r1, #3
 80035e4:	d11f      	bne.n	8003626 <USBD_StdEPReq+0x74>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80035e6:	f006 030f 	and.w	r3, r6, #15
              if ((ep_addr & 0x80U) == 0x80U)
 80035ea:	f012 0f80 	tst.w	r2, #128	@ 0x80
 80035ee:	f04f 0214 	mov.w	r2, #20
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80035f2:	fb02 0303 	mla	r3, r2, r3, r0
              if ((ep_addr & 0x80U) == 0x80U)
 80035f6:	d065      	beq.n	80036c4 <USBD_StdEPReq+0x112>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80035f8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80035fa:	b1a3      	cbz	r3, 8003626 <USBD_StdEPReq+0x74>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80035fc:	f006 057f 	and.w	r5, r6, #127	@ 0x7f
 8003600:	3501      	adds	r5, #1
 8003602:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8003606:	eb00 0585 	add.w	r5, r0, r5, lsl #2
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800360a:	0673      	lsls	r3, r6, #25
 800360c:	d166      	bne.n	80036dc <USBD_StdEPReq+0x12a>
{
 800360e:	2300      	movs	r3, #0
                pep->status = 0x0000U;
 8003610:	602b      	str	r3, [r5, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8003612:	2202      	movs	r2, #2
 8003614:	4629      	mov	r1, r5
 8003616:	e051      	b.n	80036bc <USBD_StdEPReq+0x10a>
          switch (pdev->dev_state)
 8003618:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800361c:	2b02      	cmp	r3, #2
 800361e:	b2da      	uxtb	r2, r3
 8003620:	d037      	beq.n	8003692 <USBD_StdEPReq+0xe0>
 8003622:	2a03      	cmp	r2, #3
 8003624:	d003      	beq.n	800362e <USBD_StdEPReq+0x7c>
              USBD_CtlError(pdev, req);
 8003626:	4620      	mov	r0, r4
 8003628:	f7ff fe2c 	bl	8003284 <USBD_CtlError.constprop.0>
              break;
 800362c:	e00b      	b.n	8003646 <USBD_StdEPReq+0x94>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800362e:	884b      	ldrh	r3, [r1, #2]
 8003630:	b933      	cbnz	r3, 8003640 <USBD_StdEPReq+0x8e>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8003632:	0671      	lsls	r1, r6, #25
 8003634:	d004      	beq.n	8003640 <USBD_StdEPReq+0x8e>
 8003636:	88eb      	ldrh	r3, [r5, #6]
 8003638:	b913      	cbnz	r3, 8003640 <USBD_StdEPReq+0x8e>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800363a:	4631      	mov	r1, r6
 800363c:	f000 faed 	bl	8003c1a <USBD_LL_StallEP>
              (void)USBD_CtlSendStatus(pdev);
 8003640:	4620      	mov	r0, r4
 8003642:	f000 f8af 	bl	80037a4 <USBD_CtlSendStatus>
}
 8003646:	2000      	movs	r0, #0
 8003648:	bd70      	pop	{r4, r5, r6, pc}
          switch (pdev->dev_state)
 800364a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800364e:	2b02      	cmp	r3, #2
 8003650:	b2da      	uxtb	r2, r3
 8003652:	d01e      	beq.n	8003692 <USBD_StdEPReq+0xe0>
 8003654:	2a03      	cmp	r2, #3
 8003656:	d1e6      	bne.n	8003626 <USBD_StdEPReq+0x74>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003658:	884b      	ldrh	r3, [r1, #2]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1f3      	bne.n	8003646 <USBD_StdEPReq+0x94>
                if ((ep_addr & 0x7FU) != 0x00U)
 800365e:	0673      	lsls	r3, r6, #25
 8003660:	d002      	beq.n	8003668 <USBD_StdEPReq+0xb6>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8003662:	4631      	mov	r1, r6
 8003664:	f000 fae2 	bl	8003c2c <USBD_LL_ClearStallEP>
                (void)USBD_CtlSendStatus(pdev);
 8003668:	4620      	mov	r0, r4
 800366a:	f000 f89b 	bl	80037a4 <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800366e:	4631      	mov	r1, r6
 8003670:	4620      	mov	r0, r4
 8003672:	f7ff fdff 	bl	8003274 <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8003676:	2800      	cmp	r0, #0
 8003678:	d1e5      	bne.n	8003646 <USBD_StdEPReq+0x94>
                  if (pdev->pClass[idx]->Setup != NULL)
 800367a:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
                  pdev->classId = idx;
 800367e:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d0de      	beq.n	8003646 <USBD_StdEPReq+0x94>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8003688:	4629      	mov	r1, r5
 800368a:	4620      	mov	r0, r4
}
 800368c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8003690:	4718      	bx	r3
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003692:	0672      	lsls	r2, r6, #25
 8003694:	d0c7      	beq.n	8003626 <USBD_StdEPReq+0x74>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8003696:	4631      	mov	r1, r6
 8003698:	f000 fabf 	bl	8003c1a <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800369c:	2180      	movs	r1, #128	@ 0x80
 800369e:	4620      	mov	r0, r4
 80036a0:	f000 fabb 	bl	8003c1a <USBD_LL_StallEP>
 80036a4:	e7cf      	b.n	8003646 <USBD_StdEPReq+0x94>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80036a6:	0671      	lsls	r1, r6, #25
 80036a8:	d1bd      	bne.n	8003626 <USBD_StdEPReq+0x74>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80036aa:	0612      	lsls	r2, r2, #24
 80036ac:	bf4c      	ite	mi
 80036ae:	f100 0114 	addmi.w	r1, r0, #20
 80036b2:	f500 71aa 	addpl.w	r1, r0, #340	@ 0x154
              pep->status = 0x0000U;
 80036b6:	2300      	movs	r3, #0
 80036b8:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80036ba:	2202      	movs	r2, #2
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80036bc:	4620      	mov	r0, r4
 80036be:	f000 f847 	bl	8003750 <USBD_CtlSendData>
              break;
 80036c2:	e7c0      	b.n	8003646 <USBD_StdEPReq+0x94>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80036c4:	f8b3 3164 	ldrh.w	r3, [r3, #356]	@ 0x164
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d0ac      	beq.n	8003626 <USBD_StdEPReq+0x74>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80036cc:	f006 057f 	and.w	r5, r6, #127	@ 0x7f
 80036d0:	2314      	movs	r3, #20
 80036d2:	fb03 0505 	mla	r5, r3, r5, r0
 80036d6:	f505 75aa 	add.w	r5, r5, #340	@ 0x154
 80036da:	e796      	b.n	800360a <USBD_StdEPReq+0x58>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80036dc:	4631      	mov	r1, r6
 80036de:	4620      	mov	r0, r4
 80036e0:	f000 fa60 	bl	8003ba4 <USBD_LL_IsStallEP>
 80036e4:	2800      	cmp	r0, #0
 80036e6:	d092      	beq.n	800360e <USBD_StdEPReq+0x5c>
 80036e8:	2301      	movs	r3, #1
 80036ea:	e791      	b.n	8003610 <USBD_StdEPReq+0x5e>

080036ec <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 80036ec:	780b      	ldrb	r3, [r1, #0]
 80036ee:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 80036f0:	784b      	ldrb	r3, [r1, #1]
 80036f2:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pbuff);
 80036f4:	884b      	ldrh	r3, [r1, #2]
 80036f6:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pbuff);
 80036f8:	888b      	ldrh	r3, [r1, #4]
 80036fa:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pbuff);
 80036fc:	88cb      	ldrh	r3, [r1, #6]
 80036fe:	80c3      	strh	r3, [r0, #6]
}
 8003700:	4770      	bx	lr

08003702 <USBD_CtlError>:
{
 8003702:	b510      	push	{r4, lr}
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8003704:	2180      	movs	r1, #128	@ 0x80
{
 8003706:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8003708:	f000 fa87 	bl	8003c1a <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800370c:	4620      	mov	r0, r4
 800370e:	2100      	movs	r1, #0
}
 8003710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 8003714:	f000 ba81 	b.w	8003c1a <USBD_LL_StallEP>

08003718 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8003718:	b570      	push	{r4, r5, r6, lr}
 800371a:	460d      	mov	r5, r1
 800371c:	4616      	mov	r6, r2
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 800371e:	4604      	mov	r4, r0
 8003720:	b170      	cbz	r0, 8003740 <USBD_GetString+0x28>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8003722:	f7fc fd59 	bl	80001d8 <strlen>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8003726:	b2c3      	uxtb	r3, r0
 8003728:	3301      	adds	r3, #1
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	8033      	strh	r3, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 800372e:	702b      	strb	r3, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8003730:	2303      	movs	r3, #3
 8003732:	706b      	strb	r3, [r5, #1]
  while (*pdesc != (uint8_t)'\0')
 8003734:	3c01      	subs	r4, #1
  idx++;
 8003736:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 8003738:	2100      	movs	r1, #0
  while (*pdesc != (uint8_t)'\0')
 800373a:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 800373e:	b902      	cbnz	r2, 8003742 <USBD_GetString+0x2a>
}
 8003740:	bd70      	pop	{r4, r5, r6, pc}
    unicode[idx] = *pdesc;
 8003742:	54ea      	strb	r2, [r5, r3]
    idx++;
 8003744:	1c5a      	adds	r2, r3, #1
    unicode[idx] = 0U;
 8003746:	b2d2      	uxtb	r2, r2
    idx++;
 8003748:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 800374a:	54a9      	strb	r1, [r5, r2]
    idx++;
 800374c:	b2db      	uxtb	r3, r3
 800374e:	e7f4      	b.n	800373a <USBD_GetString+0x22>

08003750 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8003750:	b510      	push	{r4, lr}
 8003752:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8003754:	2202      	movs	r2, #2
  pdev->ep_in[0].total_length = len;

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8003756:	e9c0 3306 	strd	r3, r3, [r0, #24]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800375a:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800375e:	460a      	mov	r2, r1
 8003760:	2100      	movs	r1, #0
 8003762:	f000 fa75 	bl	8003c50 <USBD_LL_Transmit>

  return USBD_OK;
}
 8003766:	2000      	movs	r0, #0
 8003768:	bd10      	pop	{r4, pc}

0800376a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800376a:	b508      	push	{r3, lr}
 800376c:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800376e:	460a      	mov	r2, r1
 8003770:	2100      	movs	r1, #0
 8003772:	f000 fa6d 	bl	8003c50 <USBD_LL_Transmit>

  return USBD_OK;
}
 8003776:	2000      	movs	r0, #0
 8003778:	bd08      	pop	{r3, pc}

0800377a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800377a:	b510      	push	{r4, lr}
 800377c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800377e:	2203      	movs	r2, #3
  pdev->ep_out[0].total_length = len;

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8003780:	e9c0 3356 	strd	r3, r3, [r0, #344]	@ 0x158
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8003784:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8003788:	460a      	mov	r2, r1
 800378a:	2100      	movs	r1, #0
 800378c:	f000 fa69 	bl	8003c62 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003790:	2000      	movs	r0, #0
 8003792:	bd10      	pop	{r4, pc}

08003794 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8003794:	b508      	push	{r3, lr}
 8003796:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8003798:	460a      	mov	r2, r1
 800379a:	2100      	movs	r1, #0
 800379c:	f000 fa61 	bl	8003c62 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80037a0:	2000      	movs	r0, #0
 80037a2:	bd08      	pop	{r3, pc}

080037a4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80037a4:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80037a6:	2204      	movs	r2, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80037a8:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80037aa:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80037ae:	4619      	mov	r1, r3
 80037b0:	461a      	mov	r2, r3
 80037b2:	f000 fa4d 	bl	8003c50 <USBD_LL_Transmit>

  return USBD_OK;
}
 80037b6:	2000      	movs	r0, #0
 80037b8:	bd08      	pop	{r3, pc}

080037ba <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80037ba:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80037bc:	2205      	movs	r2, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80037be:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80037c0:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80037c4:	4619      	mov	r1, r3
 80037c6:	461a      	mov	r2, r3
 80037c8:	f000 fa4b 	bl	8003c62 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80037cc:	2000      	movs	r0, #0
 80037ce:	bd08      	pop	{r3, pc}

080037d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80037d0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80037d2:	490f      	ldr	r1, [pc, #60]	@ (8003810 <MX_USB_DEVICE_Init+0x40>)
 80037d4:	480f      	ldr	r0, [pc, #60]	@ (8003814 <MX_USB_DEVICE_Init+0x44>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	f7ff fbb7 	bl	8002f4a <USBD_Init>
 80037dc:	b108      	cbz	r0, 80037e2 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 80037de:	f7fc fec3 	bl	8000568 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 80037e2:	490d      	ldr	r1, [pc, #52]	@ (8003818 <MX_USB_DEVICE_Init+0x48>)
 80037e4:	480b      	ldr	r0, [pc, #44]	@ (8003814 <MX_USB_DEVICE_Init+0x44>)
 80037e6:	f7ff fbc3 	bl	8002f70 <USBD_RegisterClass>
 80037ea:	b108      	cbz	r0, 80037f0 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 80037ec:	f7fc febc 	bl	8000568 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 80037f0:	490a      	ldr	r1, [pc, #40]	@ (800381c <MX_USB_DEVICE_Init+0x4c>)
 80037f2:	4808      	ldr	r0, [pc, #32]	@ (8003814 <MX_USB_DEVICE_Init+0x44>)
 80037f4:	f7ff fb9e 	bl	8002f34 <USBD_DFU_RegisterMedia>
 80037f8:	b108      	cbz	r0, 80037fe <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 80037fa:	f7fc feb5 	bl	8000568 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80037fe:	4805      	ldr	r0, [pc, #20]	@ (8003814 <MX_USB_DEVICE_Init+0x44>)
 8003800:	f7ff fbcf 	bl	8002fa2 <USBD_Start>
 8003804:	b118      	cbz	r0, 800380e <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8003806:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800380a:	f7fc bead 	b.w	8000568 <Error_Handler>
}
 800380e:	bd08      	pop	{r3, pc}
 8003810:	200000a4 	.word	0x200000a4
 8003814:	20000244 	.word	0x20000244
 8003818:	20000034 	.word	0x20000034
 800381c:	200000c0 	.word	0x200000c0

08003820 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8003820:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8003822:	4801      	ldr	r0, [pc, #4]	@ (8003828 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8003824:	800b      	strh	r3, [r1, #0]
}
 8003826:	4770      	bx	lr
 8003828:	20000090 	.word	0x20000090

0800382c <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800382c:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800382e:	4801      	ldr	r0, [pc, #4]	@ (8003834 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8003830:	800b      	strh	r3, [r1, #0]
}
 8003832:	4770      	bx	lr
 8003834:	2000008c 	.word	0x2000008c

08003838 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8003838:	2300      	movs	r3, #0
{
 800383a:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800383c:	1c4d      	adds	r5, r1, #1
 800383e:	461e      	mov	r6, r3
  for (idx = 0; idx < len; idx++)
 8003840:	b2dc      	uxtb	r4, r3
 8003842:	42a2      	cmp	r2, r4
 8003844:	d800      	bhi.n	8003848 <IntToUnicode+0x10>
  }
}
 8003846:	bd70      	pop	{r4, r5, r6, pc}
      pbuf[2 * idx] = (value >> 28) + '0';
 8003848:	0f04      	lsrs	r4, r0, #28
    if (((value >> 28)) < 0xA)
 800384a:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 800384e:	bf34      	ite	cc
 8003850:	3430      	addcc	r4, #48	@ 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8003852:	3437      	addcs	r4, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8003854:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    value = value << 4;
 8003858:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 800385a:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for (idx = 0; idx < len; idx++)
 800385e:	3301      	adds	r3, #1
 8003860:	e7ee      	b.n	8003840 <IntToUnicode+0x8>
	...

08003864 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8003864:	231a      	movs	r3, #26
{
 8003866:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8003868:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800386a:	4b0a      	ldr	r3, [pc, #40]	@ (8003894 <USBD_FS_SerialStrDescriptor+0x30>)
 800386c:	f8d3 0a10 	ldr.w	r0, [r3, #2576]	@ 0xa10
  deviceserial0 += deviceserial2;
 8003870:	f8d3 2a18 	ldr.w	r2, [r3, #2584]	@ 0xa18
  if (deviceserial0 != 0)
 8003874:	1880      	adds	r0, r0, r2
 8003876:	d00a      	beq.n	800388e <USBD_FS_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8003878:	f8d3 4a14 	ldr.w	r4, [r3, #2580]	@ 0xa14
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800387c:	4906      	ldr	r1, [pc, #24]	@ (8003898 <USBD_FS_SerialStrDescriptor+0x34>)
 800387e:	2208      	movs	r2, #8
 8003880:	f7ff ffda 	bl	8003838 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8003884:	2204      	movs	r2, #4
 8003886:	3110      	adds	r1, #16
 8003888:	4620      	mov	r0, r4
 800388a:	f7ff ffd5 	bl	8003838 <IntToUnicode>
}
 800388e:	4803      	ldr	r0, [pc, #12]	@ (800389c <USBD_FS_SerialStrDescriptor+0x38>)
 8003890:	bd10      	pop	{r4, pc}
 8003892:	bf00      	nop
 8003894:	1fff7000 	.word	0x1fff7000
 8003898:	20000072 	.word	0x20000072
 800389c:	20000070 	.word	0x20000070

080038a0 <USBD_FS_ManufacturerStrDescriptor>:
{
 80038a0:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80038a2:	4c04      	ldr	r4, [pc, #16]	@ (80038b4 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 80038a4:	4804      	ldr	r0, [pc, #16]	@ (80038b8 <USBD_FS_ManufacturerStrDescriptor+0x18>)
{
 80038a6:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80038a8:	4621      	mov	r1, r4
 80038aa:	f7ff ff35 	bl	8003718 <USBD_GetString>
}
 80038ae:	4620      	mov	r0, r4
 80038b0:	bd10      	pop	{r4, pc}
 80038b2:	bf00      	nop
 80038b4:	20000520 	.word	0x20000520
 80038b8:	08003cf4 	.word	0x08003cf4

080038bc <USBD_FS_ProductStrDescriptor>:
{
 80038bc:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80038be:	4c04      	ldr	r4, [pc, #16]	@ (80038d0 <USBD_FS_ProductStrDescriptor+0x14>)
 80038c0:	4804      	ldr	r0, [pc, #16]	@ (80038d4 <USBD_FS_ProductStrDescriptor+0x18>)
{
 80038c2:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80038c4:	4621      	mov	r1, r4
 80038c6:	f7ff ff27 	bl	8003718 <USBD_GetString>
}
 80038ca:	4620      	mov	r0, r4
 80038cc:	bd10      	pop	{r4, pc}
 80038ce:	bf00      	nop
 80038d0:	20000520 	.word	0x20000520
 80038d4:	08003d07 	.word	0x08003d07

080038d8 <USBD_FS_ConfigStrDescriptor>:
{
 80038d8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80038da:	4c04      	ldr	r4, [pc, #16]	@ (80038ec <USBD_FS_ConfigStrDescriptor+0x14>)
 80038dc:	4804      	ldr	r0, [pc, #16]	@ (80038f0 <USBD_FS_ConfigStrDescriptor+0x18>)
{
 80038de:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80038e0:	4621      	mov	r1, r4
 80038e2:	f7ff ff19 	bl	8003718 <USBD_GetString>
}
 80038e6:	4620      	mov	r0, r4
 80038e8:	bd10      	pop	{r4, pc}
 80038ea:	bf00      	nop
 80038ec:	20000520 	.word	0x20000520
 80038f0:	08003d26 	.word	0x08003d26

080038f4 <USBD_FS_InterfaceStrDescriptor>:
{
 80038f4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80038f6:	4c04      	ldr	r4, [pc, #16]	@ (8003908 <USBD_FS_InterfaceStrDescriptor+0x14>)
 80038f8:	4804      	ldr	r0, [pc, #16]	@ (800390c <USBD_FS_InterfaceStrDescriptor+0x18>)
{
 80038fa:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80038fc:	4621      	mov	r1, r4
 80038fe:	f7ff ff0b 	bl	8003718 <USBD_GetString>
}
 8003902:	4620      	mov	r0, r4
 8003904:	bd10      	pop	{r4, pc}
 8003906:	bf00      	nop
 8003908:	20000520 	.word	0x20000520
 800390c:	08003d31 	.word	0x08003d31

08003910 <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8003910:	b510      	push	{r4, lr}
 8003912:	4603      	mov	r3, r0
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  uint32_t i = 0;
  uint8_t *psrc = src;
  
  for(i = 0; i < Len; i++)
 8003914:	441a      	add	r2, r3
{
 8003916:	4608      	mov	r0, r1
 8003918:	3901      	subs	r1, #1
  for(i = 0; i < Len; i++)
 800391a:	4293      	cmp	r3, r2
 800391c:	d100      	bne.n	8003920 <MEM_If_Read_FS+0x10>
    dest[i] = *psrc++;
  }
  /* Return a valid address to avoid HardFault */
  return (uint8_t*)(dest); 
  /* USER CODE END 4 */
}
 800391e:	bd10      	pop	{r4, pc}
    dest[i] = *psrc++;
 8003920:	f813 4b01 	ldrb.w	r4, [r3], #1
 8003924:	f801 4f01 	strb.w	r4, [r1, #1]!
  for(i = 0; i < Len; i++)
 8003928:	e7f7      	b.n	800391a <MEM_If_Read_FS+0xa>

0800392a <MEM_If_GetStatus_FS>:
  /* USER CODE BEGIN 5 */
 switch(Cmd)
  {
  case DFU_MEDIA_PROGRAM:
    buffer[1] = (uint8_t)FLASH_PROGRAM_TIME;
    buffer[2] = (uint8_t)(FLASH_PROGRAM_TIME << 8);
 800392a:	2000      	movs	r0, #0
    buffer[1] = (uint8_t)FLASH_PROGRAM_TIME;
 800392c:	2332      	movs	r3, #50	@ 0x32
 800392e:	7053      	strb	r3, [r2, #1]
    buffer[2] = (uint8_t)(FLASH_PROGRAM_TIME << 8);
 8003930:	7090      	strb	r0, [r2, #2]
    buffer[3] = 0;  
 8003932:	70d0      	strb	r0, [r2, #3]
    buffer[3] = 0;  
    break;
  }
  return 0; 
  /* USER CODE END 5 */
}
 8003934:	4770      	bx	lr

08003936 <MEM_If_Write_FS>:
{
 8003936:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003938:	4617      	mov	r7, r2
 800393a:	1f06      	subs	r6, r0, #4
 800393c:	460d      	mov	r5, r1
  for(i = 0; i < Len; i+=4)
 800393e:	f1c0 0404 	rsb	r4, r0, #4
 8003942:	19a3      	adds	r3, r4, r6
 8003944:	429f      	cmp	r7, r3
 8003946:	d801      	bhi.n	800394c <MEM_If_Write_FS+0x16>
  return 0;
 8003948:	2000      	movs	r0, #0
}
 800394a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)(dest+i), *(uint32_t*)(src+i)) == HAL_OK)
 800394c:	6872      	ldr	r2, [r6, #4]
 800394e:	2300      	movs	r3, #0
 8003950:	4629      	mov	r1, r5
 8003952:	2002      	movs	r0, #2
 8003954:	f7fd f8ca 	bl	8000aec <HAL_FLASH_Program>
 8003958:	b938      	cbnz	r0, 800396a <MEM_If_Write_FS+0x34>
      if(*(uint32_t *)(src + i) != *(uint32_t*)(dest+i))
 800395a:	f855 3b04 	ldr.w	r3, [r5], #4
 800395e:	f856 2f04 	ldr.w	r2, [r6, #4]!
 8003962:	429a      	cmp	r2, r3
 8003964:	d0ed      	beq.n	8003942 <MEM_If_Write_FS+0xc>
        return 2;
 8003966:	2002      	movs	r0, #2
 8003968:	e7ef      	b.n	800394a <MEM_If_Write_FS+0x14>
      return 1;
 800396a:	2001      	movs	r0, #1
 800396c:	e7ed      	b.n	800394a <MEM_If_Write_FS+0x14>

0800396e <MEM_If_Erase_FS>:
{
 800396e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  */
static uint32_t GetSector(uint32_t Address)
{
  uint32_t sector = 0;
  
  if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 8003970:	f100 4278 	add.w	r2, r0, #4160749568	@ 0xf8000000
  uint32_t startsector = 0, sectorerror = 0;
 8003974:	2300      	movs	r3, #0
  if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 8003976:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
  uint32_t startsector = 0, sectorerror = 0;
 800397a:	9300      	str	r3, [sp, #0]
  if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 800397c:	d321      	bcc.n	80039c2 <MEM_If_Erase_FS+0x54>
  {
    sector = FLASH_SECTOR_0;  
  }
  else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
 800397e:	f5a2 4380 	sub.w	r3, r2, #16384	@ 0x4000
 8003982:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003986:	d32e      	bcc.n	80039e6 <MEM_If_Erase_FS+0x78>
  {
    sector = FLASH_SECTOR_1;  
  }
  else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
 8003988:	f5a2 4300 	sub.w	r3, r2, #32768	@ 0x8000
 800398c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003990:	d32b      	bcc.n	80039ea <MEM_If_Erase_FS+0x7c>
  {
    sector = FLASH_SECTOR_2;  
  }
  else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
 8003992:	f5a2 4240 	sub.w	r2, r2, #49152	@ 0xc000
 8003996:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 800399a:	d328      	bcc.n	80039ee <MEM_If_Erase_FS+0x80>
  {
    sector = FLASH_SECTOR_3;  
  }
  else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
 800399c:	f100 4077 	add.w	r0, r0, #4143972352	@ 0xf7000000
 80039a0:	f500 037f 	add.w	r3, r0, #16711680	@ 0xff0000
 80039a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039a8:	d323      	bcc.n	80039f2 <MEM_If_Erase_FS+0x84>
  {
    sector = FLASH_SECTOR_4;  
  }
  else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
 80039aa:	f500 037e 	add.w	r3, r0, #16646144	@ 0xfe0000
 80039ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039b2:	d320      	bcc.n	80039f6 <MEM_If_Erase_FS+0x88>
  {
    sector = FLASH_SECTOR_5;  
  }
  else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
 80039b4:	f500 007c 	add.w	r0, r0, #16515072	@ 0xfc0000
  {
    sector = FLASH_SECTOR_6;  
 80039b8:	f5b0 3f00 	cmp.w	r0, #131072	@ 0x20000
 80039bc:	bf2c      	ite	cs
 80039be:	2307      	movcs	r3, #7
 80039c0:	2306      	movcc	r3, #6
  eraseinitstruct.Banks = GetBank(Add);
 80039c2:	2201      	movs	r2, #1
 80039c4:	2100      	movs	r1, #0
 80039c6:	e9cd 1201 	strd	r1, r2, [sp, #4]
  eraseinitstruct.NbSectors = 1;
 80039ca:	e9cd 3203 	strd	r3, r2, [sp, #12]
  status = HAL_FLASHEx_Erase(&eraseinitstruct, &sectorerror);
 80039ce:	4669      	mov	r1, sp
  eraseinitstruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80039d0:	2302      	movs	r3, #2
  status = HAL_FLASHEx_Erase(&eraseinitstruct, &sectorerror);
 80039d2:	a801      	add	r0, sp, #4
  eraseinitstruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80039d4:	9305      	str	r3, [sp, #20]
  status = HAL_FLASHEx_Erase(&eraseinitstruct, &sectorerror);
 80039d6:	f7fd f92b 	bl	8000c30 <HAL_FLASHEx_Erase>
}
 80039da:	3800      	subs	r0, #0
 80039dc:	bf18      	it	ne
 80039de:	2001      	movne	r0, #1
 80039e0:	b007      	add	sp, #28
 80039e2:	f85d fb04 	ldr.w	pc, [sp], #4
    sector = FLASH_SECTOR_1;  
 80039e6:	2301      	movs	r3, #1
 80039e8:	e7eb      	b.n	80039c2 <MEM_If_Erase_FS+0x54>
    sector = FLASH_SECTOR_2;  
 80039ea:	2302      	movs	r3, #2
 80039ec:	e7e9      	b.n	80039c2 <MEM_If_Erase_FS+0x54>
    sector = FLASH_SECTOR_3;  
 80039ee:	2303      	movs	r3, #3
 80039f0:	e7e7      	b.n	80039c2 <MEM_If_Erase_FS+0x54>
    sector = FLASH_SECTOR_4;  
 80039f2:	2304      	movs	r3, #4
 80039f4:	e7e5      	b.n	80039c2 <MEM_If_Erase_FS+0x54>
    sector = FLASH_SECTOR_5;  
 80039f6:	2305      	movs	r3, #5
 80039f8:	e7e3      	b.n	80039c2 <MEM_If_Erase_FS+0x54>

080039fa <MEM_If_DeInit_FS>:
{
 80039fa:	b508      	push	{r3, lr}
  HAL_FLASH_Lock();
 80039fc:	f7fd f844 	bl	8000a88 <HAL_FLASH_Lock>
}
 8003a00:	2000      	movs	r0, #0
 8003a02:	bd08      	pop	{r3, pc}

08003a04 <MEM_If_Init_FS>:
{
 8003a04:	b508      	push	{r3, lr}
  HAL_FLASH_Unlock();
 8003a06:	f7fd f82d 	bl	8000a64 <HAL_FLASH_Unlock>
}
 8003a0a:	2000      	movs	r0, #0
 8003a0c:	bd08      	pop	{r3, pc}
	...

08003a10 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003a10:	b530      	push	{r4, r5, lr}
 8003a12:	4604      	mov	r4, r0
 8003a14:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a16:	2214      	movs	r2, #20
 8003a18:	2100      	movs	r1, #0
 8003a1a:	a803      	add	r0, sp, #12
 8003a1c:	f000 f92a 	bl	8003c74 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8003a20:	6823      	ldr	r3, [r4, #0]
 8003a22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a26:	d12e      	bne.n	8003a86 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a28:	4c18      	ldr	r4, [pc, #96]	@ (8003a8c <HAL_PCD_MspInit+0x7c>)
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a2a:	4819      	ldr	r0, [pc, #100]	@ (8003a90 <HAL_PCD_MspInit+0x80>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a2c:	2500      	movs	r5, #0
 8003a2e:	9501      	str	r5, [sp, #4]
 8003a30:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003a32:	f043 0301 	orr.w	r3, r3, #1
 8003a36:	6323      	str	r3, [r4, #48]	@ 0x30
 8003a38:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a40:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a44:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a46:	2302      	movs	r3, #2
 8003a48:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003a4c:	2103      	movs	r1, #3
 8003a4e:	230a      	movs	r3, #10
 8003a50:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a54:	a903      	add	r1, sp, #12
 8003a56:	f7fd f93b 	bl	8000cd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003a5a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003a5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a60:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a62:	9502      	str	r5, [sp, #8]
 8003a64:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003a66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a6a:	6463      	str	r3, [r4, #68]	@ 0x44
 8003a6c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003a6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a72:	9302      	str	r3, [sp, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8003a74:	2043      	movs	r0, #67	@ 0x43
 8003a76:	462a      	mov	r2, r5
 8003a78:	4629      	mov	r1, r5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003a7a:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8003a7c:	f7fc ff1e 	bl	80008bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8003a80:	2043      	movs	r0, #67	@ 0x43
 8003a82:	f7fc ff4d 	bl	8000920 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8003a86:	b009      	add	sp, #36	@ 0x24
 8003a88:	bd30      	pop	{r4, r5, pc}
 8003a8a:	bf00      	nop
 8003a8c:	40023800 	.word	0x40023800
 8003a90:	40020000 	.word	0x40020000

08003a94 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8003a94:	f200 419c 	addw	r1, r0, #1180	@ 0x49c
 8003a98:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8003a9c:	f7ff baa0 	b.w	8002fe0 <USBD_LL_SetupStage>

08003aa0 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003aa0:	2324      	movs	r3, #36	@ 0x24
 8003aa2:	fb03 0301 	mla	r3, r3, r1, r0
 8003aa6:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8003aaa:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 8003aae:	f7ff bac7 	b.w	8003040 <USBD_LL_DataOutStage>

08003ab2 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8003ab2:	2324      	movs	r3, #36	@ 0x24
 8003ab4:	fb03 0301 	mla	r3, r3, r1, r0
 8003ab8:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8003abc:	6a1a      	ldr	r2, [r3, #32]
 8003abe:	f7ff baf4 	b.w	80030aa <USBD_LL_DataInStage>

08003ac2 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8003ac2:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8003ac6:	f7ff bb8e 	b.w	80031e6 <USBD_LL_SOF>

08003aca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003aca:	b510      	push	{r4, lr}
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8003acc:	79c3      	ldrb	r3, [r0, #7]
 8003ace:	2b02      	cmp	r3, #2
{
 8003ad0:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8003ad2:	d001      	beq.n	8003ad8 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8003ad4:	f7fc fd48 	bl	8000568 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8003ad8:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 8003adc:	2101      	movs	r1, #1
 8003ade:	f7ff fb66 	bl	80031ae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003ae2:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
}
 8003ae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003aea:	f7ff bb31 	b.w	8003150 <USBD_LL_Reset>
	...

08003af0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003af0:	b510      	push	{r4, lr}
 8003af2:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8003af4:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8003af8:	f7ff fb5c 	bl	80031b4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8003afc:	6822      	ldr	r2, [r4, #0]
 8003afe:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 8003b02:	f043 0301 	orr.w	r3, r3, #1
 8003b06:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8003b0a:	7ae3      	ldrb	r3, [r4, #11]
 8003b0c:	b123      	cbz	r3, 8003b18 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003b0e:	4a03      	ldr	r2, [pc, #12]	@ (8003b1c <HAL_PCD_SuspendCallback+0x2c>)
 8003b10:	6913      	ldr	r3, [r2, #16]
 8003b12:	f043 0306 	orr.w	r3, r3, #6
 8003b16:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8003b18:	bd10      	pop	{r4, pc}
 8003b1a:	bf00      	nop
 8003b1c:	e000ed00 	.word	0xe000ed00

08003b20 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8003b20:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8003b24:	f7ff bb54 	b.w	80031d0 <USBD_LL_Resume>

08003b28 <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8003b28:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8003b2c:	f7ff bb7b 	b.w	8003226 <USBD_LL_IsoOUTIncomplete>

08003b30 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8003b30:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8003b34:	f7ff bb64 	b.w	8003200 <USBD_LL_IsoINIncomplete>

08003b38 <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8003b38:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8003b3c:	f7ff bb86 	b.w	800324c <USBD_LL_DevConnected>

08003b40 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8003b40:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8003b44:	f7ff bb84 	b.w	8003250 <USBD_LL_DevDisconnected>

08003b48 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8003b48:	b508      	push	{r3, lr}
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8003b4a:	7802      	ldrb	r2, [r0, #0]
{
 8003b4c:	4603      	mov	r3, r0
  if (pdev->id == DEVICE_FS) {
 8003b4e:	bb22      	cbnz	r2, 8003b9a <USBD_LL_Init+0x52>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8003b50:	4813      	ldr	r0, [pc, #76]	@ (8003ba0 <USBD_LL_Init+0x58>)
 8003b52:	f8c0 34e0 	str.w	r3, [r0, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8003b56:	f8c3 02c8 	str.w	r0, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003b5a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003b5e:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8003b60:	2304      	movs	r3, #4
 8003b62:	7103      	strb	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003b64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003b68:	80c3      	strh	r3, [r0, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	7243      	strb	r3, [r0, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8003b6e:	8142      	strh	r2, [r0, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003b70:	7302      	strb	r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8003b72:	81c2      	strh	r2, [r0, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003b74:	f7fd f986 	bl	8000e84 <HAL_PCD_Init>
 8003b78:	b108      	cbz	r0, 8003b7e <USBD_LL_Init+0x36>
  {
    Error_Handler( );
 8003b7a:	f7fc fcf5 	bl	8000568 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8003b7e:	2180      	movs	r1, #128	@ 0x80
 8003b80:	4807      	ldr	r0, [pc, #28]	@ (8003ba0 <USBD_LL_Init+0x58>)
 8003b82:	f7fd fe9a 	bl	80018ba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8003b86:	2240      	movs	r2, #64	@ 0x40
 8003b88:	2100      	movs	r1, #0
 8003b8a:	4805      	ldr	r0, [pc, #20]	@ (8003ba0 <USBD_LL_Init+0x58>)
 8003b8c:	f7fd fe76 	bl	800187c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8003b90:	4803      	ldr	r0, [pc, #12]	@ (8003ba0 <USBD_LL_Init+0x58>)
 8003b92:	2280      	movs	r2, #128	@ 0x80
 8003b94:	2101      	movs	r1, #1
 8003b96:	f7fd fe71 	bl	800187c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
}
 8003b9a:	2000      	movs	r0, #0
 8003b9c:	bd08      	pop	{r3, pc}
 8003b9e:	bf00      	nop
 8003ba0:	20000b44 	.word	0x20000b44

08003ba4 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;

  if((ep_addr & 0x80) == 0x80)
 8003ba4:	f011 0f80 	tst.w	r1, #128	@ 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003ba8:	f8d0 32c8 	ldr.w	r3, [r0, #712]	@ 0x2c8
  if((ep_addr & 0x80) == 0x80)
 8003bac:	f04f 0224 	mov.w	r2, #36	@ 0x24
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8003bb0:	bf1b      	ittet	ne
 8003bb2:	f001 017f 	andne.w	r1, r1, #127	@ 0x7f
 8003bb6:	fb02 3301 	mlane	r3, r2, r1, r3
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8003bba:	fb02 3301 	mlaeq	r3, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8003bbe:	7d98      	ldrbne	r0, [r3, #22]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8003bc0:	bf08      	it	eq
 8003bc2:	f893 0256 	ldrbeq.w	r0, [r3, #598]	@ 0x256
  }
}
 8003bc6:	4770      	bx	lr

08003bc8 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8003bc8:	4800      	ldr	r0, [pc, #0]	@ (8003bcc <USBD_static_malloc+0x4>)
 8003bca:	4770      	bx	lr
 8003bcc:	20000720 	.word	0x20000720

08003bd0 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 8003bd0:	4770      	bx	lr

08003bd2 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8003bd2:	b118      	cbz	r0, 8003bdc <USBD_Get_USB_Status+0xa>
 8003bd4:	2802      	cmp	r0, #2
 8003bd6:	bf0c      	ite	eq
 8003bd8:	2001      	moveq	r0, #1
 8003bda:	2003      	movne	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8003bdc:	4770      	bx	lr

08003bde <USBD_LL_Start>:
{
 8003bde:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8003be0:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8003be4:	f7fd f9bd 	bl	8000f62 <HAL_PCD_Start>
}
 8003be8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003bec:	f7ff bff1 	b.w	8003bd2 <USBD_Get_USB_Status>

08003bf0 <USBD_LL_Stop>:
{
 8003bf0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Stop(pdev->pData);
 8003bf2:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8003bf6:	f7fd f9d3 	bl	8000fa0 <HAL_PCD_Stop>
}
 8003bfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003bfe:	f7ff bfe8 	b.w	8003bd2 <USBD_Get_USB_Status>

08003c02 <USBD_LL_OpenEP>:
{
 8003c02:	b510      	push	{r4, lr}
 8003c04:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8003c06:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
{
 8003c0a:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8003c0c:	4623      	mov	r3, r4
 8003c0e:	f7fd f9fe 	bl	800100e <HAL_PCD_EP_Open>
}
 8003c12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003c16:	f7ff bfdc 	b.w	8003bd2 <USBD_Get_USB_Status>

08003c1a <USBD_LL_StallEP>:
{
 8003c1a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003c1c:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8003c20:	f7fd fa65 	bl	80010ee <HAL_PCD_EP_SetStall>
}
 8003c24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003c28:	f7ff bfd3 	b.w	8003bd2 <USBD_Get_USB_Status>

08003c2c <USBD_LL_ClearStallEP>:
{
 8003c2c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8003c2e:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8003c32:	f7fd fa93 	bl	800115c <HAL_PCD_EP_ClrStall>
}
 8003c36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003c3a:	f7ff bfca 	b.w	8003bd2 <USBD_Get_USB_Status>

08003c3e <USBD_LL_SetUSBAddress>:
{
 8003c3e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003c40:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8003c44:	f7fd f9d0 	bl	8000fe8 <HAL_PCD_SetAddress>
}
 8003c48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003c4c:	f7ff bfc1 	b.w	8003bd2 <USBD_Get_USB_Status>

08003c50 <USBD_LL_Transmit>:
{
 8003c50:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003c52:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8003c56:	f7fd fa2f 	bl	80010b8 <HAL_PCD_EP_Transmit>
}
 8003c5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003c5e:	f7ff bfb8 	b.w	8003bd2 <USBD_Get_USB_Status>

08003c62 <USBD_LL_PrepareReceive>:
{
 8003c62:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003c64:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8003c68:	f7fd fa08 	bl	800107c <HAL_PCD_EP_Receive>
}
 8003c6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003c70:	f7ff bfaf 	b.w	8003bd2 <USBD_Get_USB_Status>

08003c74 <memset>:
 8003c74:	4402      	add	r2, r0
 8003c76:	4603      	mov	r3, r0
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d100      	bne.n	8003c7e <memset+0xa>
 8003c7c:	4770      	bx	lr
 8003c7e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c82:	e7f9      	b.n	8003c78 <memset+0x4>

08003c84 <__libc_init_array>:
 8003c84:	b570      	push	{r4, r5, r6, lr}
 8003c86:	4d0d      	ldr	r5, [pc, #52]	@ (8003cbc <__libc_init_array+0x38>)
 8003c88:	4c0d      	ldr	r4, [pc, #52]	@ (8003cc0 <__libc_init_array+0x3c>)
 8003c8a:	1b64      	subs	r4, r4, r5
 8003c8c:	10a4      	asrs	r4, r4, #2
 8003c8e:	2600      	movs	r6, #0
 8003c90:	42a6      	cmp	r6, r4
 8003c92:	d109      	bne.n	8003ca8 <__libc_init_array+0x24>
 8003c94:	4d0b      	ldr	r5, [pc, #44]	@ (8003cc4 <__libc_init_array+0x40>)
 8003c96:	4c0c      	ldr	r4, [pc, #48]	@ (8003cc8 <__libc_init_array+0x44>)
 8003c98:	f000 f818 	bl	8003ccc <_init>
 8003c9c:	1b64      	subs	r4, r4, r5
 8003c9e:	10a4      	asrs	r4, r4, #2
 8003ca0:	2600      	movs	r6, #0
 8003ca2:	42a6      	cmp	r6, r4
 8003ca4:	d105      	bne.n	8003cb2 <__libc_init_array+0x2e>
 8003ca6:	bd70      	pop	{r4, r5, r6, pc}
 8003ca8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cac:	4798      	blx	r3
 8003cae:	3601      	adds	r6, #1
 8003cb0:	e7ee      	b.n	8003c90 <__libc_init_array+0xc>
 8003cb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cb6:	4798      	blx	r3
 8003cb8:	3601      	adds	r6, #1
 8003cba:	e7f2      	b.n	8003ca2 <__libc_init_array+0x1e>
 8003cbc:	08003d80 	.word	0x08003d80
 8003cc0:	08003d80 	.word	0x08003d80
 8003cc4:	08003d80 	.word	0x08003d80
 8003cc8:	08003d84 	.word	0x08003d84

08003ccc <_init>:
 8003ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cce:	bf00      	nop
 8003cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cd2:	bc08      	pop	{r3}
 8003cd4:	469e      	mov	lr, r3
 8003cd6:	4770      	bx	lr

08003cd8 <_fini>:
 8003cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cda:	bf00      	nop
 8003cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cde:	bc08      	pop	{r3}
 8003ce0:	469e      	mov	lr, r3
 8003ce2:	4770      	bx	lr
